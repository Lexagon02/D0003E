
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000b90  00000c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b90  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c87  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094f  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000560  00000000  00000000  00002306  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000511  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008a3  00000000  00000000  00002f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 e9       	ldi	r30, 0x90	; 144
  70:	fb e0       	ldi	r31, 0x0B	; 11
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 24 02 	call	0x448	; 0x448 <main>
  82:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <LCD_Init>:
}

void LCD_Init(void)
{

	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0) |(1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  8a:	87 eb       	ldi	r24, 0xB7	; 183
  8c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

	LCDFRR = (0<<LCDPS2) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  90:	87 e0       	ldi	r24, 0x07	; 7
  92:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	LCDCRA =  (1<<LCDEN); // LCDCRA |= 0x80 ----> ENABLE DISPLAY!
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  a2:	08 95       	ret

000000a4 <timer_init>:
}

void timer_init(void){
	PORTA |= (1<<LCDEN); // this represent the LED portA as output
  a4:	17 9a       	sbi	0x02, 7	; 2
	TCCR1B = (1<<CS12); //pre-scaling factor to (1<<CS12) | (1<<CS10) ---> 1024mHz
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
  ac:	08 95       	ret

000000ae <writeChar>:
	0x1f51, //8
	0x1b51 //9
};

void writeChar(char ch, uint8_t pos)
{   if (!(ch >= 48 && ch<=57))
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	28 97       	sbiw	r28, 0x08	; 8
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	90 ed       	ldi	r25, 0xD0	; 208
  c4:	98 0f       	add	r25, r24
  c6:	9a 30       	cpi	r25, 0x0A	; 10
  c8:	08 f0       	brcs	.+2      	; 0xcc <writeChar+0x1e>
  ca:	46 c0       	rjmp	.+140    	; 0x158 <writeChar+0xaa>
		uint8_t nibbles[4];
		uint16_t fontValue;
	volatile uint8_t *ptr; } regz;
	regz registers;
	
	registers.fontValue=sourceCodeCharacter[9-(57-ch)], registers.ptr=(uint8_t*)0xEC + pos/2;
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	e0 56       	subi	r30, 0x60	; 96
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 81       	ld	r24, Z
  da:	91 81       	ldd	r25, Z+1	; 0x01
  dc:	9e 83       	std	Y+6, r25	; 0x06
  de:	8d 83       	std	Y+5, r24	; 0x05
  e0:	86 2f       	mov	r24, r22
  e2:	86 95       	lsr	r24
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	84 51       	subi	r24, 0x14	; 20
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	98 87       	std	Y+8, r25	; 0x08
  ec:	8f 83       	std	Y+7, r24	; 0x07
  ee:	fe 01       	movw	r30, r28
  f0:	31 96       	adiw	r30, 0x01	; 1
  f2:	9e 01       	movw	r18, r28
  f4:	2b 5f       	subi	r18, 0xFB	; 251
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i=0; i< 4; i++){
		*(registers.nibbles+i) = registers.fontValue & 0xf, registers.fontValue >>=4;
		if(!(pos%2)) { *registers.ptr &= ~(0xf), *registers.ptr |= *(registers.nibbles+i); }
  f8:	61 70       	andi	r22, 0x01	; 1
	volatile uint8_t *ptr; } regz;
	regz registers;
	
	registers.fontValue=sourceCodeCharacter[9-(57-ch)], registers.ptr=(uint8_t*)0xEC + pos/2;
	for(uint8_t i=0; i< 4; i++){
		*(registers.nibbles+i) = registers.fontValue & 0xf, registers.fontValue >>=4;
  fa:	8d 81       	ldd	r24, Y+5	; 0x05
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	80 83       	st	Z, r24
 100:	8d 81       	ldd	r24, Y+5	; 0x05
 102:	9e 81       	ldd	r25, Y+6	; 0x06
 104:	92 95       	swap	r25
 106:	82 95       	swap	r24
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	89 27       	eor	r24, r25
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	89 27       	eor	r24, r25
 110:	9e 83       	std	Y+6, r25	; 0x06
 112:	8d 83       	std	Y+5, r24	; 0x05
		if(!(pos%2)) { *registers.ptr &= ~(0xf), *registers.ptr |= *(registers.nibbles+i); }
 114:	61 11       	cpse	r22, r1
 116:	0a c0       	rjmp	.+20     	; 0x12c <writeChar+0x7e>
 118:	af 81       	ldd	r26, Y+7	; 0x07
 11a:	b8 85       	ldd	r27, Y+8	; 0x08
 11c:	8c 91       	ld	r24, X
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	8c 93       	st	X, r24
 122:	9c 91       	ld	r25, X
 124:	80 81       	ld	r24, Z
 126:	89 2b       	or	r24, r25
 128:	8c 93       	st	X, r24
 12a:	0d c0       	rjmp	.+26     	; 0x146 <writeChar+0x98>
		else{ *registers.ptr &= ~(0xf0), *registers.ptr |= (*(registers.nibbles+i) << 4); }
 12c:	af 81       	ldd	r26, Y+7	; 0x07
 12e:	b8 85       	ldd	r27, Y+8	; 0x08
 130:	8c 91       	ld	r24, X
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	8c 93       	st	X, r24
 136:	4c 91       	ld	r20, X
 138:	90 81       	ld	r25, Z
 13a:	50 e1       	ldi	r21, 0x10	; 16
 13c:	95 9f       	mul	r25, r21
 13e:	c0 01       	movw	r24, r0
 140:	11 24       	eor	r1, r1
 142:	84 2b       	or	r24, r20
 144:	8c 93       	st	X, r24
		registers.ptr+=5;
 146:	8f 81       	ldd	r24, Y+7	; 0x07
 148:	98 85       	ldd	r25, Y+8	; 0x08
 14a:	05 96       	adiw	r24, 0x05	; 5
 14c:	98 87       	std	Y+8, r25	; 0x08
 14e:	8f 83       	std	Y+7, r24	; 0x07
 150:	31 96       	adiw	r30, 0x01	; 1
		uint16_t fontValue;
	volatile uint8_t *ptr; } regz;
	regz registers;
	
	registers.fontValue=sourceCodeCharacter[9-(57-ch)], registers.ptr=(uint8_t*)0xEC + pos/2;
	for(uint8_t i=0; i< 4; i++){
 152:	e2 17       	cp	r30, r18
 154:	f3 07       	cpc	r31, r19
 156:	89 f6       	brne	.-94     	; 0xfa <writeChar+0x4c>
		*(registers.nibbles+i) = registers.fontValue & 0xf, registers.fontValue >>=4;
		if(!(pos%2)) { *registers.ptr &= ~(0xf), *registers.ptr |= *(registers.nibbles+i); }
		else{ *registers.ptr &= ~(0xf0), *registers.ptr |= (*(registers.nibbles+i) << 4); }
		registers.ptr+=5;
	}
} // struct
 158:	28 96       	adiw	r28, 0x08	; 8
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <clearLCD>:

void clearLCD(void){
	LCDDR0 =0x0;
 16a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	LCDDR5=0x0;
 16e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	LCDDR10=0x0;
 172:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
	LCDDR15=0x0;
 176:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>

	LCDDR1=0x0;
 17a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
	LCDDR6=0x0;
 17e:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
	LCDDR11=0x0;
 182:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
	LCDDR16=0x0;
 186:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
	
	LCDDR2 =0x0;
 18a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
	LCDDR7=0x0;
 18e:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
	LCDDR12=0x0;
 192:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
	LCDDR17=0x0;
 196:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>

	LCDDR3=0x0;
 19a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
	LCDDR8=0x0;
 19e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
	LCDDR13=0x0;
 1a2:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
	LCDDR18=0x0;
 1a6:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
 1aa:	08 95       	ret

000001ac <is_prime>:
	char str[size_needed];
	sprintf(str, "%ld", i);
	output(str, size_needed-1);
}

int is_prime(long i){
 1ac:	8f 92       	push	r8
 1ae:	9f 92       	push	r9
 1b0:	af 92       	push	r10
 1b2:	bf 92       	push	r11
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	6b 01       	movw	r12, r22
 1c2:	7c 01       	movw	r14, r24
	int c;
	for (c = 2; c <= i - 1; c++)
 1c4:	4b 01       	movw	r8, r22
 1c6:	5c 01       	movw	r10, r24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	88 1a       	sub	r8, r24
 1cc:	91 08       	sbc	r9, r1
 1ce:	a1 08       	sbc	r10, r1
 1d0:	b1 08       	sbc	r11, r1
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	88 16       	cp	r8, r24
 1d6:	91 04       	cpc	r9, r1
 1d8:	a1 04       	cpc	r10, r1
 1da:	b1 04       	cpc	r11, r1
 1dc:	6c f1       	brlt	.+90     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
	{
		if (i%c == 0)
 1de:	d7 01       	movw	r26, r14
 1e0:	c6 01       	movw	r24, r12
 1e2:	81 70       	andi	r24, 0x01	; 1
 1e4:	99 27       	eor	r25, r25
 1e6:	aa 27       	eor	r26, r26
 1e8:	b0 78       	andi	r27, 0x80	; 128
 1ea:	bb 23       	and	r27, r27
 1ec:	54 f4       	brge	.+20     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	a1 09       	sbc	r26, r1
 1f2:	b1 09       	sbc	r27, r1
 1f4:	8e 6f       	ori	r24, 0xFE	; 254
 1f6:	9f 6f       	ori	r25, 0xFF	; 255
 1f8:	af 6f       	ori	r26, 0xFF	; 255
 1fa:	bf 6f       	ori	r27, 0xFF	; 255
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	a1 1d       	adc	r26, r1
 200:	b1 1d       	adc	r27, r1
 202:	89 2b       	or	r24, r25
 204:	8a 2b       	or	r24, r26
 206:	8b 2b       	or	r24, r27
 208:	09 f1       	breq	.+66     	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 20a:	c2 e0       	ldi	r28, 0x02	; 2
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	08 c0       	rjmp	.+16     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 210:	c7 01       	movw	r24, r14
 212:	b6 01       	movw	r22, r12
 214:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodsi4>
 218:	67 2b       	or	r22, r23
 21a:	68 2b       	or	r22, r24
 21c:	69 2b       	or	r22, r25
 21e:	c9 f0       	breq	.+50     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
	output(str, size_needed-1);
}

int is_prime(long i){
	int c;
	for (c = 2; c <= i - 1; c++)
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	9e 01       	movw	r18, r28
 224:	0d 2e       	mov	r0, r29
 226:	00 0c       	add	r0, r0
 228:	44 0b       	sbc	r20, r20
 22a:	55 0b       	sbc	r21, r21
 22c:	82 16       	cp	r8, r18
 22e:	93 06       	cpc	r9, r19
 230:	a4 06       	cpc	r10, r20
 232:	b5 06       	cpc	r11, r21
 234:	6c f7       	brge	.-38     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 236:	04 c0       	rjmp	.+8      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 238:	22 e0       	ldi	r18, 0x02	; 2
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	50 e0       	ldi	r21, 0x00	; 0
	{
		if (i%c == 0)
		return 0;
	}
	if (c == i)
 240:	c2 16       	cp	r12, r18
 242:	d3 06       	cpc	r13, r19
 244:	e4 06       	cpc	r14, r20
 246:	f5 06       	cpc	r15, r21
 248:	39 f0       	breq	.+14     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
	return 1;
}
 24a:	08 c0       	rjmp	.+16     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
int is_prime(long i){
	int c;
	for (c = 2; c <= i - 1; c++)
	{
		if (i%c == 0)
		return 0;
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	05 c0       	rjmp	.+10     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
	}
	if (c == i)
	return 1;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	df 90       	pop	r13
 266:	cf 90       	pop	r12
 268:	bf 90       	pop	r11
 26a:	af 90       	pop	r10
 26c:	9f 90       	pop	r9
 26e:	8f 90       	pop	r8
 270:	08 95       	ret

00000272 <output>:

void output(char arr[], int length)
{
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
	int index = 0;
	int lastIndex = length;
	int pos = 0;
	index = length-6;
 280:	eb 01       	movw	r28, r22
 282:	26 97       	sbiw	r28, 0x06	; 6
	while(index <= lastIndex)
 284:	6c 17       	cp	r22, r28
 286:	7d 07       	cpc	r23, r29
 288:	84 f0       	brlt	.+32     	; 0x2aa <output+0x38>
 28a:	7b 01       	movw	r14, r22
 28c:	6c 01       	movw	r12, r24
 28e:	c8 0f       	add	r28, r24
 290:	d9 1f       	adc	r29, r25
 292:	10 e0       	ldi	r17, 0x00	; 0
	{
		char ch = arr[index];
		writeChar(ch, pos);
 294:	61 2f       	mov	r22, r17
 296:	89 91       	ld	r24, Y+
 298:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
 29c:	1f 5f       	subi	r17, 0xFF	; 255
{
	int index = 0;
	int lastIndex = length;
	int pos = 0;
	index = length-6;
	while(index <= lastIndex)
 29e:	9e 01       	movw	r18, r28
 2a0:	2c 19       	sub	r18, r12
 2a2:	3d 09       	sbc	r19, r13
 2a4:	e2 16       	cp	r14, r18
 2a6:	f3 06       	cpc	r15, r19
 2a8:	ac f7       	brge	.-22     	; 0x294 <output+0x22>
		char ch = arr[index];
		writeChar(ch, pos);
		index++;
		pos++;
	}
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	cf 90       	pop	r12
 2b8:	08 95       	ret

000002ba <writeLong>:
	LCDDR8=0x0;
	LCDDR13=0x0;
	LCDDR18=0x0;
}

void writeLong(long i){
 2ba:	4f 92       	push	r4
 2bc:	5f 92       	push	r5
 2be:	6f 92       	push	r6
 2c0:	7f 92       	push	r7
 2c2:	8f 92       	push	r8
 2c4:	9f 92       	push	r9
 2c6:	af 92       	push	r10
 2c8:	bf 92       	push	r11
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	2b 01       	movw	r4, r22
 2e0:	3c 01       	movw	r6, r24
	} while (value_copy != 0);

	char str[size_needed];
	sprintf(str, "%ld", i);
	output(str, size_needed-1);
}
 2e2:	cd b6       	in	r12, 0x3d	; 61
 2e4:	de b6       	in	r13, 0x3e	; 62

void writeLong(long i){
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
	if (value_copy < 0) size_needed++; // Only needed for signed types.
 2e6:	dc 01       	movw	r26, r24
 2e8:	cb 01       	movw	r24, r22
 2ea:	80 95       	com	r24
 2ec:	90 95       	com	r25
 2ee:	a0 95       	com	r26
 2f0:	b0 95       	com	r27
 2f2:	88 27       	eor	r24, r24
 2f4:	b7 fd       	sbrc	r27, 7
 2f6:	83 95       	inc	r24
 2f8:	99 27       	eor	r25, r25
 2fa:	aa 27       	eor	r26, r26
 2fc:	bb 27       	eor	r27, r27
 2fe:	02 e0       	ldi	r16, 0x02	; 2
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	08 1b       	sub	r16, r24
 304:	19 0b       	sbc	r17, r25
}

void writeLong(long i){
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
 306:	a3 01       	movw	r20, r6
 308:	92 01       	movw	r18, r4
	if (value_copy < 0) size_needed++; // Only needed for signed types.
	do {
		size_needed++; // Add 1 per digit.
		value_copy /= 10;
 30a:	0f 2e       	mov	r0, r31
 30c:	fa e0       	ldi	r31, 0x0A	; 10
 30e:	8f 2e       	mov	r8, r31
 310:	91 2c       	mov	r9, r1
 312:	a1 2c       	mov	r10, r1
 314:	b1 2c       	mov	r11, r1
 316:	f0 2d       	mov	r31, r0
 318:	01 c0       	rjmp	.+2      	; 0x31c <writeLong+0x62>
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
	if (value_copy < 0) size_needed++; // Only needed for signed types.
	do {
		size_needed++; // Add 1 per digit.
 31a:	87 01       	movw	r16, r14
 31c:	78 01       	movw	r14, r16
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	e8 1a       	sub	r14, r24
 322:	f8 0a       	sbc	r15, r24
		value_copy /= 10;
 324:	ca 01       	movw	r24, r20
 326:	b9 01       	movw	r22, r18
 328:	a5 01       	movw	r20, r10
 32a:	94 01       	movw	r18, r8
 32c:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodsi4>
	} while (value_copy != 0);
 330:	21 15       	cp	r18, r1
 332:	31 05       	cpc	r19, r1
 334:	41 05       	cpc	r20, r1
 336:	51 05       	cpc	r21, r1
 338:	81 f7       	brne	.-32     	; 0x31a <writeLong+0x60>

	char str[size_needed];
 33a:	8d b7       	in	r24, 0x3d	; 61
 33c:	9e b7       	in	r25, 0x3e	; 62
 33e:	8e 19       	sub	r24, r14
 340:	9f 09       	sbc	r25, r15
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	9e bf       	out	0x3e, r25	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	8d bf       	out	0x3d, r24	; 61
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	7c 01       	movw	r14, r24
	sprintf(str, "%ld", i);
 350:	7f 92       	push	r7
 352:	6f 92       	push	r6
 354:	5f 92       	push	r5
 356:	4f 92       	push	r4
 358:	84 e1       	ldi	r24, 0x14	; 20
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	9f 93       	push	r25
 35e:	8f 93       	push	r24
 360:	ff 92       	push	r15
 362:	ef 92       	push	r14
 364:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <sprintf>
	output(str, size_needed-1);
 368:	b8 01       	movw	r22, r16
 36a:	8e 2d       	mov	r24, r14
 36c:	9f 2d       	mov	r25, r15
 36e:	0e 94 39 01 	call	0x272	; 0x272 <output>
}
 372:	8d b7       	in	r24, 0x3d	; 61
 374:	9e b7       	in	r25, 0x3e	; 62
 376:	08 96       	adiw	r24, 0x08	; 8
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	9e bf       	out	0x3e, r25	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	8d bf       	out	0x3d, r24	; 61
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de be       	out	0x3e, r13	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd be       	out	0x3d, r12	; 61
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	bf 90       	pop	r11
 39e:	af 90       	pop	r10
 3a0:	9f 90       	pop	r9
 3a2:	8f 90       	pop	r8
 3a4:	7f 90       	pop	r7
 3a6:	6f 90       	pop	r6
 3a8:	5f 90       	pop	r5
 3aa:	4f 90       	pop	r4
 3ac:	08 95       	ret

000003ae <primes>:
	in primes we removed the delay and clearLCD since function
	since this will be manged in main. We also return the next prime
	prime since we need it to keep track of where we are.
	We don't need the for loop so it's removed.
*/
long primes(long number){
 3ae:	8f 92       	push	r8
 3b0:	9f 92       	push	r9
 3b2:	af 92       	push	r10
 3b4:	bf 92       	push	r11
 3b6:	cf 92       	push	r12
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	4b 01       	movw	r8, r22
 3c8:	5c 01       	movw	r10, r24
	int i = 1;
	int adder = 1; 
	int primeFound = 0;
	
	if(number % 2 != 0){
 3ca:	60 ff       	sbrs	r22, 0
 3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <primes+0x26>
		i = 2;
 3ce:	02 e0       	ldi	r16, 0x02	; 2
 3d0:	10 e0       	ldi	r17, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <primes+0x2a>
	since this will be manged in main. We also return the next prime
	prime since we need it to keep track of where we are.
	We don't need the for loop so it's removed.
*/
long primes(long number){
	int i = 1;
 3d4:	01 e0       	ldi	r16, 0x01	; 1
 3d6:	10 e0       	ldi	r17, 0x00	; 0
 3d8:	e8 01       	movw	r28, r16
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <primes+0x32>
		if(is_prime(number+i) == 1) {
			primeFound = 1;
			writeLong(number+i);
			return (number+i);
		}
		i=i+adder; // if number is NOT dividable by two this is better optimized
 3dc:	c0 0f       	add	r28, r16
 3de:	d1 1f       	adc	r29, r17
		i = 2;
		adder = 2;
	}
	
	while (primeFound == 0){
		if(is_prime(number+i) == 1) {
 3e0:	6e 01       	movw	r12, r28
 3e2:	0d 2e       	mov	r0, r29
 3e4:	00 0c       	add	r0, r0
 3e6:	ee 08       	sbc	r14, r14
 3e8:	ff 08       	sbc	r15, r15
 3ea:	c8 0c       	add	r12, r8
 3ec:	d9 1c       	adc	r13, r9
 3ee:	ea 1c       	adc	r14, r10
 3f0:	fb 1c       	adc	r15, r11
 3f2:	c7 01       	movw	r24, r14
 3f4:	b6 01       	movw	r22, r12
 3f6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <is_prime>
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	79 f7       	brne	.-34     	; 0x3dc <primes+0x2e>
			primeFound = 1;
			writeLong(number+i);
 3fe:	c7 01       	movw	r24, r14
 400:	b6 01       	movw	r22, r12
 402:	0e 94 5d 01 	call	0x2ba	; 0x2ba <writeLong>
			return (number+i);
		}
		i=i+adder; // if number is NOT dividable by two this is better optimized
	}
}
 406:	c7 01       	movw	r24, r14
 408:	b6 01       	movw	r22, r12
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	ff 90       	pop	r15
 414:	ef 90       	pop	r14
 416:	df 90       	pop	r13
 418:	cf 90       	pop	r12
 41a:	bf 90       	pop	r11
 41c:	af 90       	pop	r10
 41e:	9f 90       	pop	r9
 420:	8f 90       	pop	r8
 422:	08 95       	ret

00000424 <toggle>:

int toggle(int state){
	if(state == 0) { // if OFF
 424:	89 2b       	or	r24, r25
 426:	31 f4       	brne	.+12     	; 0x434 <toggle+0x10>
		LCDDR8 = 0x1; // ON
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
		return 1;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	08 95       	ret
	}
	else{			// if ON
		LCDDR8 = 0x0; // OFF
 434:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
		return 0;
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 43c:	08 95       	ret

0000043e <button_init>:

void button_init(void){
	PORTB = (1<<PB7);
 43e:	80 e8       	ldi	r24, 0x80	; 128
 440:	85 b9       	out	0x05, r24	; 5
	DDRB = (1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
 442:	8f e0       	ldi	r24, 0x0F	; 15
 444:	84 b9       	out	0x04, r24	; 4
 446:	08 95       	ret

00000448 <main>:
}

int main(void)
{
	USART1_init();
	LCD_Init();
 448:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Init>
	button_init();
 44c:	0e 94 1f 02 	call	0x43e	; 0x43e <button_init>
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 25000;		// set first prime
	uint8_t cykleState = 0;		
	uint8_t buttonPress = 0;
	timer_init();
 450:	0e 94 52 00 	call	0xa4	; 0xa4 <timer_init>
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 25000;		// set first prime
	uint8_t cykleState = 0;		
	uint8_t buttonPress = 0;
 454:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_Init();
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 25000;		// set first prime
	uint8_t cykleState = 0;		
 456:	c0 e0       	ldi	r28, 0x00	; 0
	USART1_init();
	LCD_Init();
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 25000;		// set first prime
 458:	0f 2e       	mov	r0, r31
 45a:	f8 ea       	ldi	r31, 0xA8	; 168
 45c:	ef 2e       	mov	r14, r31
 45e:	f1 e6       	ldi	r31, 0x61	; 97
 460:	ff 2e       	mov	r15, r31
 462:	f0 2d       	mov	r31, r0
{
	USART1_init();
	LCD_Init();
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
 464:	71 2c       	mov	r7, r1
	uint8_t cykleState = 0;		
	uint8_t buttonPress = 0;
	timer_init();
	nextTimerValue = ((8000000/256)/1);		// calculate the clock time for 1Hz
	while(1){
		while (TCNT1*2 < nextTimerValue)
 466:	04 e8       	ldi	r16, 0x84	; 132
 468:	10 e0       	ldi	r17, 0x00	; 0
		while (TCNT1*2 >= nextTimerValue)
		{
			if (cykleState == 1) {
				state = toggle(state);
				prime = primes(prime);
				cykleState = 0;
 46a:	51 2c       	mov	r5, r1
			}
			if (PINB & (1<<PB7)) {
				buttonPress = 1;
 46c:	99 24       	eor	r9, r9
 46e:	93 94       	inc	r9
			if (buttonPress == 1){
				LCDDR13 = 0x1;
				LCDDR18 = 0x0;
			}
			if (buttonPress == 0){
				LCDDR13 = 0x0;
 470:	0f 2e       	mov	r0, r31
 472:	f9 ef       	ldi	r31, 0xF9	; 249
 474:	af 2e       	mov	r10, r31
 476:	b1 2c       	mov	r11, r1
 478:	f0 2d       	mov	r31, r0
				LCDDR18 = 0x1;
 47a:	0f 2e       	mov	r0, r31
 47c:	fe ef       	ldi	r31, 0xFE	; 254
 47e:	cf 2e       	mov	r12, r31
 480:	d1 2c       	mov	r13, r1
 482:	f0 2d       	mov	r31, r0
 484:	69 2c       	mov	r6, r9
 486:	85 2c       	mov	r8, r5
 488:	20 c0       	rjmp	.+64     	; 0x4ca <main+0x82>
	timer_init();
	nextTimerValue = ((8000000/256)/1);		// calculate the clock time for 1Hz
	while(1){
		while (TCNT1*2 < nextTimerValue)
		{
			if (cykleState == 0) {
 48a:	c1 11       	cpse	r28, r1
 48c:	0c c0       	rjmp	.+24     	; 0x4a6 <main+0x5e>
				state = toggle(state);
 48e:	87 2d       	mov	r24, r7
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 12 02 	call	0x424	; 0x424 <toggle>
 496:	78 2e       	mov	r7, r24
				prime = primes(prime);
 498:	b7 01       	movw	r22, r14
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <primes>
 4a2:	7b 01       	movw	r14, r22
				cykleState = 1;
 4a4:	c9 2d       	mov	r28, r9
			}	
			if (PINB & (1<<PB7)) {
 4a6:	1f 99       	sbic	0x03, 7	; 3
				buttonPress = 1;
 4a8:	d9 2d       	mov	r29, r9
			}
			if (!(PINB & (1<<PB7))) {
 4aa:	1f 9b       	sbis	0x03, 7	; 3
 4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <main+0x78>
				buttonPress = 0;
			}
			if (buttonPress == 1){
 4ae:	d1 30       	cpi	r29, 0x01	; 1
 4b0:	29 f4       	brne	.+10     	; 0x4bc <main+0x74>
				LCDDR13 = 0x1;
 4b2:	f5 01       	movw	r30, r10
 4b4:	90 82       	st	Z, r9
				LCDDR18 = 0x0;
 4b6:	f6 01       	movw	r30, r12
 4b8:	10 82       	st	Z, r1
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <main+0x82>
			}
			if (buttonPress == 0){
 4bc:	d1 11       	cpse	r29, r1
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <main+0x82>
				LCDDR13 = 0x0;
 4c0:	f5 01       	movw	r30, r10
 4c2:	10 82       	st	Z, r1
				LCDDR18 = 0x1;
 4c4:	f6 01       	movw	r30, r12
 4c6:	90 82       	st	Z, r9
 4c8:	d5 2d       	mov	r29, r5
	uint8_t cykleState = 0;		
	uint8_t buttonPress = 0;
	timer_init();
	nextTimerValue = ((8000000/256)/1);		// calculate the clock time for 1Hz
	while(1){
		while (TCNT1*2 < nextTimerValue)
 4ca:	f8 01       	movw	r30, r16
 4cc:	80 81       	ld	r24, Z
 4ce:	91 81       	ldd	r25, Z+1	; 0x01
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	82 31       	cpi	r24, 0x12	; 18
 4d6:	9a 47       	sbci	r25, 0x7A	; 122
 4d8:	c0 f2       	brcs	.-80     	; 0x48a <main+0x42>
			if (buttonPress == 0){
				LCDDR13 = 0x0;
				LCDDR18 = 0x1;
			}
		}
		clearLCD();
 4da:	0e 94 b5 00 	call	0x16a	; 0x16a <clearLCD>
		while (TCNT1*2 >= nextTimerValue)
 4de:	20 c0       	rjmp	.+64     	; 0x520 <__stack+0x21>
		{
			if (cykleState == 1) {
 4e0:	c1 30       	cpi	r28, 0x01	; 1
 4e2:	61 f4       	brne	.+24     	; 0x4fc <main+0xb4>
				state = toggle(state);
 4e4:	87 2d       	mov	r24, r7
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 12 02 	call	0x424	; 0x424 <toggle>
 4ec:	78 2e       	mov	r7, r24
				prime = primes(prime);
 4ee:	b7 01       	movw	r22, r14
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <primes>
 4f8:	7b 01       	movw	r14, r22
				cykleState = 0;
 4fa:	c8 2d       	mov	r28, r8
			}
			if (PINB & (1<<PB7)) {
 4fc:	1f 99       	sbic	0x03, 7	; 3
				buttonPress = 1;
 4fe:	d6 2d       	mov	r29, r6
			}
			if (!(PINB & (1<<PB7))) {
 500:	1f 9b       	sbis	0x03, 7	; 3
 502:	09 c0       	rjmp	.+18     	; 0x516 <__stack+0x17>
				buttonPress = 0;
			}
			if (buttonPress == 1){
 504:	d1 30       	cpi	r29, 0x01	; 1
 506:	29 f4       	brne	.+10     	; 0x512 <__stack+0x13>
				LCDDR13 = 0x1;
 508:	f5 01       	movw	r30, r10
 50a:	90 82       	st	Z, r9
				LCDDR18 = 0x0;
 50c:	f6 01       	movw	r30, r12
 50e:	10 82       	st	Z, r1
 510:	07 c0       	rjmp	.+14     	; 0x520 <__stack+0x21>
			}
			if (buttonPress == 0){
 512:	d1 11       	cpse	r29, r1
 514:	05 c0       	rjmp	.+10     	; 0x520 <__stack+0x21>
				LCDDR13 = 0x0;
 516:	f5 01       	movw	r30, r10
 518:	10 82       	st	Z, r1
				LCDDR18 = 0x1;
 51a:	f6 01       	movw	r30, r12
 51c:	90 82       	st	Z, r9
 51e:	d8 2d       	mov	r29, r8
				LCDDR13 = 0x0;
				LCDDR18 = 0x1;
			}
		}
		clearLCD();
		while (TCNT1*2 >= nextTimerValue)
 520:	f8 01       	movw	r30, r16
 522:	80 81       	ld	r24, Z
 524:	91 81       	ldd	r25, Z+1	; 0x01
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	82 31       	cpi	r24, 0x12	; 18
 52c:	9a 47       	sbci	r25, 0x7A	; 122
 52e:	c0 f6       	brcc	.-80     	; 0x4e0 <main+0x98>
			if (buttonPress == 0){
				LCDDR13 = 0x0;
				LCDDR18 = 0x1;
			}
		}
		clearLCD();
 530:	0e 94 b5 00 	call	0x16a	; 0x16a <clearLCD>
	}
 534:	ca cf       	rjmp	.-108    	; 0x4ca <main+0x82>

00000536 <__divmodsi4>:
 536:	05 2e       	mov	r0, r21
 538:	97 fb       	bst	r25, 7
 53a:	1e f4       	brtc	.+6      	; 0x542 <__divmodsi4+0xc>
 53c:	00 94       	com	r0
 53e:	0e 94 b2 02 	call	0x564	; 0x564 <__negsi2>
 542:	57 fd       	sbrc	r21, 7
 544:	07 d0       	rcall	.+14     	; 0x554 <__divmodsi4_neg2>
 546:	0e 94 ba 02 	call	0x574	; 0x574 <__udivmodsi4>
 54a:	07 fc       	sbrc	r0, 7
 54c:	03 d0       	rcall	.+6      	; 0x554 <__divmodsi4_neg2>
 54e:	4e f4       	brtc	.+18     	; 0x562 <__divmodsi4_exit>
 550:	0c 94 b2 02 	jmp	0x564	; 0x564 <__negsi2>

00000554 <__divmodsi4_neg2>:
 554:	50 95       	com	r21
 556:	40 95       	com	r20
 558:	30 95       	com	r19
 55a:	21 95       	neg	r18
 55c:	3f 4f       	sbci	r19, 0xFF	; 255
 55e:	4f 4f       	sbci	r20, 0xFF	; 255
 560:	5f 4f       	sbci	r21, 0xFF	; 255

00000562 <__divmodsi4_exit>:
 562:	08 95       	ret

00000564 <__negsi2>:
 564:	90 95       	com	r25
 566:	80 95       	com	r24
 568:	70 95       	com	r23
 56a:	61 95       	neg	r22
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	8f 4f       	sbci	r24, 0xFF	; 255
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	08 95       	ret

00000574 <__udivmodsi4>:
 574:	a1 e2       	ldi	r26, 0x21	; 33
 576:	1a 2e       	mov	r1, r26
 578:	aa 1b       	sub	r26, r26
 57a:	bb 1b       	sub	r27, r27
 57c:	fd 01       	movw	r30, r26
 57e:	0d c0       	rjmp	.+26     	; 0x59a <__udivmodsi4_ep>

00000580 <__udivmodsi4_loop>:
 580:	aa 1f       	adc	r26, r26
 582:	bb 1f       	adc	r27, r27
 584:	ee 1f       	adc	r30, r30
 586:	ff 1f       	adc	r31, r31
 588:	a2 17       	cp	r26, r18
 58a:	b3 07       	cpc	r27, r19
 58c:	e4 07       	cpc	r30, r20
 58e:	f5 07       	cpc	r31, r21
 590:	20 f0       	brcs	.+8      	; 0x59a <__udivmodsi4_ep>
 592:	a2 1b       	sub	r26, r18
 594:	b3 0b       	sbc	r27, r19
 596:	e4 0b       	sbc	r30, r20
 598:	f5 0b       	sbc	r31, r21

0000059a <__udivmodsi4_ep>:
 59a:	66 1f       	adc	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	88 1f       	adc	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	1a 94       	dec	r1
 5a4:	69 f7       	brne	.-38     	; 0x580 <__udivmodsi4_loop>
 5a6:	60 95       	com	r22
 5a8:	70 95       	com	r23
 5aa:	80 95       	com	r24
 5ac:	90 95       	com	r25
 5ae:	9b 01       	movw	r18, r22
 5b0:	ac 01       	movw	r20, r24
 5b2:	bd 01       	movw	r22, r26
 5b4:	cf 01       	movw	r24, r30
 5b6:	08 95       	ret

000005b8 <sprintf>:
 5b8:	ae e0       	ldi	r26, 0x0E	; 14
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e2 ee       	ldi	r30, 0xE2	; 226
 5be:	f2 e0       	ldi	r31, 0x02	; 2
 5c0:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__prologue_saves__+0x1c>
 5c4:	0d 89       	ldd	r16, Y+21	; 0x15
 5c6:	1e 89       	ldd	r17, Y+22	; 0x16
 5c8:	86 e0       	ldi	r24, 0x06	; 6
 5ca:	8c 83       	std	Y+4, r24	; 0x04
 5cc:	1a 83       	std	Y+2, r17	; 0x02
 5ce:	09 83       	std	Y+1, r16	; 0x01
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	9f e7       	ldi	r25, 0x7F	; 127
 5d4:	9e 83       	std	Y+6, r25	; 0x06
 5d6:	8d 83       	std	Y+5, r24	; 0x05
 5d8:	ae 01       	movw	r20, r28
 5da:	47 5e       	subi	r20, 0xE7	; 231
 5dc:	5f 4f       	sbci	r21, 0xFF	; 255
 5de:	6f 89       	ldd	r22, Y+23	; 0x17
 5e0:	78 8d       	ldd	r23, Y+24	; 0x18
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <vfprintf>
 5ea:	ef 81       	ldd	r30, Y+7	; 0x07
 5ec:	f8 85       	ldd	r31, Y+8	; 0x08
 5ee:	e0 0f       	add	r30, r16
 5f0:	f1 1f       	adc	r31, r17
 5f2:	10 82       	st	Z, r1
 5f4:	2e 96       	adiw	r28, 0x0e	; 14
 5f6:	e4 e0       	ldi	r30, 0x04	; 4
 5f8:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__epilogue_restores__+0x1c>

000005fc <vfprintf>:
 5fc:	ab e0       	ldi	r26, 0x0B	; 11
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	e4 e0       	ldi	r30, 0x04	; 4
 602:	f3 e0       	ldi	r31, 0x03	; 3
 604:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__prologue_saves__>
 608:	6c 01       	movw	r12, r24
 60a:	7b 01       	movw	r14, r22
 60c:	8a 01       	movw	r16, r20
 60e:	fc 01       	movw	r30, r24
 610:	17 82       	std	Z+7, r1	; 0x07
 612:	16 82       	std	Z+6, r1	; 0x06
 614:	83 81       	ldd	r24, Z+3	; 0x03
 616:	81 ff       	sbrs	r24, 1
 618:	cc c1       	rjmp	.+920    	; 0x9b2 <vfprintf+0x3b6>
 61a:	ce 01       	movw	r24, r28
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	3c 01       	movw	r6, r24
 620:	f6 01       	movw	r30, r12
 622:	93 81       	ldd	r25, Z+3	; 0x03
 624:	f7 01       	movw	r30, r14
 626:	93 fd       	sbrc	r25, 3
 628:	85 91       	lpm	r24, Z+
 62a:	93 ff       	sbrs	r25, 3
 62c:	81 91       	ld	r24, Z+
 62e:	7f 01       	movw	r14, r30
 630:	88 23       	and	r24, r24
 632:	09 f4       	brne	.+2      	; 0x636 <vfprintf+0x3a>
 634:	ba c1       	rjmp	.+884    	; 0x9aa <vfprintf+0x3ae>
 636:	85 32       	cpi	r24, 0x25	; 37
 638:	39 f4       	brne	.+14     	; 0x648 <vfprintf+0x4c>
 63a:	93 fd       	sbrc	r25, 3
 63c:	85 91       	lpm	r24, Z+
 63e:	93 ff       	sbrs	r25, 3
 640:	81 91       	ld	r24, Z+
 642:	7f 01       	movw	r14, r30
 644:	85 32       	cpi	r24, 0x25	; 37
 646:	29 f4       	brne	.+10     	; 0x652 <vfprintf+0x56>
 648:	b6 01       	movw	r22, r12
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 650:	e7 cf       	rjmp	.-50     	; 0x620 <vfprintf+0x24>
 652:	91 2c       	mov	r9, r1
 654:	21 2c       	mov	r2, r1
 656:	31 2c       	mov	r3, r1
 658:	ff e1       	ldi	r31, 0x1F	; 31
 65a:	f3 15       	cp	r31, r3
 65c:	d8 f0       	brcs	.+54     	; 0x694 <vfprintf+0x98>
 65e:	8b 32       	cpi	r24, 0x2B	; 43
 660:	79 f0       	breq	.+30     	; 0x680 <vfprintf+0x84>
 662:	38 f4       	brcc	.+14     	; 0x672 <vfprintf+0x76>
 664:	80 32       	cpi	r24, 0x20	; 32
 666:	79 f0       	breq	.+30     	; 0x686 <vfprintf+0x8a>
 668:	83 32       	cpi	r24, 0x23	; 35
 66a:	a1 f4       	brne	.+40     	; 0x694 <vfprintf+0x98>
 66c:	23 2d       	mov	r18, r3
 66e:	20 61       	ori	r18, 0x10	; 16
 670:	1d c0       	rjmp	.+58     	; 0x6ac <vfprintf+0xb0>
 672:	8d 32       	cpi	r24, 0x2D	; 45
 674:	61 f0       	breq	.+24     	; 0x68e <vfprintf+0x92>
 676:	80 33       	cpi	r24, 0x30	; 48
 678:	69 f4       	brne	.+26     	; 0x694 <vfprintf+0x98>
 67a:	23 2d       	mov	r18, r3
 67c:	21 60       	ori	r18, 0x01	; 1
 67e:	16 c0       	rjmp	.+44     	; 0x6ac <vfprintf+0xb0>
 680:	83 2d       	mov	r24, r3
 682:	82 60       	ori	r24, 0x02	; 2
 684:	38 2e       	mov	r3, r24
 686:	e3 2d       	mov	r30, r3
 688:	e4 60       	ori	r30, 0x04	; 4
 68a:	3e 2e       	mov	r3, r30
 68c:	2a c0       	rjmp	.+84     	; 0x6e2 <vfprintf+0xe6>
 68e:	f3 2d       	mov	r31, r3
 690:	f8 60       	ori	r31, 0x08	; 8
 692:	1d c0       	rjmp	.+58     	; 0x6ce <vfprintf+0xd2>
 694:	37 fc       	sbrc	r3, 7
 696:	2d c0       	rjmp	.+90     	; 0x6f2 <vfprintf+0xf6>
 698:	20 ed       	ldi	r18, 0xD0	; 208
 69a:	28 0f       	add	r18, r24
 69c:	2a 30       	cpi	r18, 0x0A	; 10
 69e:	40 f0       	brcs	.+16     	; 0x6b0 <vfprintf+0xb4>
 6a0:	8e 32       	cpi	r24, 0x2E	; 46
 6a2:	b9 f4       	brne	.+46     	; 0x6d2 <vfprintf+0xd6>
 6a4:	36 fc       	sbrc	r3, 6
 6a6:	81 c1       	rjmp	.+770    	; 0x9aa <vfprintf+0x3ae>
 6a8:	23 2d       	mov	r18, r3
 6aa:	20 64       	ori	r18, 0x40	; 64
 6ac:	32 2e       	mov	r3, r18
 6ae:	19 c0       	rjmp	.+50     	; 0x6e2 <vfprintf+0xe6>
 6b0:	36 fe       	sbrs	r3, 6
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <vfprintf+0xc4>
 6b4:	8a e0       	ldi	r24, 0x0A	; 10
 6b6:	98 9e       	mul	r9, r24
 6b8:	20 0d       	add	r18, r0
 6ba:	11 24       	eor	r1, r1
 6bc:	92 2e       	mov	r9, r18
 6be:	11 c0       	rjmp	.+34     	; 0x6e2 <vfprintf+0xe6>
 6c0:	ea e0       	ldi	r30, 0x0A	; 10
 6c2:	2e 9e       	mul	r2, r30
 6c4:	20 0d       	add	r18, r0
 6c6:	11 24       	eor	r1, r1
 6c8:	22 2e       	mov	r2, r18
 6ca:	f3 2d       	mov	r31, r3
 6cc:	f0 62       	ori	r31, 0x20	; 32
 6ce:	3f 2e       	mov	r3, r31
 6d0:	08 c0       	rjmp	.+16     	; 0x6e2 <vfprintf+0xe6>
 6d2:	8c 36       	cpi	r24, 0x6C	; 108
 6d4:	21 f4       	brne	.+8      	; 0x6de <vfprintf+0xe2>
 6d6:	83 2d       	mov	r24, r3
 6d8:	80 68       	ori	r24, 0x80	; 128
 6da:	38 2e       	mov	r3, r24
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <vfprintf+0xe6>
 6de:	88 36       	cpi	r24, 0x68	; 104
 6e0:	41 f4       	brne	.+16     	; 0x6f2 <vfprintf+0xf6>
 6e2:	f7 01       	movw	r30, r14
 6e4:	93 fd       	sbrc	r25, 3
 6e6:	85 91       	lpm	r24, Z+
 6e8:	93 ff       	sbrs	r25, 3
 6ea:	81 91       	ld	r24, Z+
 6ec:	7f 01       	movw	r14, r30
 6ee:	81 11       	cpse	r24, r1
 6f0:	b3 cf       	rjmp	.-154    	; 0x658 <vfprintf+0x5c>
 6f2:	98 2f       	mov	r25, r24
 6f4:	9f 7d       	andi	r25, 0xDF	; 223
 6f6:	95 54       	subi	r25, 0x45	; 69
 6f8:	93 30       	cpi	r25, 0x03	; 3
 6fa:	28 f4       	brcc	.+10     	; 0x706 <vfprintf+0x10a>
 6fc:	0c 5f       	subi	r16, 0xFC	; 252
 6fe:	1f 4f       	sbci	r17, 0xFF	; 255
 700:	9f e3       	ldi	r25, 0x3F	; 63
 702:	99 83       	std	Y+1, r25	; 0x01
 704:	0d c0       	rjmp	.+26     	; 0x720 <vfprintf+0x124>
 706:	83 36       	cpi	r24, 0x63	; 99
 708:	31 f0       	breq	.+12     	; 0x716 <vfprintf+0x11a>
 70a:	83 37       	cpi	r24, 0x73	; 115
 70c:	71 f0       	breq	.+28     	; 0x72a <vfprintf+0x12e>
 70e:	83 35       	cpi	r24, 0x53	; 83
 710:	09 f0       	breq	.+2      	; 0x714 <vfprintf+0x118>
 712:	59 c0       	rjmp	.+178    	; 0x7c6 <vfprintf+0x1ca>
 714:	21 c0       	rjmp	.+66     	; 0x758 <vfprintf+0x15c>
 716:	f8 01       	movw	r30, r16
 718:	80 81       	ld	r24, Z
 71a:	89 83       	std	Y+1, r24	; 0x01
 71c:	0e 5f       	subi	r16, 0xFE	; 254
 71e:	1f 4f       	sbci	r17, 0xFF	; 255
 720:	88 24       	eor	r8, r8
 722:	83 94       	inc	r8
 724:	91 2c       	mov	r9, r1
 726:	53 01       	movw	r10, r6
 728:	13 c0       	rjmp	.+38     	; 0x750 <vfprintf+0x154>
 72a:	28 01       	movw	r4, r16
 72c:	f2 e0       	ldi	r31, 0x02	; 2
 72e:	4f 0e       	add	r4, r31
 730:	51 1c       	adc	r5, r1
 732:	f8 01       	movw	r30, r16
 734:	a0 80       	ld	r10, Z
 736:	b1 80       	ldd	r11, Z+1	; 0x01
 738:	36 fe       	sbrs	r3, 6
 73a:	03 c0       	rjmp	.+6      	; 0x742 <vfprintf+0x146>
 73c:	69 2d       	mov	r22, r9
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	02 c0       	rjmp	.+4      	; 0x746 <vfprintf+0x14a>
 742:	6f ef       	ldi	r22, 0xFF	; 255
 744:	7f ef       	ldi	r23, 0xFF	; 255
 746:	c5 01       	movw	r24, r10
 748:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <strnlen>
 74c:	4c 01       	movw	r8, r24
 74e:	82 01       	movw	r16, r4
 750:	f3 2d       	mov	r31, r3
 752:	ff 77       	andi	r31, 0x7F	; 127
 754:	3f 2e       	mov	r3, r31
 756:	16 c0       	rjmp	.+44     	; 0x784 <vfprintf+0x188>
 758:	28 01       	movw	r4, r16
 75a:	22 e0       	ldi	r18, 0x02	; 2
 75c:	42 0e       	add	r4, r18
 75e:	51 1c       	adc	r5, r1
 760:	f8 01       	movw	r30, r16
 762:	a0 80       	ld	r10, Z
 764:	b1 80       	ldd	r11, Z+1	; 0x01
 766:	36 fe       	sbrs	r3, 6
 768:	03 c0       	rjmp	.+6      	; 0x770 <vfprintf+0x174>
 76a:	69 2d       	mov	r22, r9
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <vfprintf+0x178>
 770:	6f ef       	ldi	r22, 0xFF	; 255
 772:	7f ef       	ldi	r23, 0xFF	; 255
 774:	c5 01       	movw	r24, r10
 776:	0e 94 df 04 	call	0x9be	; 0x9be <strnlen_P>
 77a:	4c 01       	movw	r8, r24
 77c:	f3 2d       	mov	r31, r3
 77e:	f0 68       	ori	r31, 0x80	; 128
 780:	3f 2e       	mov	r3, r31
 782:	82 01       	movw	r16, r4
 784:	33 fc       	sbrc	r3, 3
 786:	1b c0       	rjmp	.+54     	; 0x7be <vfprintf+0x1c2>
 788:	82 2d       	mov	r24, r2
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	88 16       	cp	r8, r24
 78e:	99 06       	cpc	r9, r25
 790:	b0 f4       	brcc	.+44     	; 0x7be <vfprintf+0x1c2>
 792:	b6 01       	movw	r22, r12
 794:	80 e2       	ldi	r24, 0x20	; 32
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 79c:	2a 94       	dec	r2
 79e:	f4 cf       	rjmp	.-24     	; 0x788 <vfprintf+0x18c>
 7a0:	f5 01       	movw	r30, r10
 7a2:	37 fc       	sbrc	r3, 7
 7a4:	85 91       	lpm	r24, Z+
 7a6:	37 fe       	sbrs	r3, 7
 7a8:	81 91       	ld	r24, Z+
 7aa:	5f 01       	movw	r10, r30
 7ac:	b6 01       	movw	r22, r12
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 7b4:	21 10       	cpse	r2, r1
 7b6:	2a 94       	dec	r2
 7b8:	21 e0       	ldi	r18, 0x01	; 1
 7ba:	82 1a       	sub	r8, r18
 7bc:	91 08       	sbc	r9, r1
 7be:	81 14       	cp	r8, r1
 7c0:	91 04       	cpc	r9, r1
 7c2:	71 f7       	brne	.-36     	; 0x7a0 <vfprintf+0x1a4>
 7c4:	e8 c0       	rjmp	.+464    	; 0x996 <vfprintf+0x39a>
 7c6:	84 36       	cpi	r24, 0x64	; 100
 7c8:	11 f0       	breq	.+4      	; 0x7ce <vfprintf+0x1d2>
 7ca:	89 36       	cpi	r24, 0x69	; 105
 7cc:	41 f5       	brne	.+80     	; 0x81e <vfprintf+0x222>
 7ce:	f8 01       	movw	r30, r16
 7d0:	37 fe       	sbrs	r3, 7
 7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <vfprintf+0x1e6>
 7d4:	60 81       	ld	r22, Z
 7d6:	71 81       	ldd	r23, Z+1	; 0x01
 7d8:	82 81       	ldd	r24, Z+2	; 0x02
 7da:	93 81       	ldd	r25, Z+3	; 0x03
 7dc:	0c 5f       	subi	r16, 0xFC	; 252
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
 7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <vfprintf+0x1f6>
 7e2:	60 81       	ld	r22, Z
 7e4:	71 81       	ldd	r23, Z+1	; 0x01
 7e6:	07 2e       	mov	r0, r23
 7e8:	00 0c       	add	r0, r0
 7ea:	88 0b       	sbc	r24, r24
 7ec:	99 0b       	sbc	r25, r25
 7ee:	0e 5f       	subi	r16, 0xFE	; 254
 7f0:	1f 4f       	sbci	r17, 0xFF	; 255
 7f2:	f3 2d       	mov	r31, r3
 7f4:	ff 76       	andi	r31, 0x6F	; 111
 7f6:	3f 2e       	mov	r3, r31
 7f8:	97 ff       	sbrs	r25, 7
 7fa:	09 c0       	rjmp	.+18     	; 0x80e <vfprintf+0x212>
 7fc:	90 95       	com	r25
 7fe:	80 95       	com	r24
 800:	70 95       	com	r23
 802:	61 95       	neg	r22
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	f0 68       	ori	r31, 0x80	; 128
 80c:	3f 2e       	mov	r3, r31
 80e:	2a e0       	ldi	r18, 0x0A	; 10
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	a3 01       	movw	r20, r6
 814:	0e 94 31 05 	call	0xa62	; 0xa62 <__ultoa_invert>
 818:	88 2e       	mov	r8, r24
 81a:	86 18       	sub	r8, r6
 81c:	45 c0       	rjmp	.+138    	; 0x8a8 <vfprintf+0x2ac>
 81e:	85 37       	cpi	r24, 0x75	; 117
 820:	31 f4       	brne	.+12     	; 0x82e <vfprintf+0x232>
 822:	23 2d       	mov	r18, r3
 824:	2f 7e       	andi	r18, 0xEF	; 239
 826:	b2 2e       	mov	r11, r18
 828:	2a e0       	ldi	r18, 0x0A	; 10
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	25 c0       	rjmp	.+74     	; 0x878 <vfprintf+0x27c>
 82e:	93 2d       	mov	r25, r3
 830:	99 7f       	andi	r25, 0xF9	; 249
 832:	b9 2e       	mov	r11, r25
 834:	8f 36       	cpi	r24, 0x6F	; 111
 836:	c1 f0       	breq	.+48     	; 0x868 <vfprintf+0x26c>
 838:	18 f4       	brcc	.+6      	; 0x840 <vfprintf+0x244>
 83a:	88 35       	cpi	r24, 0x58	; 88
 83c:	79 f0       	breq	.+30     	; 0x85c <vfprintf+0x260>
 83e:	b5 c0       	rjmp	.+362    	; 0x9aa <vfprintf+0x3ae>
 840:	80 37       	cpi	r24, 0x70	; 112
 842:	19 f0       	breq	.+6      	; 0x84a <vfprintf+0x24e>
 844:	88 37       	cpi	r24, 0x78	; 120
 846:	21 f0       	breq	.+8      	; 0x850 <vfprintf+0x254>
 848:	b0 c0       	rjmp	.+352    	; 0x9aa <vfprintf+0x3ae>
 84a:	e9 2f       	mov	r30, r25
 84c:	e0 61       	ori	r30, 0x10	; 16
 84e:	be 2e       	mov	r11, r30
 850:	b4 fe       	sbrs	r11, 4
 852:	0d c0       	rjmp	.+26     	; 0x86e <vfprintf+0x272>
 854:	fb 2d       	mov	r31, r11
 856:	f4 60       	ori	r31, 0x04	; 4
 858:	bf 2e       	mov	r11, r31
 85a:	09 c0       	rjmp	.+18     	; 0x86e <vfprintf+0x272>
 85c:	34 fe       	sbrs	r3, 4
 85e:	0a c0       	rjmp	.+20     	; 0x874 <vfprintf+0x278>
 860:	29 2f       	mov	r18, r25
 862:	26 60       	ori	r18, 0x06	; 6
 864:	b2 2e       	mov	r11, r18
 866:	06 c0       	rjmp	.+12     	; 0x874 <vfprintf+0x278>
 868:	28 e0       	ldi	r18, 0x08	; 8
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	05 c0       	rjmp	.+10     	; 0x878 <vfprintf+0x27c>
 86e:	20 e1       	ldi	r18, 0x10	; 16
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <vfprintf+0x27c>
 874:	20 e1       	ldi	r18, 0x10	; 16
 876:	32 e0       	ldi	r19, 0x02	; 2
 878:	f8 01       	movw	r30, r16
 87a:	b7 fe       	sbrs	r11, 7
 87c:	07 c0       	rjmp	.+14     	; 0x88c <vfprintf+0x290>
 87e:	60 81       	ld	r22, Z
 880:	71 81       	ldd	r23, Z+1	; 0x01
 882:	82 81       	ldd	r24, Z+2	; 0x02
 884:	93 81       	ldd	r25, Z+3	; 0x03
 886:	0c 5f       	subi	r16, 0xFC	; 252
 888:	1f 4f       	sbci	r17, 0xFF	; 255
 88a:	06 c0       	rjmp	.+12     	; 0x898 <vfprintf+0x29c>
 88c:	60 81       	ld	r22, Z
 88e:	71 81       	ldd	r23, Z+1	; 0x01
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 5f       	subi	r16, 0xFE	; 254
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	a3 01       	movw	r20, r6
 89a:	0e 94 31 05 	call	0xa62	; 0xa62 <__ultoa_invert>
 89e:	88 2e       	mov	r8, r24
 8a0:	86 18       	sub	r8, r6
 8a2:	fb 2d       	mov	r31, r11
 8a4:	ff 77       	andi	r31, 0x7F	; 127
 8a6:	3f 2e       	mov	r3, r31
 8a8:	36 fe       	sbrs	r3, 6
 8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <vfprintf+0x2ca>
 8ac:	23 2d       	mov	r18, r3
 8ae:	2e 7f       	andi	r18, 0xFE	; 254
 8b0:	a2 2e       	mov	r10, r18
 8b2:	89 14       	cp	r8, r9
 8b4:	58 f4       	brcc	.+22     	; 0x8cc <vfprintf+0x2d0>
 8b6:	34 fe       	sbrs	r3, 4
 8b8:	0b c0       	rjmp	.+22     	; 0x8d0 <vfprintf+0x2d4>
 8ba:	32 fc       	sbrc	r3, 2
 8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <vfprintf+0x2d4>
 8be:	83 2d       	mov	r24, r3
 8c0:	8e 7e       	andi	r24, 0xEE	; 238
 8c2:	a8 2e       	mov	r10, r24
 8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <vfprintf+0x2d4>
 8c6:	b8 2c       	mov	r11, r8
 8c8:	a3 2c       	mov	r10, r3
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <vfprintf+0x2d6>
 8cc:	b8 2c       	mov	r11, r8
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <vfprintf+0x2d6>
 8d0:	b9 2c       	mov	r11, r9
 8d2:	a4 fe       	sbrs	r10, 4
 8d4:	0f c0       	rjmp	.+30     	; 0x8f4 <vfprintf+0x2f8>
 8d6:	fe 01       	movw	r30, r28
 8d8:	e8 0d       	add	r30, r8
 8da:	f1 1d       	adc	r31, r1
 8dc:	80 81       	ld	r24, Z
 8de:	80 33       	cpi	r24, 0x30	; 48
 8e0:	21 f4       	brne	.+8      	; 0x8ea <vfprintf+0x2ee>
 8e2:	9a 2d       	mov	r25, r10
 8e4:	99 7e       	andi	r25, 0xE9	; 233
 8e6:	a9 2e       	mov	r10, r25
 8e8:	09 c0       	rjmp	.+18     	; 0x8fc <vfprintf+0x300>
 8ea:	a2 fe       	sbrs	r10, 2
 8ec:	06 c0       	rjmp	.+12     	; 0x8fa <vfprintf+0x2fe>
 8ee:	b3 94       	inc	r11
 8f0:	b3 94       	inc	r11
 8f2:	04 c0       	rjmp	.+8      	; 0x8fc <vfprintf+0x300>
 8f4:	8a 2d       	mov	r24, r10
 8f6:	86 78       	andi	r24, 0x86	; 134
 8f8:	09 f0       	breq	.+2      	; 0x8fc <vfprintf+0x300>
 8fa:	b3 94       	inc	r11
 8fc:	a3 fc       	sbrc	r10, 3
 8fe:	11 c0       	rjmp	.+34     	; 0x922 <vfprintf+0x326>
 900:	a0 fe       	sbrs	r10, 0
 902:	06 c0       	rjmp	.+12     	; 0x910 <vfprintf+0x314>
 904:	b2 14       	cp	r11, r2
 906:	88 f4       	brcc	.+34     	; 0x92a <vfprintf+0x32e>
 908:	28 0c       	add	r2, r8
 90a:	92 2c       	mov	r9, r2
 90c:	9b 18       	sub	r9, r11
 90e:	0e c0       	rjmp	.+28     	; 0x92c <vfprintf+0x330>
 910:	b2 14       	cp	r11, r2
 912:	60 f4       	brcc	.+24     	; 0x92c <vfprintf+0x330>
 914:	b6 01       	movw	r22, r12
 916:	80 e2       	ldi	r24, 0x20	; 32
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 91e:	b3 94       	inc	r11
 920:	f7 cf       	rjmp	.-18     	; 0x910 <vfprintf+0x314>
 922:	b2 14       	cp	r11, r2
 924:	18 f4       	brcc	.+6      	; 0x92c <vfprintf+0x330>
 926:	2b 18       	sub	r2, r11
 928:	02 c0       	rjmp	.+4      	; 0x92e <vfprintf+0x332>
 92a:	98 2c       	mov	r9, r8
 92c:	21 2c       	mov	r2, r1
 92e:	a4 fe       	sbrs	r10, 4
 930:	10 c0       	rjmp	.+32     	; 0x952 <vfprintf+0x356>
 932:	b6 01       	movw	r22, r12
 934:	80 e3       	ldi	r24, 0x30	; 48
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 93c:	a2 fe       	sbrs	r10, 2
 93e:	17 c0       	rjmp	.+46     	; 0x96e <vfprintf+0x372>
 940:	a1 fc       	sbrc	r10, 1
 942:	03 c0       	rjmp	.+6      	; 0x94a <vfprintf+0x34e>
 944:	88 e7       	ldi	r24, 0x78	; 120
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	02 c0       	rjmp	.+4      	; 0x94e <vfprintf+0x352>
 94a:	88 e5       	ldi	r24, 0x58	; 88
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	b6 01       	movw	r22, r12
 950:	0c c0       	rjmp	.+24     	; 0x96a <vfprintf+0x36e>
 952:	8a 2d       	mov	r24, r10
 954:	86 78       	andi	r24, 0x86	; 134
 956:	59 f0       	breq	.+22     	; 0x96e <vfprintf+0x372>
 958:	a1 fe       	sbrs	r10, 1
 95a:	02 c0       	rjmp	.+4      	; 0x960 <vfprintf+0x364>
 95c:	8b e2       	ldi	r24, 0x2B	; 43
 95e:	01 c0       	rjmp	.+2      	; 0x962 <vfprintf+0x366>
 960:	80 e2       	ldi	r24, 0x20	; 32
 962:	a7 fc       	sbrc	r10, 7
 964:	8d e2       	ldi	r24, 0x2D	; 45
 966:	b6 01       	movw	r22, r12
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 96e:	89 14       	cp	r8, r9
 970:	38 f4       	brcc	.+14     	; 0x980 <vfprintf+0x384>
 972:	b6 01       	movw	r22, r12
 974:	80 e3       	ldi	r24, 0x30	; 48
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 97c:	9a 94       	dec	r9
 97e:	f7 cf       	rjmp	.-18     	; 0x96e <vfprintf+0x372>
 980:	8a 94       	dec	r8
 982:	f3 01       	movw	r30, r6
 984:	e8 0d       	add	r30, r8
 986:	f1 1d       	adc	r31, r1
 988:	80 81       	ld	r24, Z
 98a:	b6 01       	movw	r22, r12
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 992:	81 10       	cpse	r8, r1
 994:	f5 cf       	rjmp	.-22     	; 0x980 <vfprintf+0x384>
 996:	22 20       	and	r2, r2
 998:	09 f4       	brne	.+2      	; 0x99c <vfprintf+0x3a0>
 99a:	42 ce       	rjmp	.-892    	; 0x620 <vfprintf+0x24>
 99c:	b6 01       	movw	r22, r12
 99e:	80 e2       	ldi	r24, 0x20	; 32
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fputc>
 9a6:	2a 94       	dec	r2
 9a8:	f6 cf       	rjmp	.-20     	; 0x996 <vfprintf+0x39a>
 9aa:	f6 01       	movw	r30, r12
 9ac:	86 81       	ldd	r24, Z+6	; 0x06
 9ae:	97 81       	ldd	r25, Z+7	; 0x07
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <vfprintf+0x3ba>
 9b2:	8f ef       	ldi	r24, 0xFF	; 255
 9b4:	9f ef       	ldi	r25, 0xFF	; 255
 9b6:	2b 96       	adiw	r28, 0x0b	; 11
 9b8:	e2 e1       	ldi	r30, 0x12	; 18
 9ba:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__epilogue_restores__>

000009be <strnlen_P>:
 9be:	fc 01       	movw	r30, r24
 9c0:	05 90       	lpm	r0, Z+
 9c2:	61 50       	subi	r22, 0x01	; 1
 9c4:	70 40       	sbci	r23, 0x00	; 0
 9c6:	01 10       	cpse	r0, r1
 9c8:	d8 f7       	brcc	.-10     	; 0x9c0 <strnlen_P+0x2>
 9ca:	80 95       	com	r24
 9cc:	90 95       	com	r25
 9ce:	8e 0f       	add	r24, r30
 9d0:	9f 1f       	adc	r25, r31
 9d2:	08 95       	ret

000009d4 <strnlen>:
 9d4:	fc 01       	movw	r30, r24
 9d6:	61 50       	subi	r22, 0x01	; 1
 9d8:	70 40       	sbci	r23, 0x00	; 0
 9da:	01 90       	ld	r0, Z+
 9dc:	01 10       	cpse	r0, r1
 9de:	d8 f7       	brcc	.-10     	; 0x9d6 <strnlen+0x2>
 9e0:	80 95       	com	r24
 9e2:	90 95       	com	r25
 9e4:	8e 0f       	add	r24, r30
 9e6:	9f 1f       	adc	r25, r31
 9e8:	08 95       	ret

000009ea <fputc>:
 9ea:	0f 93       	push	r16
 9ec:	1f 93       	push	r17
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	fb 01       	movw	r30, r22
 9f4:	23 81       	ldd	r18, Z+3	; 0x03
 9f6:	21 fd       	sbrc	r18, 1
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <fputc+0x16>
 9fa:	8f ef       	ldi	r24, 0xFF	; 255
 9fc:	9f ef       	ldi	r25, 0xFF	; 255
 9fe:	2c c0       	rjmp	.+88     	; 0xa58 <fputc+0x6e>
 a00:	22 ff       	sbrs	r18, 2
 a02:	16 c0       	rjmp	.+44     	; 0xa30 <fputc+0x46>
 a04:	46 81       	ldd	r20, Z+6	; 0x06
 a06:	57 81       	ldd	r21, Z+7	; 0x07
 a08:	24 81       	ldd	r18, Z+4	; 0x04
 a0a:	35 81       	ldd	r19, Z+5	; 0x05
 a0c:	42 17       	cp	r20, r18
 a0e:	53 07       	cpc	r21, r19
 a10:	44 f4       	brge	.+16     	; 0xa22 <fputc+0x38>
 a12:	a0 81       	ld	r26, Z
 a14:	b1 81       	ldd	r27, Z+1	; 0x01
 a16:	9d 01       	movw	r18, r26
 a18:	2f 5f       	subi	r18, 0xFF	; 255
 a1a:	3f 4f       	sbci	r19, 0xFF	; 255
 a1c:	31 83       	std	Z+1, r19	; 0x01
 a1e:	20 83       	st	Z, r18
 a20:	8c 93       	st	X, r24
 a22:	26 81       	ldd	r18, Z+6	; 0x06
 a24:	37 81       	ldd	r19, Z+7	; 0x07
 a26:	2f 5f       	subi	r18, 0xFF	; 255
 a28:	3f 4f       	sbci	r19, 0xFF	; 255
 a2a:	37 83       	std	Z+7, r19	; 0x07
 a2c:	26 83       	std	Z+6, r18	; 0x06
 a2e:	14 c0       	rjmp	.+40     	; 0xa58 <fputc+0x6e>
 a30:	8b 01       	movw	r16, r22
 a32:	ec 01       	movw	r28, r24
 a34:	fb 01       	movw	r30, r22
 a36:	00 84       	ldd	r0, Z+8	; 0x08
 a38:	f1 85       	ldd	r31, Z+9	; 0x09
 a3a:	e0 2d       	mov	r30, r0
 a3c:	09 95       	icall
 a3e:	89 2b       	or	r24, r25
 a40:	e1 f6       	brne	.-72     	; 0x9fa <fputc+0x10>
 a42:	d8 01       	movw	r26, r16
 a44:	16 96       	adiw	r26, 0x06	; 6
 a46:	8d 91       	ld	r24, X+
 a48:	9c 91       	ld	r25, X
 a4a:	17 97       	sbiw	r26, 0x07	; 7
 a4c:	01 96       	adiw	r24, 0x01	; 1
 a4e:	17 96       	adiw	r26, 0x07	; 7
 a50:	9c 93       	st	X, r25
 a52:	8e 93       	st	-X, r24
 a54:	16 97       	sbiw	r26, 0x06	; 6
 a56:	ce 01       	movw	r24, r28
 a58:	df 91       	pop	r29
 a5a:	cf 91       	pop	r28
 a5c:	1f 91       	pop	r17
 a5e:	0f 91       	pop	r16
 a60:	08 95       	ret

00000a62 <__ultoa_invert>:
 a62:	fa 01       	movw	r30, r20
 a64:	aa 27       	eor	r26, r26
 a66:	28 30       	cpi	r18, 0x08	; 8
 a68:	51 f1       	breq	.+84     	; 0xabe <__ultoa_invert+0x5c>
 a6a:	20 31       	cpi	r18, 0x10	; 16
 a6c:	81 f1       	breq	.+96     	; 0xace <__ultoa_invert+0x6c>
 a6e:	e8 94       	clt
 a70:	6f 93       	push	r22
 a72:	6e 7f       	andi	r22, 0xFE	; 254
 a74:	6e 5f       	subi	r22, 0xFE	; 254
 a76:	7f 4f       	sbci	r23, 0xFF	; 255
 a78:	8f 4f       	sbci	r24, 0xFF	; 255
 a7a:	9f 4f       	sbci	r25, 0xFF	; 255
 a7c:	af 4f       	sbci	r26, 0xFF	; 255
 a7e:	b1 e0       	ldi	r27, 0x01	; 1
 a80:	3e d0       	rcall	.+124    	; 0xafe <__ultoa_invert+0x9c>
 a82:	b4 e0       	ldi	r27, 0x04	; 4
 a84:	3c d0       	rcall	.+120    	; 0xafe <__ultoa_invert+0x9c>
 a86:	67 0f       	add	r22, r23
 a88:	78 1f       	adc	r23, r24
 a8a:	89 1f       	adc	r24, r25
 a8c:	9a 1f       	adc	r25, r26
 a8e:	a1 1d       	adc	r26, r1
 a90:	68 0f       	add	r22, r24
 a92:	79 1f       	adc	r23, r25
 a94:	8a 1f       	adc	r24, r26
 a96:	91 1d       	adc	r25, r1
 a98:	a1 1d       	adc	r26, r1
 a9a:	6a 0f       	add	r22, r26
 a9c:	71 1d       	adc	r23, r1
 a9e:	81 1d       	adc	r24, r1
 aa0:	91 1d       	adc	r25, r1
 aa2:	a1 1d       	adc	r26, r1
 aa4:	20 d0       	rcall	.+64     	; 0xae6 <__ultoa_invert+0x84>
 aa6:	09 f4       	brne	.+2      	; 0xaaa <__ultoa_invert+0x48>
 aa8:	68 94       	set
 aaa:	3f 91       	pop	r19
 aac:	2a e0       	ldi	r18, 0x0A	; 10
 aae:	26 9f       	mul	r18, r22
 ab0:	11 24       	eor	r1, r1
 ab2:	30 19       	sub	r19, r0
 ab4:	30 5d       	subi	r19, 0xD0	; 208
 ab6:	31 93       	st	Z+, r19
 ab8:	de f6       	brtc	.-74     	; 0xa70 <__ultoa_invert+0xe>
 aba:	cf 01       	movw	r24, r30
 abc:	08 95       	ret
 abe:	46 2f       	mov	r20, r22
 ac0:	47 70       	andi	r20, 0x07	; 7
 ac2:	40 5d       	subi	r20, 0xD0	; 208
 ac4:	41 93       	st	Z+, r20
 ac6:	b3 e0       	ldi	r27, 0x03	; 3
 ac8:	0f d0       	rcall	.+30     	; 0xae8 <__ultoa_invert+0x86>
 aca:	c9 f7       	brne	.-14     	; 0xabe <__ultoa_invert+0x5c>
 acc:	f6 cf       	rjmp	.-20     	; 0xaba <__ultoa_invert+0x58>
 ace:	46 2f       	mov	r20, r22
 ad0:	4f 70       	andi	r20, 0x0F	; 15
 ad2:	40 5d       	subi	r20, 0xD0	; 208
 ad4:	4a 33       	cpi	r20, 0x3A	; 58
 ad6:	18 f0       	brcs	.+6      	; 0xade <__ultoa_invert+0x7c>
 ad8:	49 5d       	subi	r20, 0xD9	; 217
 ada:	31 fd       	sbrc	r19, 1
 adc:	40 52       	subi	r20, 0x20	; 32
 ade:	41 93       	st	Z+, r20
 ae0:	02 d0       	rcall	.+4      	; 0xae6 <__ultoa_invert+0x84>
 ae2:	a9 f7       	brne	.-22     	; 0xace <__ultoa_invert+0x6c>
 ae4:	ea cf       	rjmp	.-44     	; 0xaba <__ultoa_invert+0x58>
 ae6:	b4 e0       	ldi	r27, 0x04	; 4
 ae8:	a6 95       	lsr	r26
 aea:	97 95       	ror	r25
 aec:	87 95       	ror	r24
 aee:	77 95       	ror	r23
 af0:	67 95       	ror	r22
 af2:	ba 95       	dec	r27
 af4:	c9 f7       	brne	.-14     	; 0xae8 <__ultoa_invert+0x86>
 af6:	00 97       	sbiw	r24, 0x00	; 0
 af8:	61 05       	cpc	r22, r1
 afa:	71 05       	cpc	r23, r1
 afc:	08 95       	ret
 afe:	9b 01       	movw	r18, r22
 b00:	ac 01       	movw	r20, r24
 b02:	0a 2e       	mov	r0, r26
 b04:	06 94       	lsr	r0
 b06:	57 95       	ror	r21
 b08:	47 95       	ror	r20
 b0a:	37 95       	ror	r19
 b0c:	27 95       	ror	r18
 b0e:	ba 95       	dec	r27
 b10:	c9 f7       	brne	.-14     	; 0xb04 <__ultoa_invert+0xa2>
 b12:	62 0f       	add	r22, r18
 b14:	73 1f       	adc	r23, r19
 b16:	84 1f       	adc	r24, r20
 b18:	95 1f       	adc	r25, r21
 b1a:	a0 1d       	adc	r26, r0
 b1c:	08 95       	ret

00000b1e <__prologue_saves__>:
 b1e:	2f 92       	push	r2
 b20:	3f 92       	push	r3
 b22:	4f 92       	push	r4
 b24:	5f 92       	push	r5
 b26:	6f 92       	push	r6
 b28:	7f 92       	push	r7
 b2a:	8f 92       	push	r8
 b2c:	9f 92       	push	r9
 b2e:	af 92       	push	r10
 b30:	bf 92       	push	r11
 b32:	cf 92       	push	r12
 b34:	df 92       	push	r13
 b36:	ef 92       	push	r14
 b38:	ff 92       	push	r15
 b3a:	0f 93       	push	r16
 b3c:	1f 93       	push	r17
 b3e:	cf 93       	push	r28
 b40:	df 93       	push	r29
 b42:	cd b7       	in	r28, 0x3d	; 61
 b44:	de b7       	in	r29, 0x3e	; 62
 b46:	ca 1b       	sub	r28, r26
 b48:	db 0b       	sbc	r29, r27
 b4a:	0f b6       	in	r0, 0x3f	; 63
 b4c:	f8 94       	cli
 b4e:	de bf       	out	0x3e, r29	; 62
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	cd bf       	out	0x3d, r28	; 61
 b54:	09 94       	ijmp

00000b56 <__epilogue_restores__>:
 b56:	2a 88       	ldd	r2, Y+18	; 0x12
 b58:	39 88       	ldd	r3, Y+17	; 0x11
 b5a:	48 88       	ldd	r4, Y+16	; 0x10
 b5c:	5f 84       	ldd	r5, Y+15	; 0x0f
 b5e:	6e 84       	ldd	r6, Y+14	; 0x0e
 b60:	7d 84       	ldd	r7, Y+13	; 0x0d
 b62:	8c 84       	ldd	r8, Y+12	; 0x0c
 b64:	9b 84       	ldd	r9, Y+11	; 0x0b
 b66:	aa 84       	ldd	r10, Y+10	; 0x0a
 b68:	b9 84       	ldd	r11, Y+9	; 0x09
 b6a:	c8 84       	ldd	r12, Y+8	; 0x08
 b6c:	df 80       	ldd	r13, Y+7	; 0x07
 b6e:	ee 80       	ldd	r14, Y+6	; 0x06
 b70:	fd 80       	ldd	r15, Y+5	; 0x05
 b72:	0c 81       	ldd	r16, Y+4	; 0x04
 b74:	1b 81       	ldd	r17, Y+3	; 0x03
 b76:	aa 81       	ldd	r26, Y+2	; 0x02
 b78:	b9 81       	ldd	r27, Y+1	; 0x01
 b7a:	ce 0f       	add	r28, r30
 b7c:	d1 1d       	adc	r29, r1
 b7e:	0f b6       	in	r0, 0x3f	; 63
 b80:	f8 94       	cli
 b82:	de bf       	out	0x3e, r29	; 62
 b84:	0f be       	out	0x3f, r0	; 63
 b86:	cd bf       	out	0x3d, r28	; 61
 b88:	ed 01       	movw	r28, r26
 b8a:	08 95       	ret

00000b8c <_exit>:
 b8c:	f8 94       	cli

00000b8e <__stop_program>:
 b8e:	ff cf       	rjmp	.-2      	; 0xb8e <__stop_program>
