
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000b78  00000bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c60  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c78  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094f  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000560  00000000  00000000  000022df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  00002840  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050b  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000864  00000000  00000000  00002f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003773  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 e7       	ldi	r30, 0x78	; 120
  70:	fb e0       	ldi	r31, 0x0B	; 11
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 19 02 	call	0x432	; 0x432 <main>
  82:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <LCD_Init>:
}

void LCD_Init(void)
{

	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0) |(1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  8a:	87 eb       	ldi	r24, 0xB7	; 183
  8c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

	LCDFRR = (0<<LCDPS2) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  90:	87 e0       	ldi	r24, 0x07	; 7
  92:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	LCDCRA =  (1<<LCDEN); // LCDCRA |= 0x80 ----> ENABLE DISPLAY!
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  a2:	08 95       	ret

000000a4 <timer_init>:
}

void timer_init(void){
	PORTA |= (1<<LCDEN); // this represent the LED portA as output
  a4:	17 9a       	sbi	0x02, 7	; 2
	TCCR1B = (1<<CS12); //pre-scaling factor to (1<<CS12) | (1<<CS10) ---> 1024mHz
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
  ac:	08 95       	ret

000000ae <writeChar>:
	0x1f51, //8
	0x1b51 //9
};

void writeChar(char ch, uint8_t pos)
{   if (!(ch >= 48 && ch<=57))
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	28 97       	sbiw	r28, 0x08	; 8
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	90 ed       	ldi	r25, 0xD0	; 208
  c4:	98 0f       	add	r25, r24
  c6:	9a 30       	cpi	r25, 0x0A	; 10
  c8:	08 f0       	brcs	.+2      	; 0xcc <writeChar+0x1e>
  ca:	46 c0       	rjmp	.+140    	; 0x158 <writeChar+0xaa>
		uint8_t nibbles[4];
		uint16_t fontValue;
	volatile uint8_t *ptr; } regz;
	regz registers;
	
	registers.fontValue=sourceCodeCharacter[9-(57-ch)], registers.ptr=(uint8_t*)0xEC + pos/2;
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	e0 56       	subi	r30, 0x60	; 96
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 81       	ld	r24, Z
  da:	91 81       	ldd	r25, Z+1	; 0x01
  dc:	9e 83       	std	Y+6, r25	; 0x06
  de:	8d 83       	std	Y+5, r24	; 0x05
  e0:	86 2f       	mov	r24, r22
  e2:	86 95       	lsr	r24
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	84 51       	subi	r24, 0x14	; 20
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	98 87       	std	Y+8, r25	; 0x08
  ec:	8f 83       	std	Y+7, r24	; 0x07
  ee:	fe 01       	movw	r30, r28
  f0:	31 96       	adiw	r30, 0x01	; 1
  f2:	9e 01       	movw	r18, r28
  f4:	2b 5f       	subi	r18, 0xFB	; 251
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i=0; i< 4; i++){
		*(registers.nibbles+i) = registers.fontValue & 0xf, registers.fontValue >>=4;
		if(!(pos%2)) { *registers.ptr &= ~(0xf), *registers.ptr |= *(registers.nibbles+i); }
  f8:	61 70       	andi	r22, 0x01	; 1
	volatile uint8_t *ptr; } regz;
	regz registers;
	
	registers.fontValue=sourceCodeCharacter[9-(57-ch)], registers.ptr=(uint8_t*)0xEC + pos/2;
	for(uint8_t i=0; i< 4; i++){
		*(registers.nibbles+i) = registers.fontValue & 0xf, registers.fontValue >>=4;
  fa:	8d 81       	ldd	r24, Y+5	; 0x05
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	80 83       	st	Z, r24
 100:	8d 81       	ldd	r24, Y+5	; 0x05
 102:	9e 81       	ldd	r25, Y+6	; 0x06
 104:	92 95       	swap	r25
 106:	82 95       	swap	r24
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	89 27       	eor	r24, r25
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	89 27       	eor	r24, r25
 110:	9e 83       	std	Y+6, r25	; 0x06
 112:	8d 83       	std	Y+5, r24	; 0x05
		if(!(pos%2)) { *registers.ptr &= ~(0xf), *registers.ptr |= *(registers.nibbles+i); }
 114:	61 11       	cpse	r22, r1
 116:	0a c0       	rjmp	.+20     	; 0x12c <writeChar+0x7e>
 118:	af 81       	ldd	r26, Y+7	; 0x07
 11a:	b8 85       	ldd	r27, Y+8	; 0x08
 11c:	8c 91       	ld	r24, X
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	8c 93       	st	X, r24
 122:	9c 91       	ld	r25, X
 124:	80 81       	ld	r24, Z
 126:	89 2b       	or	r24, r25
 128:	8c 93       	st	X, r24
 12a:	0d c0       	rjmp	.+26     	; 0x146 <writeChar+0x98>
		else{ *registers.ptr &= ~(0xf0), *registers.ptr |= (*(registers.nibbles+i) << 4); }
 12c:	af 81       	ldd	r26, Y+7	; 0x07
 12e:	b8 85       	ldd	r27, Y+8	; 0x08
 130:	8c 91       	ld	r24, X
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	8c 93       	st	X, r24
 136:	4c 91       	ld	r20, X
 138:	90 81       	ld	r25, Z
 13a:	50 e1       	ldi	r21, 0x10	; 16
 13c:	95 9f       	mul	r25, r21
 13e:	c0 01       	movw	r24, r0
 140:	11 24       	eor	r1, r1
 142:	84 2b       	or	r24, r20
 144:	8c 93       	st	X, r24
		registers.ptr+=5;
 146:	8f 81       	ldd	r24, Y+7	; 0x07
 148:	98 85       	ldd	r25, Y+8	; 0x08
 14a:	05 96       	adiw	r24, 0x05	; 5
 14c:	98 87       	std	Y+8, r25	; 0x08
 14e:	8f 83       	std	Y+7, r24	; 0x07
 150:	31 96       	adiw	r30, 0x01	; 1
		uint16_t fontValue;
	volatile uint8_t *ptr; } regz;
	regz registers;
	
	registers.fontValue=sourceCodeCharacter[9-(57-ch)], registers.ptr=(uint8_t*)0xEC + pos/2;
	for(uint8_t i=0; i< 4; i++){
 152:	e2 17       	cp	r30, r18
 154:	f3 07       	cpc	r31, r19
 156:	89 f6       	brne	.-94     	; 0xfa <writeChar+0x4c>
		*(registers.nibbles+i) = registers.fontValue & 0xf, registers.fontValue >>=4;
		if(!(pos%2)) { *registers.ptr &= ~(0xf), *registers.ptr |= *(registers.nibbles+i); }
		else{ *registers.ptr &= ~(0xf0), *registers.ptr |= (*(registers.nibbles+i) << 4); }
		registers.ptr+=5;
	}
} // struct
 158:	28 96       	adiw	r28, 0x08	; 8
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <clearLCD>:

void clearLCD(void){
	LCDDR0 =0x0;
 16a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	LCDDR5=0x0;
 16e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	LCDDR10=0x0;
 172:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
	LCDDR15=0x0;
 176:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>

	LCDDR1=0x0;
 17a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
	LCDDR6=0x0;
 17e:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
	LCDDR11=0x0;
 182:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
	LCDDR16=0x0;
 186:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
	
	LCDDR2 =0x0;
 18a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
	LCDDR7=0x0;
 18e:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
	LCDDR12=0x0;
 192:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
	LCDDR17=0x0;
 196:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>

	LCDDR3=0x0;
 19a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
	LCDDR8=0x0;
 19e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
	LCDDR13=0x0;
 1a2:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
	LCDDR18=0x0;
 1a6:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
 1aa:	08 95       	ret

000001ac <is_prime>:
	char str[size_needed];
	sprintf(str, "%ld", i);
	output(str, size_needed-1);
}

int is_prime(long i){
 1ac:	8f 92       	push	r8
 1ae:	9f 92       	push	r9
 1b0:	af 92       	push	r10
 1b2:	bf 92       	push	r11
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	6b 01       	movw	r12, r22
 1c2:	7c 01       	movw	r14, r24
	int c;
	for (c = 2; c <= i - 1; c++)
 1c4:	4b 01       	movw	r8, r22
 1c6:	5c 01       	movw	r10, r24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	88 1a       	sub	r8, r24
 1cc:	91 08       	sbc	r9, r1
 1ce:	a1 08       	sbc	r10, r1
 1d0:	b1 08       	sbc	r11, r1
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	88 16       	cp	r8, r24
 1d6:	91 04       	cpc	r9, r1
 1d8:	a1 04       	cpc	r10, r1
 1da:	b1 04       	cpc	r11, r1
 1dc:	6c f1       	brlt	.+90     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
	{
		if (i%c == 0)
 1de:	d7 01       	movw	r26, r14
 1e0:	c6 01       	movw	r24, r12
 1e2:	81 70       	andi	r24, 0x01	; 1
 1e4:	99 27       	eor	r25, r25
 1e6:	aa 27       	eor	r26, r26
 1e8:	b0 78       	andi	r27, 0x80	; 128
 1ea:	bb 23       	and	r27, r27
 1ec:	54 f4       	brge	.+20     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	a1 09       	sbc	r26, r1
 1f2:	b1 09       	sbc	r27, r1
 1f4:	8e 6f       	ori	r24, 0xFE	; 254
 1f6:	9f 6f       	ori	r25, 0xFF	; 255
 1f8:	af 6f       	ori	r26, 0xFF	; 255
 1fa:	bf 6f       	ori	r27, 0xFF	; 255
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	a1 1d       	adc	r26, r1
 200:	b1 1d       	adc	r27, r1
 202:	89 2b       	or	r24, r25
 204:	8a 2b       	or	r24, r26
 206:	8b 2b       	or	r24, r27
 208:	09 f1       	breq	.+66     	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 20a:	c2 e0       	ldi	r28, 0x02	; 2
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	08 c0       	rjmp	.+16     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 210:	c7 01       	movw	r24, r14
 212:	b6 01       	movw	r22, r12
 214:	0e 94 8f 02 	call	0x51e	; 0x51e <__divmodsi4>
 218:	67 2b       	or	r22, r23
 21a:	68 2b       	or	r22, r24
 21c:	69 2b       	or	r22, r25
 21e:	c9 f0       	breq	.+50     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
	output(str, size_needed-1);
}

int is_prime(long i){
	int c;
	for (c = 2; c <= i - 1; c++)
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	9e 01       	movw	r18, r28
 224:	0d 2e       	mov	r0, r29
 226:	00 0c       	add	r0, r0
 228:	44 0b       	sbc	r20, r20
 22a:	55 0b       	sbc	r21, r21
 22c:	82 16       	cp	r8, r18
 22e:	93 06       	cpc	r9, r19
 230:	a4 06       	cpc	r10, r20
 232:	b5 06       	cpc	r11, r21
 234:	6c f7       	brge	.-38     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 236:	04 c0       	rjmp	.+8      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 238:	22 e0       	ldi	r18, 0x02	; 2
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	50 e0       	ldi	r21, 0x00	; 0
	{
		if (i%c == 0)
		return 0;
	}
	if (c == i)
 240:	c2 16       	cp	r12, r18
 242:	d3 06       	cpc	r13, r19
 244:	e4 06       	cpc	r14, r20
 246:	f5 06       	cpc	r15, r21
 248:	39 f0       	breq	.+14     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
	return 1;
}
 24a:	08 c0       	rjmp	.+16     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
int is_prime(long i){
	int c;
	for (c = 2; c <= i - 1; c++)
	{
		if (i%c == 0)
		return 0;
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	05 c0       	rjmp	.+10     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
	}
	if (c == i)
	return 1;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	df 90       	pop	r13
 266:	cf 90       	pop	r12
 268:	bf 90       	pop	r11
 26a:	af 90       	pop	r10
 26c:	9f 90       	pop	r9
 26e:	8f 90       	pop	r8
 270:	08 95       	ret

00000272 <output>:

void output(char arr[], int length)
{
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
	int index = 0;
	int lastIndex = length;
	int pos = 0;
	index = length-6;
 280:	eb 01       	movw	r28, r22
 282:	26 97       	sbiw	r28, 0x06	; 6
	while(index <= lastIndex)
 284:	6c 17       	cp	r22, r28
 286:	7d 07       	cpc	r23, r29
 288:	84 f0       	brlt	.+32     	; 0x2aa <output+0x38>
 28a:	7b 01       	movw	r14, r22
 28c:	6c 01       	movw	r12, r24
 28e:	c8 0f       	add	r28, r24
 290:	d9 1f       	adc	r29, r25
 292:	10 e0       	ldi	r17, 0x00	; 0
	{
		char ch = arr[index];
		writeChar(ch, pos);
 294:	61 2f       	mov	r22, r17
 296:	89 91       	ld	r24, Y+
 298:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
 29c:	1f 5f       	subi	r17, 0xFF	; 255
{
	int index = 0;
	int lastIndex = length;
	int pos = 0;
	index = length-6;
	while(index <= lastIndex)
 29e:	9e 01       	movw	r18, r28
 2a0:	2c 19       	sub	r18, r12
 2a2:	3d 09       	sbc	r19, r13
 2a4:	e2 16       	cp	r14, r18
 2a6:	f3 06       	cpc	r15, r19
 2a8:	ac f7       	brge	.-22     	; 0x294 <output+0x22>
		char ch = arr[index];
		writeChar(ch, pos);
		index++;
		pos++;
	}
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	cf 90       	pop	r12
 2b8:	08 95       	ret

000002ba <writeLong>:
	LCDDR8=0x0;
	LCDDR13=0x0;
	LCDDR18=0x0;
}

void writeLong(long i){
 2ba:	4f 92       	push	r4
 2bc:	5f 92       	push	r5
 2be:	6f 92       	push	r6
 2c0:	7f 92       	push	r7
 2c2:	8f 92       	push	r8
 2c4:	9f 92       	push	r9
 2c6:	af 92       	push	r10
 2c8:	bf 92       	push	r11
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	2b 01       	movw	r4, r22
 2e0:	3c 01       	movw	r6, r24
	} while (value_copy != 0);

	char str[size_needed];
	sprintf(str, "%ld", i);
	output(str, size_needed-1);
}
 2e2:	cd b6       	in	r12, 0x3d	; 61
 2e4:	de b6       	in	r13, 0x3e	; 62

void writeLong(long i){
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
	if (value_copy < 0) size_needed++; // Only needed for signed types.
 2e6:	dc 01       	movw	r26, r24
 2e8:	cb 01       	movw	r24, r22
 2ea:	80 95       	com	r24
 2ec:	90 95       	com	r25
 2ee:	a0 95       	com	r26
 2f0:	b0 95       	com	r27
 2f2:	88 27       	eor	r24, r24
 2f4:	b7 fd       	sbrc	r27, 7
 2f6:	83 95       	inc	r24
 2f8:	99 27       	eor	r25, r25
 2fa:	aa 27       	eor	r26, r26
 2fc:	bb 27       	eor	r27, r27
 2fe:	02 e0       	ldi	r16, 0x02	; 2
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	08 1b       	sub	r16, r24
 304:	19 0b       	sbc	r17, r25
}

void writeLong(long i){
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
 306:	a3 01       	movw	r20, r6
 308:	92 01       	movw	r18, r4
	if (value_copy < 0) size_needed++; // Only needed for signed types.
	do {
		size_needed++; // Add 1 per digit.
		value_copy /= 10;
 30a:	0f 2e       	mov	r0, r31
 30c:	fa e0       	ldi	r31, 0x0A	; 10
 30e:	8f 2e       	mov	r8, r31
 310:	91 2c       	mov	r9, r1
 312:	a1 2c       	mov	r10, r1
 314:	b1 2c       	mov	r11, r1
 316:	f0 2d       	mov	r31, r0
 318:	01 c0       	rjmp	.+2      	; 0x31c <writeLong+0x62>
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
	if (value_copy < 0) size_needed++; // Only needed for signed types.
	do {
		size_needed++; // Add 1 per digit.
 31a:	87 01       	movw	r16, r14
 31c:	78 01       	movw	r14, r16
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	e8 1a       	sub	r14, r24
 322:	f8 0a       	sbc	r15, r24
		value_copy /= 10;
 324:	ca 01       	movw	r24, r20
 326:	b9 01       	movw	r22, r18
 328:	a5 01       	movw	r20, r10
 32a:	94 01       	movw	r18, r8
 32c:	0e 94 8f 02 	call	0x51e	; 0x51e <__divmodsi4>
	} while (value_copy != 0);
 330:	21 15       	cp	r18, r1
 332:	31 05       	cpc	r19, r1
 334:	41 05       	cpc	r20, r1
 336:	51 05       	cpc	r21, r1
 338:	81 f7       	brne	.-32     	; 0x31a <writeLong+0x60>

	char str[size_needed];
 33a:	8d b7       	in	r24, 0x3d	; 61
 33c:	9e b7       	in	r25, 0x3e	; 62
 33e:	8e 19       	sub	r24, r14
 340:	9f 09       	sbc	r25, r15
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	9e bf       	out	0x3e, r25	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	8d bf       	out	0x3d, r24	; 61
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	7c 01       	movw	r14, r24
	sprintf(str, "%ld", i);
 350:	7f 92       	push	r7
 352:	6f 92       	push	r6
 354:	5f 92       	push	r5
 356:	4f 92       	push	r4
 358:	84 e1       	ldi	r24, 0x14	; 20
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	9f 93       	push	r25
 35e:	8f 93       	push	r24
 360:	ff 92       	push	r15
 362:	ef 92       	push	r14
 364:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <sprintf>
	output(str, size_needed-1);
 368:	b8 01       	movw	r22, r16
 36a:	8e 2d       	mov	r24, r14
 36c:	9f 2d       	mov	r25, r15
 36e:	0e 94 39 01 	call	0x272	; 0x272 <output>
}
 372:	8d b7       	in	r24, 0x3d	; 61
 374:	9e b7       	in	r25, 0x3e	; 62
 376:	08 96       	adiw	r24, 0x08	; 8
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	9e bf       	out	0x3e, r25	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	8d bf       	out	0x3d, r24	; 61
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de be       	out	0x3e, r13	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd be       	out	0x3d, r12	; 61
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	bf 90       	pop	r11
 39e:	af 90       	pop	r10
 3a0:	9f 90       	pop	r9
 3a2:	8f 90       	pop	r8
 3a4:	7f 90       	pop	r7
 3a6:	6f 90       	pop	r6
 3a8:	5f 90       	pop	r5
 3aa:	4f 90       	pop	r4
 3ac:	08 95       	ret

000003ae <primes>:
	in primes we removed the delay and clearLCD since function
	since this will be manged in main. We also return the next prime
	prime since we need it to keep track of where we are.
	We don't need the for loop so it's removed.
*/
long primes(long number){
 3ae:	8f 92       	push	r8
 3b0:	9f 92       	push	r9
 3b2:	af 92       	push	r10
 3b4:	bf 92       	push	r11
 3b6:	cf 92       	push	r12
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	4b 01       	movw	r8, r22
 3c4:	5c 01       	movw	r10, r24
	int i = 1;
 3c6:	c1 e0       	ldi	r28, 0x01	; 1
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
	int primeFound = 0;
	while (primeFound == 0){
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <primes+0x20>
		if(is_prime(number+i) == 1) {
			primeFound = 1;
			writeLong(number+i);
			return (number+i);
		}
		i++;
 3cc:	21 96       	adiw	r28, 0x01	; 1
*/
long primes(long number){
	int i = 1;
	int primeFound = 0;
	while (primeFound == 0){
		if(is_prime(number+i) == 1) {
 3ce:	6e 01       	movw	r12, r28
 3d0:	0d 2e       	mov	r0, r29
 3d2:	00 0c       	add	r0, r0
 3d4:	ee 08       	sbc	r14, r14
 3d6:	ff 08       	sbc	r15, r15
 3d8:	c8 0c       	add	r12, r8
 3da:	d9 1c       	adc	r13, r9
 3dc:	ea 1c       	adc	r14, r10
 3de:	fb 1c       	adc	r15, r11
 3e0:	c7 01       	movw	r24, r14
 3e2:	b6 01       	movw	r22, r12
 3e4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <is_prime>
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	81 f7       	brne	.-32     	; 0x3cc <primes+0x1e>
			primeFound = 1;
			writeLong(number+i);
 3ec:	c7 01       	movw	r24, r14
 3ee:	b6 01       	movw	r22, r12
 3f0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <writeLong>
			return (number+i);
		}
		i++;
	}
}
 3f4:	c7 01       	movw	r24, r14
 3f6:	b6 01       	movw	r22, r12
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	bf 90       	pop	r11
 406:	af 90       	pop	r10
 408:	9f 90       	pop	r9
 40a:	8f 90       	pop	r8
 40c:	08 95       	ret

0000040e <toggle>:

int toggle(int state){
	if(state == 0) { // if OFF
 40e:	89 2b       	or	r24, r25
 410:	31 f4       	brne	.+12     	; 0x41e <toggle+0x10>
		LCDDR8 = 0x1; // ON
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
		return 1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	08 95       	ret
	}
	else{			// if ON
		LCDDR8 = 0x0; // OFF
 41e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
		return 0;
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 426:	08 95       	ret

00000428 <button_init>:
		}
	}
}
*/
void button_init(void){
	PORTB = (1<<PB7);
 428:	80 e8       	ldi	r24, 0x80	; 128
 42a:	85 b9       	out	0x05, r24	; 5
	DDRB = (1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
 42c:	8f e0       	ldi	r24, 0x0F	; 15
 42e:	84 b9       	out	0x04, r24	; 4
 430:	08 95       	ret

00000432 <main>:
}
*/
int main(void)
{
	USART1_init();
	LCD_Init();
 432:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Init>
	button_init();
 436:	0e 94 14 02 	call	0x428	; 0x428 <button_init>
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 250;		// set first prime
	uint8_t cykleState = 0;		
	uint8_t buttonPress = 0;
	timer_init();
 43a:	0e 94 52 00 	call	0xa4	; 0xa4 <timer_init>
	nextTimerValue = ((8000000/256)/1);		// calculate the clock time for 1Hz
	TCNT1 = 0;
 43e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 442:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 250;		// set first prime
	uint8_t cykleState = 0;		
	uint8_t buttonPress = 0;
 446:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_Init();
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 250;		// set first prime
	uint8_t cykleState = 0;		
 448:	c0 e0       	ldi	r28, 0x00	; 0
	USART1_init();
	LCD_Init();
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 250;		// set first prime
 44a:	0f 2e       	mov	r0, r31
 44c:	fa ef       	ldi	r31, 0xFA	; 250
 44e:	ef 2e       	mov	r14, r31
 450:	f1 2c       	mov	r15, r1
 452:	f0 2d       	mov	r31, r0
{
	USART1_init();
	LCD_Init();
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
 454:	71 2c       	mov	r7, r1
	uint8_t buttonPress = 0;
	timer_init();
	nextTimerValue = ((8000000/256)/1);		// calculate the clock time for 1Hz
	TCNT1 = 0;
	while(1){
		while (TCNT1 >= nextTimerValue )
 456:	04 e8       	ldi	r16, 0x84	; 132
 458:	10 e0       	ldi	r17, 0x00	; 0
		while (TCNT1 <= nextTimerValue )
		{
			if (cykleState == 1) {
				state = toggle(state);
				prime = primes(prime);
				cykleState = 0;
 45a:	51 2c       	mov	r5, r1
			}
			if (PINB & (1<<PB7)) {
				buttonPress = 1;
 45c:	99 24       	eor	r9, r9
 45e:	93 94       	inc	r9
			if (buttonPress == 1){
				LCDDR13 = 0x1;
				LCDDR18 = 0x0;
			}
			if (buttonPress == 0){
				LCDDR13 = 0x0;
 460:	0f 2e       	mov	r0, r31
 462:	f9 ef       	ldi	r31, 0xF9	; 249
 464:	af 2e       	mov	r10, r31
 466:	b1 2c       	mov	r11, r1
 468:	f0 2d       	mov	r31, r0
				LCDDR18 = 0x1;
 46a:	0f 2e       	mov	r0, r31
 46c:	fe ef       	ldi	r31, 0xFE	; 254
 46e:	cf 2e       	mov	r12, r31
 470:	d1 2c       	mov	r13, r1
 472:	f0 2d       	mov	r31, r0
 474:	69 2c       	mov	r6, r9
 476:	85 2c       	mov	r8, r5
 478:	20 c0       	rjmp	.+64     	; 0x4ba <main+0x88>
	nextTimerValue = ((8000000/256)/1);		// calculate the clock time for 1Hz
	TCNT1 = 0;
	while(1){
		while (TCNT1 >= nextTimerValue )
		{
			if (cykleState == 0) {
 47a:	c1 11       	cpse	r28, r1
 47c:	0c c0       	rjmp	.+24     	; 0x496 <main+0x64>
				state = toggle(state);
 47e:	87 2d       	mov	r24, r7
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 07 02 	call	0x40e	; 0x40e <toggle>
 486:	78 2e       	mov	r7, r24
				prime = primes(prime);
 488:	b7 01       	movw	r22, r14
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <primes>
 492:	7b 01       	movw	r14, r22
				cykleState = 1;
 494:	c9 2d       	mov	r28, r9
			}	
			if (PINB & (1<<PB7)) {
 496:	1f 99       	sbic	0x03, 7	; 3
				buttonPress = 1;
 498:	d9 2d       	mov	r29, r9
			}
			if (!(PINB & (1<<PB7))) {
 49a:	1f 9b       	sbis	0x03, 7	; 3
 49c:	09 c0       	rjmp	.+18     	; 0x4b0 <main+0x7e>
				buttonPress = 0;
			}
			if (buttonPress == 1){
 49e:	d1 30       	cpi	r29, 0x01	; 1
 4a0:	29 f4       	brne	.+10     	; 0x4ac <main+0x7a>
				LCDDR13 = 0x1;
 4a2:	f5 01       	movw	r30, r10
 4a4:	90 82       	st	Z, r9
				LCDDR18 = 0x0;
 4a6:	f6 01       	movw	r30, r12
 4a8:	10 82       	st	Z, r1
 4aa:	07 c0       	rjmp	.+14     	; 0x4ba <main+0x88>
			}
			if (buttonPress == 0){
 4ac:	d1 11       	cpse	r29, r1
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <main+0x88>
				LCDDR13 = 0x0;
 4b0:	f5 01       	movw	r30, r10
 4b2:	10 82       	st	Z, r1
				LCDDR18 = 0x1;
 4b4:	f6 01       	movw	r30, r12
 4b6:	90 82       	st	Z, r9
 4b8:	d5 2d       	mov	r29, r5
	uint8_t buttonPress = 0;
	timer_init();
	nextTimerValue = ((8000000/256)/1);		// calculate the clock time for 1Hz
	TCNT1 = 0;
	while(1){
		while (TCNT1 >= nextTimerValue )
 4ba:	f8 01       	movw	r30, r16
 4bc:	80 81       	ld	r24, Z
 4be:	91 81       	ldd	r25, Z+1	; 0x01
 4c0:	82 31       	cpi	r24, 0x12	; 18
 4c2:	9a 47       	sbci	r25, 0x7A	; 122
 4c4:	d0 f6       	brcc	.-76     	; 0x47a <main+0x48>
			if (buttonPress == 0){
				LCDDR13 = 0x0;
				LCDDR18 = 0x1;
			}
		}
		clearLCD();
 4c6:	0e 94 b5 00 	call	0x16a	; 0x16a <clearLCD>
		while (TCNT1 <= nextTimerValue )
 4ca:	20 c0       	rjmp	.+64     	; 0x50c <__stack+0xd>
		{
			if (cykleState == 1) {
 4cc:	c1 30       	cpi	r28, 0x01	; 1
 4ce:	61 f4       	brne	.+24     	; 0x4e8 <main+0xb6>
				state = toggle(state);
 4d0:	87 2d       	mov	r24, r7
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 07 02 	call	0x40e	; 0x40e <toggle>
 4d8:	78 2e       	mov	r7, r24
				prime = primes(prime);
 4da:	b7 01       	movw	r22, r14
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <primes>
 4e4:	7b 01       	movw	r14, r22
				cykleState = 0;
 4e6:	c8 2d       	mov	r28, r8
			}
			if (PINB & (1<<PB7)) {
 4e8:	1f 99       	sbic	0x03, 7	; 3
				buttonPress = 1;
 4ea:	d6 2d       	mov	r29, r6
			}
			if (!(PINB & (1<<PB7))) {
 4ec:	1f 9b       	sbis	0x03, 7	; 3
 4ee:	09 c0       	rjmp	.+18     	; 0x502 <__stack+0x3>
				buttonPress = 0;
			}
			if (buttonPress == 1){
 4f0:	d1 30       	cpi	r29, 0x01	; 1
 4f2:	29 f4       	brne	.+10     	; 0x4fe <main+0xcc>
				LCDDR13 = 0x1;
 4f4:	f5 01       	movw	r30, r10
 4f6:	90 82       	st	Z, r9
				LCDDR18 = 0x0;
 4f8:	f6 01       	movw	r30, r12
 4fa:	10 82       	st	Z, r1
 4fc:	07 c0       	rjmp	.+14     	; 0x50c <__stack+0xd>
			}
			if (buttonPress == 0){
 4fe:	d1 11       	cpse	r29, r1
 500:	05 c0       	rjmp	.+10     	; 0x50c <__stack+0xd>
				LCDDR13 = 0x0;
 502:	f5 01       	movw	r30, r10
 504:	10 82       	st	Z, r1
				LCDDR18 = 0x1;
 506:	f6 01       	movw	r30, r12
 508:	90 82       	st	Z, r9
 50a:	d8 2d       	mov	r29, r8
				LCDDR13 = 0x0;
				LCDDR18 = 0x1;
			}
		}
		clearLCD();
		while (TCNT1 <= nextTimerValue )
 50c:	f8 01       	movw	r30, r16
 50e:	80 81       	ld	r24, Z
 510:	91 81       	ldd	r25, Z+1	; 0x01
 512:	83 31       	cpi	r24, 0x13	; 19
 514:	9a 47       	sbci	r25, 0x7A	; 122
 516:	d0 f2       	brcs	.-76     	; 0x4cc <main+0x9a>
			if (buttonPress == 0){
				LCDDR13 = 0x0;
				LCDDR18 = 0x1;
			}
		}
		clearLCD();
 518:	0e 94 b5 00 	call	0x16a	; 0x16a <clearLCD>
	}
 51c:	ce cf       	rjmp	.-100    	; 0x4ba <main+0x88>

0000051e <__divmodsi4>:
 51e:	05 2e       	mov	r0, r21
 520:	97 fb       	bst	r25, 7
 522:	1e f4       	brtc	.+6      	; 0x52a <__divmodsi4+0xc>
 524:	00 94       	com	r0
 526:	0e 94 a6 02 	call	0x54c	; 0x54c <__negsi2>
 52a:	57 fd       	sbrc	r21, 7
 52c:	07 d0       	rcall	.+14     	; 0x53c <__divmodsi4_neg2>
 52e:	0e 94 ae 02 	call	0x55c	; 0x55c <__udivmodsi4>
 532:	07 fc       	sbrc	r0, 7
 534:	03 d0       	rcall	.+6      	; 0x53c <__divmodsi4_neg2>
 536:	4e f4       	brtc	.+18     	; 0x54a <__divmodsi4_exit>
 538:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__negsi2>

0000053c <__divmodsi4_neg2>:
 53c:	50 95       	com	r21
 53e:	40 95       	com	r20
 540:	30 95       	com	r19
 542:	21 95       	neg	r18
 544:	3f 4f       	sbci	r19, 0xFF	; 255
 546:	4f 4f       	sbci	r20, 0xFF	; 255
 548:	5f 4f       	sbci	r21, 0xFF	; 255

0000054a <__divmodsi4_exit>:
 54a:	08 95       	ret

0000054c <__negsi2>:
 54c:	90 95       	com	r25
 54e:	80 95       	com	r24
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	08 95       	ret

0000055c <__udivmodsi4>:
 55c:	a1 e2       	ldi	r26, 0x21	; 33
 55e:	1a 2e       	mov	r1, r26
 560:	aa 1b       	sub	r26, r26
 562:	bb 1b       	sub	r27, r27
 564:	fd 01       	movw	r30, r26
 566:	0d c0       	rjmp	.+26     	; 0x582 <__udivmodsi4_ep>

00000568 <__udivmodsi4_loop>:
 568:	aa 1f       	adc	r26, r26
 56a:	bb 1f       	adc	r27, r27
 56c:	ee 1f       	adc	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	a2 17       	cp	r26, r18
 572:	b3 07       	cpc	r27, r19
 574:	e4 07       	cpc	r30, r20
 576:	f5 07       	cpc	r31, r21
 578:	20 f0       	brcs	.+8      	; 0x582 <__udivmodsi4_ep>
 57a:	a2 1b       	sub	r26, r18
 57c:	b3 0b       	sbc	r27, r19
 57e:	e4 0b       	sbc	r30, r20
 580:	f5 0b       	sbc	r31, r21

00000582 <__udivmodsi4_ep>:
 582:	66 1f       	adc	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	88 1f       	adc	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	1a 94       	dec	r1
 58c:	69 f7       	brne	.-38     	; 0x568 <__udivmodsi4_loop>
 58e:	60 95       	com	r22
 590:	70 95       	com	r23
 592:	80 95       	com	r24
 594:	90 95       	com	r25
 596:	9b 01       	movw	r18, r22
 598:	ac 01       	movw	r20, r24
 59a:	bd 01       	movw	r22, r26
 59c:	cf 01       	movw	r24, r30
 59e:	08 95       	ret

000005a0 <sprintf>:
 5a0:	ae e0       	ldi	r26, 0x0E	; 14
 5a2:	b0 e0       	ldi	r27, 0x00	; 0
 5a4:	e6 ed       	ldi	r30, 0xD6	; 214
 5a6:	f2 e0       	ldi	r31, 0x02	; 2
 5a8:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__prologue_saves__+0x1c>
 5ac:	0d 89       	ldd	r16, Y+21	; 0x15
 5ae:	1e 89       	ldd	r17, Y+22	; 0x16
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	8c 83       	std	Y+4, r24	; 0x04
 5b4:	1a 83       	std	Y+2, r17	; 0x02
 5b6:	09 83       	std	Y+1, r16	; 0x01
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	9f e7       	ldi	r25, 0x7F	; 127
 5bc:	9e 83       	std	Y+6, r25	; 0x06
 5be:	8d 83       	std	Y+5, r24	; 0x05
 5c0:	ae 01       	movw	r20, r28
 5c2:	47 5e       	subi	r20, 0xE7	; 231
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	6f 89       	ldd	r22, Y+23	; 0x17
 5c8:	78 8d       	ldd	r23, Y+24	; 0x18
 5ca:	ce 01       	movw	r24, r28
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <vfprintf>
 5d2:	ef 81       	ldd	r30, Y+7	; 0x07
 5d4:	f8 85       	ldd	r31, Y+8	; 0x08
 5d6:	e0 0f       	add	r30, r16
 5d8:	f1 1f       	adc	r31, r17
 5da:	10 82       	st	Z, r1
 5dc:	2e 96       	adiw	r28, 0x0e	; 14
 5de:	e4 e0       	ldi	r30, 0x04	; 4
 5e0:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__epilogue_restores__+0x1c>

000005e4 <vfprintf>:
 5e4:	ab e0       	ldi	r26, 0x0B	; 11
 5e6:	b0 e0       	ldi	r27, 0x00	; 0
 5e8:	e8 ef       	ldi	r30, 0xF8	; 248
 5ea:	f2 e0       	ldi	r31, 0x02	; 2
 5ec:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__prologue_saves__>
 5f0:	6c 01       	movw	r12, r24
 5f2:	7b 01       	movw	r14, r22
 5f4:	8a 01       	movw	r16, r20
 5f6:	fc 01       	movw	r30, r24
 5f8:	17 82       	std	Z+7, r1	; 0x07
 5fa:	16 82       	std	Z+6, r1	; 0x06
 5fc:	83 81       	ldd	r24, Z+3	; 0x03
 5fe:	81 ff       	sbrs	r24, 1
 600:	cc c1       	rjmp	.+920    	; 0x99a <vfprintf+0x3b6>
 602:	ce 01       	movw	r24, r28
 604:	01 96       	adiw	r24, 0x01	; 1
 606:	3c 01       	movw	r6, r24
 608:	f6 01       	movw	r30, r12
 60a:	93 81       	ldd	r25, Z+3	; 0x03
 60c:	f7 01       	movw	r30, r14
 60e:	93 fd       	sbrc	r25, 3
 610:	85 91       	lpm	r24, Z+
 612:	93 ff       	sbrs	r25, 3
 614:	81 91       	ld	r24, Z+
 616:	7f 01       	movw	r14, r30
 618:	88 23       	and	r24, r24
 61a:	09 f4       	brne	.+2      	; 0x61e <vfprintf+0x3a>
 61c:	ba c1       	rjmp	.+884    	; 0x992 <vfprintf+0x3ae>
 61e:	85 32       	cpi	r24, 0x25	; 37
 620:	39 f4       	brne	.+14     	; 0x630 <vfprintf+0x4c>
 622:	93 fd       	sbrc	r25, 3
 624:	85 91       	lpm	r24, Z+
 626:	93 ff       	sbrs	r25, 3
 628:	81 91       	ld	r24, Z+
 62a:	7f 01       	movw	r14, r30
 62c:	85 32       	cpi	r24, 0x25	; 37
 62e:	29 f4       	brne	.+10     	; 0x63a <vfprintf+0x56>
 630:	b6 01       	movw	r22, r12
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <fputc>
 638:	e7 cf       	rjmp	.-50     	; 0x608 <vfprintf+0x24>
 63a:	91 2c       	mov	r9, r1
 63c:	21 2c       	mov	r2, r1
 63e:	31 2c       	mov	r3, r1
 640:	ff e1       	ldi	r31, 0x1F	; 31
 642:	f3 15       	cp	r31, r3
 644:	d8 f0       	brcs	.+54     	; 0x67c <vfprintf+0x98>
 646:	8b 32       	cpi	r24, 0x2B	; 43
 648:	79 f0       	breq	.+30     	; 0x668 <vfprintf+0x84>
 64a:	38 f4       	brcc	.+14     	; 0x65a <vfprintf+0x76>
 64c:	80 32       	cpi	r24, 0x20	; 32
 64e:	79 f0       	breq	.+30     	; 0x66e <vfprintf+0x8a>
 650:	83 32       	cpi	r24, 0x23	; 35
 652:	a1 f4       	brne	.+40     	; 0x67c <vfprintf+0x98>
 654:	23 2d       	mov	r18, r3
 656:	20 61       	ori	r18, 0x10	; 16
 658:	1d c0       	rjmp	.+58     	; 0x694 <vfprintf+0xb0>
 65a:	8d 32       	cpi	r24, 0x2D	; 45
 65c:	61 f0       	breq	.+24     	; 0x676 <vfprintf+0x92>
 65e:	80 33       	cpi	r24, 0x30	; 48
 660:	69 f4       	brne	.+26     	; 0x67c <vfprintf+0x98>
 662:	23 2d       	mov	r18, r3
 664:	21 60       	ori	r18, 0x01	; 1
 666:	16 c0       	rjmp	.+44     	; 0x694 <vfprintf+0xb0>
 668:	83 2d       	mov	r24, r3
 66a:	82 60       	ori	r24, 0x02	; 2
 66c:	38 2e       	mov	r3, r24
 66e:	e3 2d       	mov	r30, r3
 670:	e4 60       	ori	r30, 0x04	; 4
 672:	3e 2e       	mov	r3, r30
 674:	2a c0       	rjmp	.+84     	; 0x6ca <vfprintf+0xe6>
 676:	f3 2d       	mov	r31, r3
 678:	f8 60       	ori	r31, 0x08	; 8
 67a:	1d c0       	rjmp	.+58     	; 0x6b6 <vfprintf+0xd2>
 67c:	37 fc       	sbrc	r3, 7
 67e:	2d c0       	rjmp	.+90     	; 0x6da <vfprintf+0xf6>
 680:	20 ed       	ldi	r18, 0xD0	; 208
 682:	28 0f       	add	r18, r24
 684:	2a 30       	cpi	r18, 0x0A	; 10
 686:	40 f0       	brcs	.+16     	; 0x698 <vfprintf+0xb4>
 688:	8e 32       	cpi	r24, 0x2E	; 46
 68a:	b9 f4       	brne	.+46     	; 0x6ba <vfprintf+0xd6>
 68c:	36 fc       	sbrc	r3, 6
 68e:	81 c1       	rjmp	.+770    	; 0x992 <vfprintf+0x3ae>
 690:	23 2d       	mov	r18, r3
 692:	20 64       	ori	r18, 0x40	; 64
 694:	32 2e       	mov	r3, r18
 696:	19 c0       	rjmp	.+50     	; 0x6ca <vfprintf+0xe6>
 698:	36 fe       	sbrs	r3, 6
 69a:	06 c0       	rjmp	.+12     	; 0x6a8 <vfprintf+0xc4>
 69c:	8a e0       	ldi	r24, 0x0A	; 10
 69e:	98 9e       	mul	r9, r24
 6a0:	20 0d       	add	r18, r0
 6a2:	11 24       	eor	r1, r1
 6a4:	92 2e       	mov	r9, r18
 6a6:	11 c0       	rjmp	.+34     	; 0x6ca <vfprintf+0xe6>
 6a8:	ea e0       	ldi	r30, 0x0A	; 10
 6aa:	2e 9e       	mul	r2, r30
 6ac:	20 0d       	add	r18, r0
 6ae:	11 24       	eor	r1, r1
 6b0:	22 2e       	mov	r2, r18
 6b2:	f3 2d       	mov	r31, r3
 6b4:	f0 62       	ori	r31, 0x20	; 32
 6b6:	3f 2e       	mov	r3, r31
 6b8:	08 c0       	rjmp	.+16     	; 0x6ca <vfprintf+0xe6>
 6ba:	8c 36       	cpi	r24, 0x6C	; 108
 6bc:	21 f4       	brne	.+8      	; 0x6c6 <vfprintf+0xe2>
 6be:	83 2d       	mov	r24, r3
 6c0:	80 68       	ori	r24, 0x80	; 128
 6c2:	38 2e       	mov	r3, r24
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <vfprintf+0xe6>
 6c6:	88 36       	cpi	r24, 0x68	; 104
 6c8:	41 f4       	brne	.+16     	; 0x6da <vfprintf+0xf6>
 6ca:	f7 01       	movw	r30, r14
 6cc:	93 fd       	sbrc	r25, 3
 6ce:	85 91       	lpm	r24, Z+
 6d0:	93 ff       	sbrs	r25, 3
 6d2:	81 91       	ld	r24, Z+
 6d4:	7f 01       	movw	r14, r30
 6d6:	81 11       	cpse	r24, r1
 6d8:	b3 cf       	rjmp	.-154    	; 0x640 <vfprintf+0x5c>
 6da:	98 2f       	mov	r25, r24
 6dc:	9f 7d       	andi	r25, 0xDF	; 223
 6de:	95 54       	subi	r25, 0x45	; 69
 6e0:	93 30       	cpi	r25, 0x03	; 3
 6e2:	28 f4       	brcc	.+10     	; 0x6ee <vfprintf+0x10a>
 6e4:	0c 5f       	subi	r16, 0xFC	; 252
 6e6:	1f 4f       	sbci	r17, 0xFF	; 255
 6e8:	9f e3       	ldi	r25, 0x3F	; 63
 6ea:	99 83       	std	Y+1, r25	; 0x01
 6ec:	0d c0       	rjmp	.+26     	; 0x708 <vfprintf+0x124>
 6ee:	83 36       	cpi	r24, 0x63	; 99
 6f0:	31 f0       	breq	.+12     	; 0x6fe <vfprintf+0x11a>
 6f2:	83 37       	cpi	r24, 0x73	; 115
 6f4:	71 f0       	breq	.+28     	; 0x712 <vfprintf+0x12e>
 6f6:	83 35       	cpi	r24, 0x53	; 83
 6f8:	09 f0       	breq	.+2      	; 0x6fc <vfprintf+0x118>
 6fa:	59 c0       	rjmp	.+178    	; 0x7ae <vfprintf+0x1ca>
 6fc:	21 c0       	rjmp	.+66     	; 0x740 <vfprintf+0x15c>
 6fe:	f8 01       	movw	r30, r16
 700:	80 81       	ld	r24, Z
 702:	89 83       	std	Y+1, r24	; 0x01
 704:	0e 5f       	subi	r16, 0xFE	; 254
 706:	1f 4f       	sbci	r17, 0xFF	; 255
 708:	88 24       	eor	r8, r8
 70a:	83 94       	inc	r8
 70c:	91 2c       	mov	r9, r1
 70e:	53 01       	movw	r10, r6
 710:	13 c0       	rjmp	.+38     	; 0x738 <vfprintf+0x154>
 712:	28 01       	movw	r4, r16
 714:	f2 e0       	ldi	r31, 0x02	; 2
 716:	4f 0e       	add	r4, r31
 718:	51 1c       	adc	r5, r1
 71a:	f8 01       	movw	r30, r16
 71c:	a0 80       	ld	r10, Z
 71e:	b1 80       	ldd	r11, Z+1	; 0x01
 720:	36 fe       	sbrs	r3, 6
 722:	03 c0       	rjmp	.+6      	; 0x72a <vfprintf+0x146>
 724:	69 2d       	mov	r22, r9
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <vfprintf+0x14a>
 72a:	6f ef       	ldi	r22, 0xFF	; 255
 72c:	7f ef       	ldi	r23, 0xFF	; 255
 72e:	c5 01       	movw	r24, r10
 730:	0e 94 de 04 	call	0x9bc	; 0x9bc <strnlen>
 734:	4c 01       	movw	r8, r24
 736:	82 01       	movw	r16, r4
 738:	f3 2d       	mov	r31, r3
 73a:	ff 77       	andi	r31, 0x7F	; 127
 73c:	3f 2e       	mov	r3, r31
 73e:	16 c0       	rjmp	.+44     	; 0x76c <vfprintf+0x188>
 740:	28 01       	movw	r4, r16
 742:	22 e0       	ldi	r18, 0x02	; 2
 744:	42 0e       	add	r4, r18
 746:	51 1c       	adc	r5, r1
 748:	f8 01       	movw	r30, r16
 74a:	a0 80       	ld	r10, Z
 74c:	b1 80       	ldd	r11, Z+1	; 0x01
 74e:	36 fe       	sbrs	r3, 6
 750:	03 c0       	rjmp	.+6      	; 0x758 <vfprintf+0x174>
 752:	69 2d       	mov	r22, r9
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	02 c0       	rjmp	.+4      	; 0x75c <vfprintf+0x178>
 758:	6f ef       	ldi	r22, 0xFF	; 255
 75a:	7f ef       	ldi	r23, 0xFF	; 255
 75c:	c5 01       	movw	r24, r10
 75e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <strnlen_P>
 762:	4c 01       	movw	r8, r24
 764:	f3 2d       	mov	r31, r3
 766:	f0 68       	ori	r31, 0x80	; 128
 768:	3f 2e       	mov	r3, r31
 76a:	82 01       	movw	r16, r4
 76c:	33 fc       	sbrc	r3, 3
 76e:	1b c0       	rjmp	.+54     	; 0x7a6 <vfprintf+0x1c2>
 770:	82 2d       	mov	r24, r2
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	88 16       	cp	r8, r24
 776:	99 06       	cpc	r9, r25
 778:	b0 f4       	brcc	.+44     	; 0x7a6 <vfprintf+0x1c2>
 77a:	b6 01       	movw	r22, r12
 77c:	80 e2       	ldi	r24, 0x20	; 32
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <fputc>
 784:	2a 94       	dec	r2
 786:	f4 cf       	rjmp	.-24     	; 0x770 <vfprintf+0x18c>
 788:	f5 01       	movw	r30, r10
 78a:	37 fc       	sbrc	r3, 7
 78c:	85 91       	lpm	r24, Z+
 78e:	37 fe       	sbrs	r3, 7
 790:	81 91       	ld	r24, Z+
 792:	5f 01       	movw	r10, r30
 794:	b6 01       	movw	r22, r12
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <fputc>
 79c:	21 10       	cpse	r2, r1
 79e:	2a 94       	dec	r2
 7a0:	21 e0       	ldi	r18, 0x01	; 1
 7a2:	82 1a       	sub	r8, r18
 7a4:	91 08       	sbc	r9, r1
 7a6:	81 14       	cp	r8, r1
 7a8:	91 04       	cpc	r9, r1
 7aa:	71 f7       	brne	.-36     	; 0x788 <vfprintf+0x1a4>
 7ac:	e8 c0       	rjmp	.+464    	; 0x97e <vfprintf+0x39a>
 7ae:	84 36       	cpi	r24, 0x64	; 100
 7b0:	11 f0       	breq	.+4      	; 0x7b6 <vfprintf+0x1d2>
 7b2:	89 36       	cpi	r24, 0x69	; 105
 7b4:	41 f5       	brne	.+80     	; 0x806 <vfprintf+0x222>
 7b6:	f8 01       	movw	r30, r16
 7b8:	37 fe       	sbrs	r3, 7
 7ba:	07 c0       	rjmp	.+14     	; 0x7ca <vfprintf+0x1e6>
 7bc:	60 81       	ld	r22, Z
 7be:	71 81       	ldd	r23, Z+1	; 0x01
 7c0:	82 81       	ldd	r24, Z+2	; 0x02
 7c2:	93 81       	ldd	r25, Z+3	; 0x03
 7c4:	0c 5f       	subi	r16, 0xFC	; 252
 7c6:	1f 4f       	sbci	r17, 0xFF	; 255
 7c8:	08 c0       	rjmp	.+16     	; 0x7da <vfprintf+0x1f6>
 7ca:	60 81       	ld	r22, Z
 7cc:	71 81       	ldd	r23, Z+1	; 0x01
 7ce:	07 2e       	mov	r0, r23
 7d0:	00 0c       	add	r0, r0
 7d2:	88 0b       	sbc	r24, r24
 7d4:	99 0b       	sbc	r25, r25
 7d6:	0e 5f       	subi	r16, 0xFE	; 254
 7d8:	1f 4f       	sbci	r17, 0xFF	; 255
 7da:	f3 2d       	mov	r31, r3
 7dc:	ff 76       	andi	r31, 0x6F	; 111
 7de:	3f 2e       	mov	r3, r31
 7e0:	97 ff       	sbrs	r25, 7
 7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <vfprintf+0x212>
 7e4:	90 95       	com	r25
 7e6:	80 95       	com	r24
 7e8:	70 95       	com	r23
 7ea:	61 95       	neg	r22
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255
 7ee:	8f 4f       	sbci	r24, 0xFF	; 255
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	f0 68       	ori	r31, 0x80	; 128
 7f4:	3f 2e       	mov	r3, r31
 7f6:	2a e0       	ldi	r18, 0x0A	; 10
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	a3 01       	movw	r20, r6
 7fc:	0e 94 25 05 	call	0xa4a	; 0xa4a <__ultoa_invert>
 800:	88 2e       	mov	r8, r24
 802:	86 18       	sub	r8, r6
 804:	45 c0       	rjmp	.+138    	; 0x890 <vfprintf+0x2ac>
 806:	85 37       	cpi	r24, 0x75	; 117
 808:	31 f4       	brne	.+12     	; 0x816 <vfprintf+0x232>
 80a:	23 2d       	mov	r18, r3
 80c:	2f 7e       	andi	r18, 0xEF	; 239
 80e:	b2 2e       	mov	r11, r18
 810:	2a e0       	ldi	r18, 0x0A	; 10
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	25 c0       	rjmp	.+74     	; 0x860 <vfprintf+0x27c>
 816:	93 2d       	mov	r25, r3
 818:	99 7f       	andi	r25, 0xF9	; 249
 81a:	b9 2e       	mov	r11, r25
 81c:	8f 36       	cpi	r24, 0x6F	; 111
 81e:	c1 f0       	breq	.+48     	; 0x850 <vfprintf+0x26c>
 820:	18 f4       	brcc	.+6      	; 0x828 <vfprintf+0x244>
 822:	88 35       	cpi	r24, 0x58	; 88
 824:	79 f0       	breq	.+30     	; 0x844 <vfprintf+0x260>
 826:	b5 c0       	rjmp	.+362    	; 0x992 <vfprintf+0x3ae>
 828:	80 37       	cpi	r24, 0x70	; 112
 82a:	19 f0       	breq	.+6      	; 0x832 <vfprintf+0x24e>
 82c:	88 37       	cpi	r24, 0x78	; 120
 82e:	21 f0       	breq	.+8      	; 0x838 <vfprintf+0x254>
 830:	b0 c0       	rjmp	.+352    	; 0x992 <vfprintf+0x3ae>
 832:	e9 2f       	mov	r30, r25
 834:	e0 61       	ori	r30, 0x10	; 16
 836:	be 2e       	mov	r11, r30
 838:	b4 fe       	sbrs	r11, 4
 83a:	0d c0       	rjmp	.+26     	; 0x856 <vfprintf+0x272>
 83c:	fb 2d       	mov	r31, r11
 83e:	f4 60       	ori	r31, 0x04	; 4
 840:	bf 2e       	mov	r11, r31
 842:	09 c0       	rjmp	.+18     	; 0x856 <vfprintf+0x272>
 844:	34 fe       	sbrs	r3, 4
 846:	0a c0       	rjmp	.+20     	; 0x85c <vfprintf+0x278>
 848:	29 2f       	mov	r18, r25
 84a:	26 60       	ori	r18, 0x06	; 6
 84c:	b2 2e       	mov	r11, r18
 84e:	06 c0       	rjmp	.+12     	; 0x85c <vfprintf+0x278>
 850:	28 e0       	ldi	r18, 0x08	; 8
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	05 c0       	rjmp	.+10     	; 0x860 <vfprintf+0x27c>
 856:	20 e1       	ldi	r18, 0x10	; 16
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	02 c0       	rjmp	.+4      	; 0x860 <vfprintf+0x27c>
 85c:	20 e1       	ldi	r18, 0x10	; 16
 85e:	32 e0       	ldi	r19, 0x02	; 2
 860:	f8 01       	movw	r30, r16
 862:	b7 fe       	sbrs	r11, 7
 864:	07 c0       	rjmp	.+14     	; 0x874 <vfprintf+0x290>
 866:	60 81       	ld	r22, Z
 868:	71 81       	ldd	r23, Z+1	; 0x01
 86a:	82 81       	ldd	r24, Z+2	; 0x02
 86c:	93 81       	ldd	r25, Z+3	; 0x03
 86e:	0c 5f       	subi	r16, 0xFC	; 252
 870:	1f 4f       	sbci	r17, 0xFF	; 255
 872:	06 c0       	rjmp	.+12     	; 0x880 <vfprintf+0x29c>
 874:	60 81       	ld	r22, Z
 876:	71 81       	ldd	r23, Z+1	; 0x01
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 5f       	subi	r16, 0xFE	; 254
 87e:	1f 4f       	sbci	r17, 0xFF	; 255
 880:	a3 01       	movw	r20, r6
 882:	0e 94 25 05 	call	0xa4a	; 0xa4a <__ultoa_invert>
 886:	88 2e       	mov	r8, r24
 888:	86 18       	sub	r8, r6
 88a:	fb 2d       	mov	r31, r11
 88c:	ff 77       	andi	r31, 0x7F	; 127
 88e:	3f 2e       	mov	r3, r31
 890:	36 fe       	sbrs	r3, 6
 892:	0d c0       	rjmp	.+26     	; 0x8ae <vfprintf+0x2ca>
 894:	23 2d       	mov	r18, r3
 896:	2e 7f       	andi	r18, 0xFE	; 254
 898:	a2 2e       	mov	r10, r18
 89a:	89 14       	cp	r8, r9
 89c:	58 f4       	brcc	.+22     	; 0x8b4 <vfprintf+0x2d0>
 89e:	34 fe       	sbrs	r3, 4
 8a0:	0b c0       	rjmp	.+22     	; 0x8b8 <vfprintf+0x2d4>
 8a2:	32 fc       	sbrc	r3, 2
 8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <vfprintf+0x2d4>
 8a6:	83 2d       	mov	r24, r3
 8a8:	8e 7e       	andi	r24, 0xEE	; 238
 8aa:	a8 2e       	mov	r10, r24
 8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <vfprintf+0x2d4>
 8ae:	b8 2c       	mov	r11, r8
 8b0:	a3 2c       	mov	r10, r3
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <vfprintf+0x2d6>
 8b4:	b8 2c       	mov	r11, r8
 8b6:	01 c0       	rjmp	.+2      	; 0x8ba <vfprintf+0x2d6>
 8b8:	b9 2c       	mov	r11, r9
 8ba:	a4 fe       	sbrs	r10, 4
 8bc:	0f c0       	rjmp	.+30     	; 0x8dc <vfprintf+0x2f8>
 8be:	fe 01       	movw	r30, r28
 8c0:	e8 0d       	add	r30, r8
 8c2:	f1 1d       	adc	r31, r1
 8c4:	80 81       	ld	r24, Z
 8c6:	80 33       	cpi	r24, 0x30	; 48
 8c8:	21 f4       	brne	.+8      	; 0x8d2 <vfprintf+0x2ee>
 8ca:	9a 2d       	mov	r25, r10
 8cc:	99 7e       	andi	r25, 0xE9	; 233
 8ce:	a9 2e       	mov	r10, r25
 8d0:	09 c0       	rjmp	.+18     	; 0x8e4 <vfprintf+0x300>
 8d2:	a2 fe       	sbrs	r10, 2
 8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <vfprintf+0x2fe>
 8d6:	b3 94       	inc	r11
 8d8:	b3 94       	inc	r11
 8da:	04 c0       	rjmp	.+8      	; 0x8e4 <vfprintf+0x300>
 8dc:	8a 2d       	mov	r24, r10
 8de:	86 78       	andi	r24, 0x86	; 134
 8e0:	09 f0       	breq	.+2      	; 0x8e4 <vfprintf+0x300>
 8e2:	b3 94       	inc	r11
 8e4:	a3 fc       	sbrc	r10, 3
 8e6:	11 c0       	rjmp	.+34     	; 0x90a <vfprintf+0x326>
 8e8:	a0 fe       	sbrs	r10, 0
 8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <vfprintf+0x314>
 8ec:	b2 14       	cp	r11, r2
 8ee:	88 f4       	brcc	.+34     	; 0x912 <vfprintf+0x32e>
 8f0:	28 0c       	add	r2, r8
 8f2:	92 2c       	mov	r9, r2
 8f4:	9b 18       	sub	r9, r11
 8f6:	0e c0       	rjmp	.+28     	; 0x914 <vfprintf+0x330>
 8f8:	b2 14       	cp	r11, r2
 8fa:	60 f4       	brcc	.+24     	; 0x914 <vfprintf+0x330>
 8fc:	b6 01       	movw	r22, r12
 8fe:	80 e2       	ldi	r24, 0x20	; 32
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <fputc>
 906:	b3 94       	inc	r11
 908:	f7 cf       	rjmp	.-18     	; 0x8f8 <vfprintf+0x314>
 90a:	b2 14       	cp	r11, r2
 90c:	18 f4       	brcc	.+6      	; 0x914 <vfprintf+0x330>
 90e:	2b 18       	sub	r2, r11
 910:	02 c0       	rjmp	.+4      	; 0x916 <vfprintf+0x332>
 912:	98 2c       	mov	r9, r8
 914:	21 2c       	mov	r2, r1
 916:	a4 fe       	sbrs	r10, 4
 918:	10 c0       	rjmp	.+32     	; 0x93a <vfprintf+0x356>
 91a:	b6 01       	movw	r22, r12
 91c:	80 e3       	ldi	r24, 0x30	; 48
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <fputc>
 924:	a2 fe       	sbrs	r10, 2
 926:	17 c0       	rjmp	.+46     	; 0x956 <vfprintf+0x372>
 928:	a1 fc       	sbrc	r10, 1
 92a:	03 c0       	rjmp	.+6      	; 0x932 <vfprintf+0x34e>
 92c:	88 e7       	ldi	r24, 0x78	; 120
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	02 c0       	rjmp	.+4      	; 0x936 <vfprintf+0x352>
 932:	88 e5       	ldi	r24, 0x58	; 88
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	b6 01       	movw	r22, r12
 938:	0c c0       	rjmp	.+24     	; 0x952 <vfprintf+0x36e>
 93a:	8a 2d       	mov	r24, r10
 93c:	86 78       	andi	r24, 0x86	; 134
 93e:	59 f0       	breq	.+22     	; 0x956 <vfprintf+0x372>
 940:	a1 fe       	sbrs	r10, 1
 942:	02 c0       	rjmp	.+4      	; 0x948 <vfprintf+0x364>
 944:	8b e2       	ldi	r24, 0x2B	; 43
 946:	01 c0       	rjmp	.+2      	; 0x94a <vfprintf+0x366>
 948:	80 e2       	ldi	r24, 0x20	; 32
 94a:	a7 fc       	sbrc	r10, 7
 94c:	8d e2       	ldi	r24, 0x2D	; 45
 94e:	b6 01       	movw	r22, r12
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <fputc>
 956:	89 14       	cp	r8, r9
 958:	38 f4       	brcc	.+14     	; 0x968 <vfprintf+0x384>
 95a:	b6 01       	movw	r22, r12
 95c:	80 e3       	ldi	r24, 0x30	; 48
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <fputc>
 964:	9a 94       	dec	r9
 966:	f7 cf       	rjmp	.-18     	; 0x956 <vfprintf+0x372>
 968:	8a 94       	dec	r8
 96a:	f3 01       	movw	r30, r6
 96c:	e8 0d       	add	r30, r8
 96e:	f1 1d       	adc	r31, r1
 970:	80 81       	ld	r24, Z
 972:	b6 01       	movw	r22, r12
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <fputc>
 97a:	81 10       	cpse	r8, r1
 97c:	f5 cf       	rjmp	.-22     	; 0x968 <vfprintf+0x384>
 97e:	22 20       	and	r2, r2
 980:	09 f4       	brne	.+2      	; 0x984 <vfprintf+0x3a0>
 982:	42 ce       	rjmp	.-892    	; 0x608 <vfprintf+0x24>
 984:	b6 01       	movw	r22, r12
 986:	80 e2       	ldi	r24, 0x20	; 32
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <fputc>
 98e:	2a 94       	dec	r2
 990:	f6 cf       	rjmp	.-20     	; 0x97e <vfprintf+0x39a>
 992:	f6 01       	movw	r30, r12
 994:	86 81       	ldd	r24, Z+6	; 0x06
 996:	97 81       	ldd	r25, Z+7	; 0x07
 998:	02 c0       	rjmp	.+4      	; 0x99e <vfprintf+0x3ba>
 99a:	8f ef       	ldi	r24, 0xFF	; 255
 99c:	9f ef       	ldi	r25, 0xFF	; 255
 99e:	2b 96       	adiw	r28, 0x0b	; 11
 9a0:	e2 e1       	ldi	r30, 0x12	; 18
 9a2:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__epilogue_restores__>

000009a6 <strnlen_P>:
 9a6:	fc 01       	movw	r30, r24
 9a8:	05 90       	lpm	r0, Z+
 9aa:	61 50       	subi	r22, 0x01	; 1
 9ac:	70 40       	sbci	r23, 0x00	; 0
 9ae:	01 10       	cpse	r0, r1
 9b0:	d8 f7       	brcc	.-10     	; 0x9a8 <strnlen_P+0x2>
 9b2:	80 95       	com	r24
 9b4:	90 95       	com	r25
 9b6:	8e 0f       	add	r24, r30
 9b8:	9f 1f       	adc	r25, r31
 9ba:	08 95       	ret

000009bc <strnlen>:
 9bc:	fc 01       	movw	r30, r24
 9be:	61 50       	subi	r22, 0x01	; 1
 9c0:	70 40       	sbci	r23, 0x00	; 0
 9c2:	01 90       	ld	r0, Z+
 9c4:	01 10       	cpse	r0, r1
 9c6:	d8 f7       	brcc	.-10     	; 0x9be <strnlen+0x2>
 9c8:	80 95       	com	r24
 9ca:	90 95       	com	r25
 9cc:	8e 0f       	add	r24, r30
 9ce:	9f 1f       	adc	r25, r31
 9d0:	08 95       	ret

000009d2 <fputc>:
 9d2:	0f 93       	push	r16
 9d4:	1f 93       	push	r17
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 9da:	fb 01       	movw	r30, r22
 9dc:	23 81       	ldd	r18, Z+3	; 0x03
 9de:	21 fd       	sbrc	r18, 1
 9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <fputc+0x16>
 9e2:	8f ef       	ldi	r24, 0xFF	; 255
 9e4:	9f ef       	ldi	r25, 0xFF	; 255
 9e6:	2c c0       	rjmp	.+88     	; 0xa40 <fputc+0x6e>
 9e8:	22 ff       	sbrs	r18, 2
 9ea:	16 c0       	rjmp	.+44     	; 0xa18 <fputc+0x46>
 9ec:	46 81       	ldd	r20, Z+6	; 0x06
 9ee:	57 81       	ldd	r21, Z+7	; 0x07
 9f0:	24 81       	ldd	r18, Z+4	; 0x04
 9f2:	35 81       	ldd	r19, Z+5	; 0x05
 9f4:	42 17       	cp	r20, r18
 9f6:	53 07       	cpc	r21, r19
 9f8:	44 f4       	brge	.+16     	; 0xa0a <fputc+0x38>
 9fa:	a0 81       	ld	r26, Z
 9fc:	b1 81       	ldd	r27, Z+1	; 0x01
 9fe:	9d 01       	movw	r18, r26
 a00:	2f 5f       	subi	r18, 0xFF	; 255
 a02:	3f 4f       	sbci	r19, 0xFF	; 255
 a04:	31 83       	std	Z+1, r19	; 0x01
 a06:	20 83       	st	Z, r18
 a08:	8c 93       	st	X, r24
 a0a:	26 81       	ldd	r18, Z+6	; 0x06
 a0c:	37 81       	ldd	r19, Z+7	; 0x07
 a0e:	2f 5f       	subi	r18, 0xFF	; 255
 a10:	3f 4f       	sbci	r19, 0xFF	; 255
 a12:	37 83       	std	Z+7, r19	; 0x07
 a14:	26 83       	std	Z+6, r18	; 0x06
 a16:	14 c0       	rjmp	.+40     	; 0xa40 <fputc+0x6e>
 a18:	8b 01       	movw	r16, r22
 a1a:	ec 01       	movw	r28, r24
 a1c:	fb 01       	movw	r30, r22
 a1e:	00 84       	ldd	r0, Z+8	; 0x08
 a20:	f1 85       	ldd	r31, Z+9	; 0x09
 a22:	e0 2d       	mov	r30, r0
 a24:	09 95       	icall
 a26:	89 2b       	or	r24, r25
 a28:	e1 f6       	brne	.-72     	; 0x9e2 <fputc+0x10>
 a2a:	d8 01       	movw	r26, r16
 a2c:	16 96       	adiw	r26, 0x06	; 6
 a2e:	8d 91       	ld	r24, X+
 a30:	9c 91       	ld	r25, X
 a32:	17 97       	sbiw	r26, 0x07	; 7
 a34:	01 96       	adiw	r24, 0x01	; 1
 a36:	17 96       	adiw	r26, 0x07	; 7
 a38:	9c 93       	st	X, r25
 a3a:	8e 93       	st	-X, r24
 a3c:	16 97       	sbiw	r26, 0x06	; 6
 a3e:	ce 01       	movw	r24, r28
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	1f 91       	pop	r17
 a46:	0f 91       	pop	r16
 a48:	08 95       	ret

00000a4a <__ultoa_invert>:
 a4a:	fa 01       	movw	r30, r20
 a4c:	aa 27       	eor	r26, r26
 a4e:	28 30       	cpi	r18, 0x08	; 8
 a50:	51 f1       	breq	.+84     	; 0xaa6 <__ultoa_invert+0x5c>
 a52:	20 31       	cpi	r18, 0x10	; 16
 a54:	81 f1       	breq	.+96     	; 0xab6 <__ultoa_invert+0x6c>
 a56:	e8 94       	clt
 a58:	6f 93       	push	r22
 a5a:	6e 7f       	andi	r22, 0xFE	; 254
 a5c:	6e 5f       	subi	r22, 0xFE	; 254
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	af 4f       	sbci	r26, 0xFF	; 255
 a66:	b1 e0       	ldi	r27, 0x01	; 1
 a68:	3e d0       	rcall	.+124    	; 0xae6 <__ultoa_invert+0x9c>
 a6a:	b4 e0       	ldi	r27, 0x04	; 4
 a6c:	3c d0       	rcall	.+120    	; 0xae6 <__ultoa_invert+0x9c>
 a6e:	67 0f       	add	r22, r23
 a70:	78 1f       	adc	r23, r24
 a72:	89 1f       	adc	r24, r25
 a74:	9a 1f       	adc	r25, r26
 a76:	a1 1d       	adc	r26, r1
 a78:	68 0f       	add	r22, r24
 a7a:	79 1f       	adc	r23, r25
 a7c:	8a 1f       	adc	r24, r26
 a7e:	91 1d       	adc	r25, r1
 a80:	a1 1d       	adc	r26, r1
 a82:	6a 0f       	add	r22, r26
 a84:	71 1d       	adc	r23, r1
 a86:	81 1d       	adc	r24, r1
 a88:	91 1d       	adc	r25, r1
 a8a:	a1 1d       	adc	r26, r1
 a8c:	20 d0       	rcall	.+64     	; 0xace <__ultoa_invert+0x84>
 a8e:	09 f4       	brne	.+2      	; 0xa92 <__ultoa_invert+0x48>
 a90:	68 94       	set
 a92:	3f 91       	pop	r19
 a94:	2a e0       	ldi	r18, 0x0A	; 10
 a96:	26 9f       	mul	r18, r22
 a98:	11 24       	eor	r1, r1
 a9a:	30 19       	sub	r19, r0
 a9c:	30 5d       	subi	r19, 0xD0	; 208
 a9e:	31 93       	st	Z+, r19
 aa0:	de f6       	brtc	.-74     	; 0xa58 <__ultoa_invert+0xe>
 aa2:	cf 01       	movw	r24, r30
 aa4:	08 95       	ret
 aa6:	46 2f       	mov	r20, r22
 aa8:	47 70       	andi	r20, 0x07	; 7
 aaa:	40 5d       	subi	r20, 0xD0	; 208
 aac:	41 93       	st	Z+, r20
 aae:	b3 e0       	ldi	r27, 0x03	; 3
 ab0:	0f d0       	rcall	.+30     	; 0xad0 <__ultoa_invert+0x86>
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__ultoa_invert+0x5c>
 ab4:	f6 cf       	rjmp	.-20     	; 0xaa2 <__ultoa_invert+0x58>
 ab6:	46 2f       	mov	r20, r22
 ab8:	4f 70       	andi	r20, 0x0F	; 15
 aba:	40 5d       	subi	r20, 0xD0	; 208
 abc:	4a 33       	cpi	r20, 0x3A	; 58
 abe:	18 f0       	brcs	.+6      	; 0xac6 <__ultoa_invert+0x7c>
 ac0:	49 5d       	subi	r20, 0xD9	; 217
 ac2:	31 fd       	sbrc	r19, 1
 ac4:	40 52       	subi	r20, 0x20	; 32
 ac6:	41 93       	st	Z+, r20
 ac8:	02 d0       	rcall	.+4      	; 0xace <__ultoa_invert+0x84>
 aca:	a9 f7       	brne	.-22     	; 0xab6 <__ultoa_invert+0x6c>
 acc:	ea cf       	rjmp	.-44     	; 0xaa2 <__ultoa_invert+0x58>
 ace:	b4 e0       	ldi	r27, 0x04	; 4
 ad0:	a6 95       	lsr	r26
 ad2:	97 95       	ror	r25
 ad4:	87 95       	ror	r24
 ad6:	77 95       	ror	r23
 ad8:	67 95       	ror	r22
 ada:	ba 95       	dec	r27
 adc:	c9 f7       	brne	.-14     	; 0xad0 <__ultoa_invert+0x86>
 ade:	00 97       	sbiw	r24, 0x00	; 0
 ae0:	61 05       	cpc	r22, r1
 ae2:	71 05       	cpc	r23, r1
 ae4:	08 95       	ret
 ae6:	9b 01       	movw	r18, r22
 ae8:	ac 01       	movw	r20, r24
 aea:	0a 2e       	mov	r0, r26
 aec:	06 94       	lsr	r0
 aee:	57 95       	ror	r21
 af0:	47 95       	ror	r20
 af2:	37 95       	ror	r19
 af4:	27 95       	ror	r18
 af6:	ba 95       	dec	r27
 af8:	c9 f7       	brne	.-14     	; 0xaec <__ultoa_invert+0xa2>
 afa:	62 0f       	add	r22, r18
 afc:	73 1f       	adc	r23, r19
 afe:	84 1f       	adc	r24, r20
 b00:	95 1f       	adc	r25, r21
 b02:	a0 1d       	adc	r26, r0
 b04:	08 95       	ret

00000b06 <__prologue_saves__>:
 b06:	2f 92       	push	r2
 b08:	3f 92       	push	r3
 b0a:	4f 92       	push	r4
 b0c:	5f 92       	push	r5
 b0e:	6f 92       	push	r6
 b10:	7f 92       	push	r7
 b12:	8f 92       	push	r8
 b14:	9f 92       	push	r9
 b16:	af 92       	push	r10
 b18:	bf 92       	push	r11
 b1a:	cf 92       	push	r12
 b1c:	df 92       	push	r13
 b1e:	ef 92       	push	r14
 b20:	ff 92       	push	r15
 b22:	0f 93       	push	r16
 b24:	1f 93       	push	r17
 b26:	cf 93       	push	r28
 b28:	df 93       	push	r29
 b2a:	cd b7       	in	r28, 0x3d	; 61
 b2c:	de b7       	in	r29, 0x3e	; 62
 b2e:	ca 1b       	sub	r28, r26
 b30:	db 0b       	sbc	r29, r27
 b32:	0f b6       	in	r0, 0x3f	; 63
 b34:	f8 94       	cli
 b36:	de bf       	out	0x3e, r29	; 62
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	cd bf       	out	0x3d, r28	; 61
 b3c:	09 94       	ijmp

00000b3e <__epilogue_restores__>:
 b3e:	2a 88       	ldd	r2, Y+18	; 0x12
 b40:	39 88       	ldd	r3, Y+17	; 0x11
 b42:	48 88       	ldd	r4, Y+16	; 0x10
 b44:	5f 84       	ldd	r5, Y+15	; 0x0f
 b46:	6e 84       	ldd	r6, Y+14	; 0x0e
 b48:	7d 84       	ldd	r7, Y+13	; 0x0d
 b4a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b4c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b4e:	aa 84       	ldd	r10, Y+10	; 0x0a
 b50:	b9 84       	ldd	r11, Y+9	; 0x09
 b52:	c8 84       	ldd	r12, Y+8	; 0x08
 b54:	df 80       	ldd	r13, Y+7	; 0x07
 b56:	ee 80       	ldd	r14, Y+6	; 0x06
 b58:	fd 80       	ldd	r15, Y+5	; 0x05
 b5a:	0c 81       	ldd	r16, Y+4	; 0x04
 b5c:	1b 81       	ldd	r17, Y+3	; 0x03
 b5e:	aa 81       	ldd	r26, Y+2	; 0x02
 b60:	b9 81       	ldd	r27, Y+1	; 0x01
 b62:	ce 0f       	add	r28, r30
 b64:	d1 1d       	adc	r29, r1
 b66:	0f b6       	in	r0, 0x3f	; 63
 b68:	f8 94       	cli
 b6a:	de bf       	out	0x3e, r29	; 62
 b6c:	0f be       	out	0x3f, r0	; 63
 b6e:	cd bf       	out	0x3d, r28	; 61
 b70:	ed 01       	movw	r28, r26
 b72:	08 95       	ret

00000b74 <_exit>:
 b74:	f8 94       	cli

00000b76 <__stop_program>:
 b76:	ff cf       	rjmp	.-2      	; 0xb76 <__stop_program>
