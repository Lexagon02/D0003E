
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000a5a  00000ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2d  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  00001809  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044d  00000000  00000000  000021a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ee  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000677  00000000  00000000  00002c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000032a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea e5       	ldi	r30, 0x5A	; 90
  70:	fa e0       	ldi	r31, 0x0A	; 10
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  82:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <LCD_Init>:
}

void LCD_Init(void)
    {

    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0) |(1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  8a:	87 eb       	ldi	r24, 0xB7	; 183
  8c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

    LCDFRR = (0<<LCDPS2) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  90:	87 e0       	ldi	r24, 0x07	; 7
  92:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    
    LCDCRA =  (1<<LCDEN); // LCDCRA |= 0x80 ----> ENABLE DISPLAY!
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  a2:	08 95       	ret

000000a4 <writeChar>:
        0x1f51, //8
        0x1b51 //9
};

void writeChar(char ch, uint8_t pos)
{   if (!(ch >= 48 && ch<=57))
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	28 97       	sbiw	r28, 0x08	; 8
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	90 ed       	ldi	r25, 0xD0	; 208
  ba:	98 0f       	add	r25, r24
  bc:	9a 30       	cpi	r25, 0x0A	; 10
  be:	08 f0       	brcs	.+2      	; 0xc2 <writeChar+0x1e>
  c0:	46 c0       	rjmp	.+140    	; 0x14e <writeChar+0xaa>
		uint8_t nibbles[4];
		uint16_t fontValue;
	volatile uint8_t *ptr; } regz;
	regz registers;
	
	registers.fontValue=sourceCodeCharacter[9-(57-ch)], registers.ptr=(uint8_t*)0xEC + pos/2;
  c2:	e8 2f       	mov	r30, r24
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e0 56       	subi	r30, 0x60	; 96
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	80 81       	ld	r24, Z
  d0:	91 81       	ldd	r25, Z+1	; 0x01
  d2:	9e 83       	std	Y+6, r25	; 0x06
  d4:	8d 83       	std	Y+5, r24	; 0x05
  d6:	86 2f       	mov	r24, r22
  d8:	86 95       	lsr	r24
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	84 51       	subi	r24, 0x14	; 20
  de:	9f 4f       	sbci	r25, 0xFF	; 255
  e0:	98 87       	std	Y+8, r25	; 0x08
  e2:	8f 83       	std	Y+7, r24	; 0x07
  e4:	fe 01       	movw	r30, r28
  e6:	31 96       	adiw	r30, 0x01	; 1
  e8:	9e 01       	movw	r18, r28
  ea:	2b 5f       	subi	r18, 0xFB	; 251
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i=0; i< 4; i++){
		*(registers.nibbles+i) = registers.fontValue & 0xf, registers.fontValue >>=4;
		if(!(pos%2)) { *registers.ptr &= ~(0xf), *registers.ptr |= *(registers.nibbles+i); }
  ee:	61 70       	andi	r22, 0x01	; 1
	volatile uint8_t *ptr; } regz;
	regz registers;
	
	registers.fontValue=sourceCodeCharacter[9-(57-ch)], registers.ptr=(uint8_t*)0xEC + pos/2;
	for(uint8_t i=0; i< 4; i++){
		*(registers.nibbles+i) = registers.fontValue & 0xf, registers.fontValue >>=4;
  f0:	8d 81       	ldd	r24, Y+5	; 0x05
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	80 83       	st	Z, r24
  f6:	8d 81       	ldd	r24, Y+5	; 0x05
  f8:	9e 81       	ldd	r25, Y+6	; 0x06
  fa:	92 95       	swap	r25
  fc:	82 95       	swap	r24
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	89 27       	eor	r24, r25
 102:	9f 70       	andi	r25, 0x0F	; 15
 104:	89 27       	eor	r24, r25
 106:	9e 83       	std	Y+6, r25	; 0x06
 108:	8d 83       	std	Y+5, r24	; 0x05
		if(!(pos%2)) { *registers.ptr &= ~(0xf), *registers.ptr |= *(registers.nibbles+i); }
 10a:	61 11       	cpse	r22, r1
 10c:	0a c0       	rjmp	.+20     	; 0x122 <writeChar+0x7e>
 10e:	af 81       	ldd	r26, Y+7	; 0x07
 110:	b8 85       	ldd	r27, Y+8	; 0x08
 112:	8c 91       	ld	r24, X
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	8c 93       	st	X, r24
 118:	9c 91       	ld	r25, X
 11a:	80 81       	ld	r24, Z
 11c:	89 2b       	or	r24, r25
 11e:	8c 93       	st	X, r24
 120:	0d c0       	rjmp	.+26     	; 0x13c <writeChar+0x98>
		else{ *registers.ptr &= ~(0xf0), *registers.ptr |= (*(registers.nibbles+i) << 4); }
 122:	af 81       	ldd	r26, Y+7	; 0x07
 124:	b8 85       	ldd	r27, Y+8	; 0x08
 126:	8c 91       	ld	r24, X
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	8c 93       	st	X, r24
 12c:	4c 91       	ld	r20, X
 12e:	90 81       	ld	r25, Z
 130:	50 e1       	ldi	r21, 0x10	; 16
 132:	95 9f       	mul	r25, r21
 134:	c0 01       	movw	r24, r0
 136:	11 24       	eor	r1, r1
 138:	84 2b       	or	r24, r20
 13a:	8c 93       	st	X, r24
		registers.ptr+=5;
 13c:	8f 81       	ldd	r24, Y+7	; 0x07
 13e:	98 85       	ldd	r25, Y+8	; 0x08
 140:	05 96       	adiw	r24, 0x05	; 5
 142:	98 87       	std	Y+8, r25	; 0x08
 144:	8f 83       	std	Y+7, r24	; 0x07
 146:	31 96       	adiw	r30, 0x01	; 1
		uint16_t fontValue;
	volatile uint8_t *ptr; } regz;
	regz registers;
	
	registers.fontValue=sourceCodeCharacter[9-(57-ch)], registers.ptr=(uint8_t*)0xEC + pos/2;
	for(uint8_t i=0; i< 4; i++){
 148:	e2 17       	cp	r30, r18
 14a:	f3 07       	cpc	r31, r19
 14c:	89 f6       	brne	.-94     	; 0xf0 <writeChar+0x4c>
		*(registers.nibbles+i) = registers.fontValue & 0xf, registers.fontValue >>=4;
		if(!(pos%2)) { *registers.ptr &= ~(0xf), *registers.ptr |= *(registers.nibbles+i); }
		else{ *registers.ptr &= ~(0xf0), *registers.ptr |= (*(registers.nibbles+i) << 4); }
		registers.ptr+=5;
	}
} // struct
 14e:	28 96       	adiw	r28, 0x08	; 8
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <clearLCD>:
void clearLCD(void){
	LCDDR0 =0x0;
 160:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	LCDDR5=0x0;
 164:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	LCDDR10=0x0;
 168:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
	LCDDR15=0x0;
 16c:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>

	LCDDR1=0x0;
 170:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
	LCDDR6=0x0;
 174:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
	LCDDR11=0x0;
 178:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
	LCDDR16=0x0;
 17c:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
	
	LCDDR2 =0x0;
 180:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
	LCDDR7=0x0;
 184:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
	LCDDR12=0x0;
 188:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
	LCDDR17=0x0;
 18c:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>

	LCDDR3=0x0;
 190:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
	LCDDR8=0x0;
 194:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
	LCDDR13=0x0;
 198:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
	LCDDR18=0x0;
 19c:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
 1a0:	08 95       	ret

000001a2 <is_prime>:
	char str[size_needed];
	sprintf(str, "%ld", i);
	output(str, size_needed-1);	
}

int is_prime(long i){
 1a2:	8f 92       	push	r8
 1a4:	9f 92       	push	r9
 1a6:	af 92       	push	r10
 1a8:	bf 92       	push	r11
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	6b 01       	movw	r12, r22
 1b8:	7c 01       	movw	r14, r24
   int c;
   for (c = 2; c <= i - 1; c++)
 1ba:	4b 01       	movw	r8, r22
 1bc:	5c 01       	movw	r10, r24
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	88 1a       	sub	r8, r24
 1c2:	91 08       	sbc	r9, r1
 1c4:	a1 08       	sbc	r10, r1
 1c6:	b1 08       	sbc	r11, r1
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	88 16       	cp	r8, r24
 1cc:	91 04       	cpc	r9, r1
 1ce:	a1 04       	cpc	r10, r1
 1d0:	b1 04       	cpc	r11, r1
 1d2:	6c f1       	brlt	.+90     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
   {
      if (i%c == 0)
 1d4:	d7 01       	movw	r26, r14
 1d6:	c6 01       	movw	r24, r12
 1d8:	81 70       	andi	r24, 0x01	; 1
 1da:	99 27       	eor	r25, r25
 1dc:	aa 27       	eor	r26, r26
 1de:	b0 78       	andi	r27, 0x80	; 128
 1e0:	bb 23       	and	r27, r27
 1e2:	54 f4       	brge	.+20     	; 0x1f8 <is_prime+0x56>
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	a1 09       	sbc	r26, r1
 1e8:	b1 09       	sbc	r27, r1
 1ea:	8e 6f       	ori	r24, 0xFE	; 254
 1ec:	9f 6f       	ori	r25, 0xFF	; 255
 1ee:	af 6f       	ori	r26, 0xFF	; 255
 1f0:	bf 6f       	ori	r27, 0xFF	; 255
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	a1 1d       	adc	r26, r1
 1f6:	b1 1d       	adc	r27, r1
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	09 f1       	breq	.+66     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 200:	c2 e0       	ldi	r28, 0x02	; 2
 202:	d0 e0       	ldi	r29, 0x00	; 0
 204:	08 c0       	rjmp	.+16     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 206:	c7 01       	movw	r24, r14
 208:	b6 01       	movw	r22, r12
 20a:	0e 94 00 02 	call	0x400	; 0x400 <__divmodsi4>
 20e:	67 2b       	or	r22, r23
 210:	68 2b       	or	r22, r24
 212:	69 2b       	or	r22, r25
 214:	c9 f0       	breq	.+50     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
	output(str, size_needed-1);	
}

int is_prime(long i){
   int c;
   for (c = 2; c <= i - 1; c++)
 216:	21 96       	adiw	r28, 0x01	; 1
 218:	9e 01       	movw	r18, r28
 21a:	0d 2e       	mov	r0, r29
 21c:	00 0c       	add	r0, r0
 21e:	44 0b       	sbc	r20, r20
 220:	55 0b       	sbc	r21, r21
 222:	82 16       	cp	r8, r18
 224:	93 06       	cpc	r9, r19
 226:	a4 06       	cpc	r10, r20
 228:	b5 06       	cpc	r11, r21
 22a:	6c f7       	brge	.-38     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 22c:	04 c0       	rjmp	.+8      	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 22e:	22 e0       	ldi	r18, 0x02	; 2
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
   {
      if (i%c == 0)
     return 0;
   }
   if (c == i)
 236:	c2 16       	cp	r12, r18
 238:	d3 06       	cpc	r13, r19
 23a:	e4 06       	cpc	r14, r20
 23c:	f5 06       	cpc	r15, r21
 23e:	39 f0       	breq	.+14     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
      return 1;
} 
 240:	08 c0       	rjmp	.+16     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
int is_prime(long i){
   int c;
   for (c = 2; c <= i - 1; c++)
   {
      if (i%c == 0)
     return 0;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	05 c0       	rjmp	.+10     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
   }
   if (c == i)
      return 1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
} 
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	af 90       	pop	r10
 262:	9f 90       	pop	r9
 264:	8f 90       	pop	r8
 266:	08 95       	ret

00000268 <output>:

void output(char arr[], int length)
{
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
	int index = 0;
	int lastIndex = length;
	int pos = 0;
	index = length-6;
 276:	eb 01       	movw	r28, r22
 278:	26 97       	sbiw	r28, 0x06	; 6
	while(index <= lastIndex)
 27a:	6c 17       	cp	r22, r28
 27c:	7d 07       	cpc	r23, r29
 27e:	84 f0       	brlt	.+32     	; 0x2a0 <output+0x38>
 280:	7b 01       	movw	r14, r22
 282:	6c 01       	movw	r12, r24
 284:	c8 0f       	add	r28, r24
 286:	d9 1f       	adc	r29, r25
 288:	10 e0       	ldi	r17, 0x00	; 0
	{
		char ch = arr[index];
		writeChar(ch, pos);
 28a:	61 2f       	mov	r22, r17
 28c:	89 91       	ld	r24, Y+
 28e:	0e 94 52 00 	call	0xa4	; 0xa4 <writeChar>
 292:	1f 5f       	subi	r17, 0xFF	; 255
{
	int index = 0;
	int lastIndex = length;
	int pos = 0;
	index = length-6;
	while(index <= lastIndex)
 294:	9e 01       	movw	r18, r28
 296:	2c 19       	sub	r18, r12
 298:	3d 09       	sbc	r19, r13
 29a:	e2 16       	cp	r14, r18
 29c:	f3 06       	cpc	r15, r19
 29e:	ac f7       	brge	.-22     	; 0x28a <output+0x22>
		char ch = arr[index];
		writeChar(ch, pos);
		index++;
		pos++;
	}
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	df 90       	pop	r13
 2ac:	cf 90       	pop	r12
 2ae:	08 95       	ret

000002b0 <writeLong>:
	LCDDR8=0x0;
	LCDDR13=0x0;
	LCDDR18=0x0;
}

void writeLong(long i){
 2b0:	4f 92       	push	r4
 2b2:	5f 92       	push	r5
 2b4:	6f 92       	push	r6
 2b6:	7f 92       	push	r7
 2b8:	8f 92       	push	r8
 2ba:	9f 92       	push	r9
 2bc:	af 92       	push	r10
 2be:	bf 92       	push	r11
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	2b 01       	movw	r4, r22
 2d6:	3c 01       	movw	r6, r24
	} while (value_copy != 0);

	char str[size_needed];
	sprintf(str, "%ld", i);
	output(str, size_needed-1);	
}
 2d8:	cd b6       	in	r12, 0x3d	; 61
 2da:	de b6       	in	r13, 0x3e	; 62

void writeLong(long i){
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
	if (value_copy < 0) size_needed++; // Only needed for signed types.
 2dc:	dc 01       	movw	r26, r24
 2de:	cb 01       	movw	r24, r22
 2e0:	80 95       	com	r24
 2e2:	90 95       	com	r25
 2e4:	a0 95       	com	r26
 2e6:	b0 95       	com	r27
 2e8:	88 27       	eor	r24, r24
 2ea:	b7 fd       	sbrc	r27, 7
 2ec:	83 95       	inc	r24
 2ee:	99 27       	eor	r25, r25
 2f0:	aa 27       	eor	r26, r26
 2f2:	bb 27       	eor	r27, r27
 2f4:	02 e0       	ldi	r16, 0x02	; 2
 2f6:	10 e0       	ldi	r17, 0x00	; 0
 2f8:	08 1b       	sub	r16, r24
 2fa:	19 0b       	sbc	r17, r25
}

void writeLong(long i){
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
 2fc:	a3 01       	movw	r20, r6
 2fe:	92 01       	movw	r18, r4
	if (value_copy < 0) size_needed++; // Only needed for signed types.
	do {
	size_needed++; // Add 1 per digit.
	value_copy /= 10;
 300:	0f 2e       	mov	r0, r31
 302:	fa e0       	ldi	r31, 0x0A	; 10
 304:	8f 2e       	mov	r8, r31
 306:	91 2c       	mov	r9, r1
 308:	a1 2c       	mov	r10, r1
 30a:	b1 2c       	mov	r11, r1
 30c:	f0 2d       	mov	r31, r0
 30e:	01 c0       	rjmp	.+2      	; 0x312 <writeLong+0x62>
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
	if (value_copy < 0) size_needed++; // Only needed for signed types.
	do {
	size_needed++; // Add 1 per digit.
 310:	87 01       	movw	r16, r14
 312:	78 01       	movw	r14, r16
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	e8 1a       	sub	r14, r24
 318:	f8 0a       	sbc	r15, r24
	value_copy /= 10;
 31a:	ca 01       	movw	r24, r20
 31c:	b9 01       	movw	r22, r18
 31e:	a5 01       	movw	r20, r10
 320:	94 01       	movw	r18, r8
 322:	0e 94 00 02 	call	0x400	; 0x400 <__divmodsi4>
	} while (value_copy != 0);
 326:	21 15       	cp	r18, r1
 328:	31 05       	cpc	r19, r1
 32a:	41 05       	cpc	r20, r1
 32c:	51 05       	cpc	r21, r1
 32e:	81 f7       	brne	.-32     	; 0x310 <writeLong+0x60>

	char str[size_needed];
 330:	8d b7       	in	r24, 0x3d	; 61
 332:	9e b7       	in	r25, 0x3e	; 62
 334:	8e 19       	sub	r24, r14
 336:	9f 09       	sbc	r25, r15
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	9e bf       	out	0x3e, r25	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	8d bf       	out	0x3d, r24	; 61
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	7c 01       	movw	r14, r24
	sprintf(str, "%ld", i);
 346:	7f 92       	push	r7
 348:	6f 92       	push	r6
 34a:	5f 92       	push	r5
 34c:	4f 92       	push	r4
 34e:	84 e1       	ldi	r24, 0x14	; 20
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	9f 93       	push	r25
 354:	8f 93       	push	r24
 356:	ff 92       	push	r15
 358:	ef 92       	push	r14
 35a:	0e 94 41 02 	call	0x482	; 0x482 <sprintf>
	output(str, size_needed-1);	
 35e:	b8 01       	movw	r22, r16
 360:	8e 2d       	mov	r24, r14
 362:	9f 2d       	mov	r25, r15
 364:	0e 94 34 01 	call	0x268	; 0x268 <output>
}
 368:	8d b7       	in	r24, 0x3d	; 61
 36a:	9e b7       	in	r25, 0x3e	; 62
 36c:	08 96       	adiw	r24, 0x08	; 8
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	9e bf       	out	0x3e, r25	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	8d bf       	out	0x3d, r24	; 61
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de be       	out	0x3e, r13	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd be       	out	0x3d, r12	; 61
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	df 90       	pop	r13
 390:	cf 90       	pop	r12
 392:	bf 90       	pop	r11
 394:	af 90       	pop	r10
 396:	9f 90       	pop	r9
 398:	8f 90       	pop	r8
 39a:	7f 90       	pop	r7
 39c:	6f 90       	pop	r6
 39e:	5f 90       	pop	r5
 3a0:	4f 90       	pop	r4
 3a2:	08 95       	ret

000003a4 <main>:
}

int main(void)
{
	USART1_init();
	LCD_Init();
 3a4:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Init>
	{
		char arr[10] = "0123455555";
		int length = sizeof(arr)/sizeof(arr[0]);
		//output(arr, length);
		//_delay_ms(10000); //delay 0.5 sec
		clearLCD();
 3a8:	0e 94 b0 00 	call	0x160	; 0x160 <clearLCD>
		//writeLong(12345678);
		//_delay_ms(50000); //delay 0.5 sec
		for(long i=3; i<100000; i++){
 3ac:	0f 2e       	mov	r0, r31
 3ae:	f3 e0       	ldi	r31, 0x03	; 3
 3b0:	cf 2e       	mov	r12, r31
 3b2:	d1 2c       	mov	r13, r1
 3b4:	e1 2c       	mov	r14, r1
 3b6:	f1 2c       	mov	r15, r1
 3b8:	f0 2d       	mov	r31, r0
			if(is_prime(i) == 1){
 3ba:	c7 01       	movw	r24, r14
 3bc:	b6 01       	movw	r22, r12
 3be:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <is_prime>
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	79 f4       	brne	.+30     	; 0x3e4 <main+0x40>
				writeLong(i);
 3c6:	c7 01       	movw	r24, r14
 3c8:	b6 01       	movw	r22, r12
 3ca:	0e 94 58 01 	call	0x2b0	; 0x2b0 <writeLong>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	2f e3       	ldi	r18, 0x3F	; 63
 3d0:	82 e4       	ldi	r24, 0x42	; 66
 3d2:	9f e0       	ldi	r25, 0x0F	; 15
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0x30>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x3a>
 3de:	00 00       	nop
				_delay_ms(5000);
				clearLCD();
 3e0:	0e 94 b0 00 	call	0x160	; 0x160 <clearLCD>
		//output(arr, length);
		//_delay_ms(10000); //delay 0.5 sec
		clearLCD();
		//writeLong(12345678);
		//_delay_ms(50000); //delay 0.5 sec
		for(long i=3; i<100000; i++){
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	c2 1a       	sub	r12, r18
 3e8:	d2 0a       	sbc	r13, r18
 3ea:	e2 0a       	sbc	r14, r18
 3ec:	f2 0a       	sbc	r15, r18
 3ee:	80 ea       	ldi	r24, 0xA0	; 160
 3f0:	c8 16       	cp	r12, r24
 3f2:	86 e8       	ldi	r24, 0x86	; 134
 3f4:	d8 06       	cpc	r13, r24
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	e8 06       	cpc	r14, r24
 3fa:	f1 04       	cpc	r15, r1
 3fc:	f1 f6       	brne	.-68     	; 0x3ba <main+0x16>
 3fe:	d4 cf       	rjmp	.-88     	; 0x3a8 <main+0x4>

00000400 <__divmodsi4>:
 400:	05 2e       	mov	r0, r21
 402:	97 fb       	bst	r25, 7
 404:	1e f4       	brtc	.+6      	; 0x40c <__divmodsi4+0xc>
 406:	00 94       	com	r0
 408:	0e 94 17 02 	call	0x42e	; 0x42e <__negsi2>
 40c:	57 fd       	sbrc	r21, 7
 40e:	07 d0       	rcall	.+14     	; 0x41e <__divmodsi4_neg2>
 410:	0e 94 1f 02 	call	0x43e	; 0x43e <__udivmodsi4>
 414:	07 fc       	sbrc	r0, 7
 416:	03 d0       	rcall	.+6      	; 0x41e <__divmodsi4_neg2>
 418:	4e f4       	brtc	.+18     	; 0x42c <__divmodsi4_exit>
 41a:	0c 94 17 02 	jmp	0x42e	; 0x42e <__negsi2>

0000041e <__divmodsi4_neg2>:
 41e:	50 95       	com	r21
 420:	40 95       	com	r20
 422:	30 95       	com	r19
 424:	21 95       	neg	r18
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	4f 4f       	sbci	r20, 0xFF	; 255
 42a:	5f 4f       	sbci	r21, 0xFF	; 255

0000042c <__divmodsi4_exit>:
 42c:	08 95       	ret

0000042e <__negsi2>:
 42e:	90 95       	com	r25
 430:	80 95       	com	r24
 432:	70 95       	com	r23
 434:	61 95       	neg	r22
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	08 95       	ret

0000043e <__udivmodsi4>:
 43e:	a1 e2       	ldi	r26, 0x21	; 33
 440:	1a 2e       	mov	r1, r26
 442:	aa 1b       	sub	r26, r26
 444:	bb 1b       	sub	r27, r27
 446:	fd 01       	movw	r30, r26
 448:	0d c0       	rjmp	.+26     	; 0x464 <__udivmodsi4_ep>

0000044a <__udivmodsi4_loop>:
 44a:	aa 1f       	adc	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	ee 1f       	adc	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	a2 17       	cp	r26, r18
 454:	b3 07       	cpc	r27, r19
 456:	e4 07       	cpc	r30, r20
 458:	f5 07       	cpc	r31, r21
 45a:	20 f0       	brcs	.+8      	; 0x464 <__udivmodsi4_ep>
 45c:	a2 1b       	sub	r26, r18
 45e:	b3 0b       	sbc	r27, r19
 460:	e4 0b       	sbc	r30, r20
 462:	f5 0b       	sbc	r31, r21

00000464 <__udivmodsi4_ep>:
 464:	66 1f       	adc	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	1a 94       	dec	r1
 46e:	69 f7       	brne	.-38     	; 0x44a <__udivmodsi4_loop>
 470:	60 95       	com	r22
 472:	70 95       	com	r23
 474:	80 95       	com	r24
 476:	90 95       	com	r25
 478:	9b 01       	movw	r18, r22
 47a:	ac 01       	movw	r20, r24
 47c:	bd 01       	movw	r22, r26
 47e:	cf 01       	movw	r24, r30
 480:	08 95       	ret

00000482 <sprintf>:
 482:	ae e0       	ldi	r26, 0x0E	; 14
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	e7 e4       	ldi	r30, 0x47	; 71
 488:	f2 e0       	ldi	r31, 0x02	; 2
 48a:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__prologue_saves__+0x1c>
 48e:	0d 89       	ldd	r16, Y+21	; 0x15
 490:	1e 89       	ldd	r17, Y+22	; 0x16
 492:	86 e0       	ldi	r24, 0x06	; 6
 494:	8c 83       	std	Y+4, r24	; 0x04
 496:	1a 83       	std	Y+2, r17	; 0x02
 498:	09 83       	std	Y+1, r16	; 0x01
 49a:	8f ef       	ldi	r24, 0xFF	; 255
 49c:	9f e7       	ldi	r25, 0x7F	; 127
 49e:	9e 83       	std	Y+6, r25	; 0x06
 4a0:	8d 83       	std	Y+5, r24	; 0x05
 4a2:	ae 01       	movw	r20, r28
 4a4:	47 5e       	subi	r20, 0xE7	; 231
 4a6:	5f 4f       	sbci	r21, 0xFF	; 255
 4a8:	6f 89       	ldd	r22, Y+23	; 0x17
 4aa:	78 8d       	ldd	r23, Y+24	; 0x18
 4ac:	ce 01       	movw	r24, r28
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vfprintf>
 4b4:	ef 81       	ldd	r30, Y+7	; 0x07
 4b6:	f8 85       	ldd	r31, Y+8	; 0x08
 4b8:	e0 0f       	add	r30, r16
 4ba:	f1 1f       	adc	r31, r17
 4bc:	10 82       	st	Z, r1
 4be:	2e 96       	adiw	r28, 0x0e	; 14
 4c0:	e4 e0       	ldi	r30, 0x04	; 4
 4c2:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__epilogue_restores__+0x1c>

000004c6 <vfprintf>:
 4c6:	ab e0       	ldi	r26, 0x0B	; 11
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e9 e6       	ldi	r30, 0x69	; 105
 4cc:	f2 e0       	ldi	r31, 0x02	; 2
 4ce:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__prologue_saves__>
 4d2:	6c 01       	movw	r12, r24
 4d4:	7b 01       	movw	r14, r22
 4d6:	8a 01       	movw	r16, r20
 4d8:	fc 01       	movw	r30, r24
 4da:	17 82       	std	Z+7, r1	; 0x07
 4dc:	16 82       	std	Z+6, r1	; 0x06
 4de:	83 81       	ldd	r24, Z+3	; 0x03
 4e0:	81 ff       	sbrs	r24, 1
 4e2:	cc c1       	rjmp	.+920    	; 0x87c <__stack+0x37d>
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	3c 01       	movw	r6, r24
 4ea:	f6 01       	movw	r30, r12
 4ec:	93 81       	ldd	r25, Z+3	; 0x03
 4ee:	f7 01       	movw	r30, r14
 4f0:	93 fd       	sbrc	r25, 3
 4f2:	85 91       	lpm	r24, Z+
 4f4:	93 ff       	sbrs	r25, 3
 4f6:	81 91       	ld	r24, Z+
 4f8:	7f 01       	movw	r14, r30
 4fa:	88 23       	and	r24, r24
 4fc:	09 f4       	brne	.+2      	; 0x500 <__stack+0x1>
 4fe:	ba c1       	rjmp	.+884    	; 0x874 <__stack+0x375>
 500:	85 32       	cpi	r24, 0x25	; 37
 502:	39 f4       	brne	.+14     	; 0x512 <__stack+0x13>
 504:	93 fd       	sbrc	r25, 3
 506:	85 91       	lpm	r24, Z+
 508:	93 ff       	sbrs	r25, 3
 50a:	81 91       	ld	r24, Z+
 50c:	7f 01       	movw	r14, r30
 50e:	85 32       	cpi	r24, 0x25	; 37
 510:	29 f4       	brne	.+10     	; 0x51c <__stack+0x1d>
 512:	b6 01       	movw	r22, r12
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 51a:	e7 cf       	rjmp	.-50     	; 0x4ea <vfprintf+0x24>
 51c:	91 2c       	mov	r9, r1
 51e:	21 2c       	mov	r2, r1
 520:	31 2c       	mov	r3, r1
 522:	ff e1       	ldi	r31, 0x1F	; 31
 524:	f3 15       	cp	r31, r3
 526:	d8 f0       	brcs	.+54     	; 0x55e <__stack+0x5f>
 528:	8b 32       	cpi	r24, 0x2B	; 43
 52a:	79 f0       	breq	.+30     	; 0x54a <__stack+0x4b>
 52c:	38 f4       	brcc	.+14     	; 0x53c <__stack+0x3d>
 52e:	80 32       	cpi	r24, 0x20	; 32
 530:	79 f0       	breq	.+30     	; 0x550 <__stack+0x51>
 532:	83 32       	cpi	r24, 0x23	; 35
 534:	a1 f4       	brne	.+40     	; 0x55e <__stack+0x5f>
 536:	23 2d       	mov	r18, r3
 538:	20 61       	ori	r18, 0x10	; 16
 53a:	1d c0       	rjmp	.+58     	; 0x576 <__stack+0x77>
 53c:	8d 32       	cpi	r24, 0x2D	; 45
 53e:	61 f0       	breq	.+24     	; 0x558 <__stack+0x59>
 540:	80 33       	cpi	r24, 0x30	; 48
 542:	69 f4       	brne	.+26     	; 0x55e <__stack+0x5f>
 544:	23 2d       	mov	r18, r3
 546:	21 60       	ori	r18, 0x01	; 1
 548:	16 c0       	rjmp	.+44     	; 0x576 <__stack+0x77>
 54a:	83 2d       	mov	r24, r3
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	38 2e       	mov	r3, r24
 550:	e3 2d       	mov	r30, r3
 552:	e4 60       	ori	r30, 0x04	; 4
 554:	3e 2e       	mov	r3, r30
 556:	2a c0       	rjmp	.+84     	; 0x5ac <__stack+0xad>
 558:	f3 2d       	mov	r31, r3
 55a:	f8 60       	ori	r31, 0x08	; 8
 55c:	1d c0       	rjmp	.+58     	; 0x598 <__stack+0x99>
 55e:	37 fc       	sbrc	r3, 7
 560:	2d c0       	rjmp	.+90     	; 0x5bc <__stack+0xbd>
 562:	20 ed       	ldi	r18, 0xD0	; 208
 564:	28 0f       	add	r18, r24
 566:	2a 30       	cpi	r18, 0x0A	; 10
 568:	40 f0       	brcs	.+16     	; 0x57a <__stack+0x7b>
 56a:	8e 32       	cpi	r24, 0x2E	; 46
 56c:	b9 f4       	brne	.+46     	; 0x59c <__stack+0x9d>
 56e:	36 fc       	sbrc	r3, 6
 570:	81 c1       	rjmp	.+770    	; 0x874 <__stack+0x375>
 572:	23 2d       	mov	r18, r3
 574:	20 64       	ori	r18, 0x40	; 64
 576:	32 2e       	mov	r3, r18
 578:	19 c0       	rjmp	.+50     	; 0x5ac <__stack+0xad>
 57a:	36 fe       	sbrs	r3, 6
 57c:	06 c0       	rjmp	.+12     	; 0x58a <__stack+0x8b>
 57e:	8a e0       	ldi	r24, 0x0A	; 10
 580:	98 9e       	mul	r9, r24
 582:	20 0d       	add	r18, r0
 584:	11 24       	eor	r1, r1
 586:	92 2e       	mov	r9, r18
 588:	11 c0       	rjmp	.+34     	; 0x5ac <__stack+0xad>
 58a:	ea e0       	ldi	r30, 0x0A	; 10
 58c:	2e 9e       	mul	r2, r30
 58e:	20 0d       	add	r18, r0
 590:	11 24       	eor	r1, r1
 592:	22 2e       	mov	r2, r18
 594:	f3 2d       	mov	r31, r3
 596:	f0 62       	ori	r31, 0x20	; 32
 598:	3f 2e       	mov	r3, r31
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__stack+0xad>
 59c:	8c 36       	cpi	r24, 0x6C	; 108
 59e:	21 f4       	brne	.+8      	; 0x5a8 <__stack+0xa9>
 5a0:	83 2d       	mov	r24, r3
 5a2:	80 68       	ori	r24, 0x80	; 128
 5a4:	38 2e       	mov	r3, r24
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <__stack+0xad>
 5a8:	88 36       	cpi	r24, 0x68	; 104
 5aa:	41 f4       	brne	.+16     	; 0x5bc <__stack+0xbd>
 5ac:	f7 01       	movw	r30, r14
 5ae:	93 fd       	sbrc	r25, 3
 5b0:	85 91       	lpm	r24, Z+
 5b2:	93 ff       	sbrs	r25, 3
 5b4:	81 91       	ld	r24, Z+
 5b6:	7f 01       	movw	r14, r30
 5b8:	81 11       	cpse	r24, r1
 5ba:	b3 cf       	rjmp	.-154    	; 0x522 <__stack+0x23>
 5bc:	98 2f       	mov	r25, r24
 5be:	9f 7d       	andi	r25, 0xDF	; 223
 5c0:	95 54       	subi	r25, 0x45	; 69
 5c2:	93 30       	cpi	r25, 0x03	; 3
 5c4:	28 f4       	brcc	.+10     	; 0x5d0 <__stack+0xd1>
 5c6:	0c 5f       	subi	r16, 0xFC	; 252
 5c8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ca:	9f e3       	ldi	r25, 0x3F	; 63
 5cc:	99 83       	std	Y+1, r25	; 0x01
 5ce:	0d c0       	rjmp	.+26     	; 0x5ea <__stack+0xeb>
 5d0:	83 36       	cpi	r24, 0x63	; 99
 5d2:	31 f0       	breq	.+12     	; 0x5e0 <__stack+0xe1>
 5d4:	83 37       	cpi	r24, 0x73	; 115
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <__stack+0xf5>
 5d8:	83 35       	cpi	r24, 0x53	; 83
 5da:	09 f0       	breq	.+2      	; 0x5de <__stack+0xdf>
 5dc:	59 c0       	rjmp	.+178    	; 0x690 <__stack+0x191>
 5de:	21 c0       	rjmp	.+66     	; 0x622 <__stack+0x123>
 5e0:	f8 01       	movw	r30, r16
 5e2:	80 81       	ld	r24, Z
 5e4:	89 83       	std	Y+1, r24	; 0x01
 5e6:	0e 5f       	subi	r16, 0xFE	; 254
 5e8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ea:	88 24       	eor	r8, r8
 5ec:	83 94       	inc	r8
 5ee:	91 2c       	mov	r9, r1
 5f0:	53 01       	movw	r10, r6
 5f2:	13 c0       	rjmp	.+38     	; 0x61a <__stack+0x11b>
 5f4:	28 01       	movw	r4, r16
 5f6:	f2 e0       	ldi	r31, 0x02	; 2
 5f8:	4f 0e       	add	r4, r31
 5fa:	51 1c       	adc	r5, r1
 5fc:	f8 01       	movw	r30, r16
 5fe:	a0 80       	ld	r10, Z
 600:	b1 80       	ldd	r11, Z+1	; 0x01
 602:	36 fe       	sbrs	r3, 6
 604:	03 c0       	rjmp	.+6      	; 0x60c <__stack+0x10d>
 606:	69 2d       	mov	r22, r9
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <__stack+0x111>
 60c:	6f ef       	ldi	r22, 0xFF	; 255
 60e:	7f ef       	ldi	r23, 0xFF	; 255
 610:	c5 01       	movw	r24, r10
 612:	0e 94 4f 04 	call	0x89e	; 0x89e <strnlen>
 616:	4c 01       	movw	r8, r24
 618:	82 01       	movw	r16, r4
 61a:	f3 2d       	mov	r31, r3
 61c:	ff 77       	andi	r31, 0x7F	; 127
 61e:	3f 2e       	mov	r3, r31
 620:	16 c0       	rjmp	.+44     	; 0x64e <__stack+0x14f>
 622:	28 01       	movw	r4, r16
 624:	22 e0       	ldi	r18, 0x02	; 2
 626:	42 0e       	add	r4, r18
 628:	51 1c       	adc	r5, r1
 62a:	f8 01       	movw	r30, r16
 62c:	a0 80       	ld	r10, Z
 62e:	b1 80       	ldd	r11, Z+1	; 0x01
 630:	36 fe       	sbrs	r3, 6
 632:	03 c0       	rjmp	.+6      	; 0x63a <__stack+0x13b>
 634:	69 2d       	mov	r22, r9
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <__stack+0x13f>
 63a:	6f ef       	ldi	r22, 0xFF	; 255
 63c:	7f ef       	ldi	r23, 0xFF	; 255
 63e:	c5 01       	movw	r24, r10
 640:	0e 94 44 04 	call	0x888	; 0x888 <strnlen_P>
 644:	4c 01       	movw	r8, r24
 646:	f3 2d       	mov	r31, r3
 648:	f0 68       	ori	r31, 0x80	; 128
 64a:	3f 2e       	mov	r3, r31
 64c:	82 01       	movw	r16, r4
 64e:	33 fc       	sbrc	r3, 3
 650:	1b c0       	rjmp	.+54     	; 0x688 <__stack+0x189>
 652:	82 2d       	mov	r24, r2
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	88 16       	cp	r8, r24
 658:	99 06       	cpc	r9, r25
 65a:	b0 f4       	brcc	.+44     	; 0x688 <__stack+0x189>
 65c:	b6 01       	movw	r22, r12
 65e:	80 e2       	ldi	r24, 0x20	; 32
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 666:	2a 94       	dec	r2
 668:	f4 cf       	rjmp	.-24     	; 0x652 <__stack+0x153>
 66a:	f5 01       	movw	r30, r10
 66c:	37 fc       	sbrc	r3, 7
 66e:	85 91       	lpm	r24, Z+
 670:	37 fe       	sbrs	r3, 7
 672:	81 91       	ld	r24, Z+
 674:	5f 01       	movw	r10, r30
 676:	b6 01       	movw	r22, r12
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 67e:	21 10       	cpse	r2, r1
 680:	2a 94       	dec	r2
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	82 1a       	sub	r8, r18
 686:	91 08       	sbc	r9, r1
 688:	81 14       	cp	r8, r1
 68a:	91 04       	cpc	r9, r1
 68c:	71 f7       	brne	.-36     	; 0x66a <__stack+0x16b>
 68e:	e8 c0       	rjmp	.+464    	; 0x860 <__stack+0x361>
 690:	84 36       	cpi	r24, 0x64	; 100
 692:	11 f0       	breq	.+4      	; 0x698 <__stack+0x199>
 694:	89 36       	cpi	r24, 0x69	; 105
 696:	41 f5       	brne	.+80     	; 0x6e8 <__stack+0x1e9>
 698:	f8 01       	movw	r30, r16
 69a:	37 fe       	sbrs	r3, 7
 69c:	07 c0       	rjmp	.+14     	; 0x6ac <__stack+0x1ad>
 69e:	60 81       	ld	r22, Z
 6a0:	71 81       	ldd	r23, Z+1	; 0x01
 6a2:	82 81       	ldd	r24, Z+2	; 0x02
 6a4:	93 81       	ldd	r25, Z+3	; 0x03
 6a6:	0c 5f       	subi	r16, 0xFC	; 252
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <__stack+0x1bd>
 6ac:	60 81       	ld	r22, Z
 6ae:	71 81       	ldd	r23, Z+1	; 0x01
 6b0:	07 2e       	mov	r0, r23
 6b2:	00 0c       	add	r0, r0
 6b4:	88 0b       	sbc	r24, r24
 6b6:	99 0b       	sbc	r25, r25
 6b8:	0e 5f       	subi	r16, 0xFE	; 254
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	f3 2d       	mov	r31, r3
 6be:	ff 76       	andi	r31, 0x6F	; 111
 6c0:	3f 2e       	mov	r3, r31
 6c2:	97 ff       	sbrs	r25, 7
 6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <__stack+0x1d9>
 6c6:	90 95       	com	r25
 6c8:	80 95       	com	r24
 6ca:	70 95       	com	r23
 6cc:	61 95       	neg	r22
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	f0 68       	ori	r31, 0x80	; 128
 6d6:	3f 2e       	mov	r3, r31
 6d8:	2a e0       	ldi	r18, 0x0A	; 10
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	a3 01       	movw	r20, r6
 6de:	0e 94 96 04 	call	0x92c	; 0x92c <__ultoa_invert>
 6e2:	88 2e       	mov	r8, r24
 6e4:	86 18       	sub	r8, r6
 6e6:	45 c0       	rjmp	.+138    	; 0x772 <__stack+0x273>
 6e8:	85 37       	cpi	r24, 0x75	; 117
 6ea:	31 f4       	brne	.+12     	; 0x6f8 <__stack+0x1f9>
 6ec:	23 2d       	mov	r18, r3
 6ee:	2f 7e       	andi	r18, 0xEF	; 239
 6f0:	b2 2e       	mov	r11, r18
 6f2:	2a e0       	ldi	r18, 0x0A	; 10
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	25 c0       	rjmp	.+74     	; 0x742 <__stack+0x243>
 6f8:	93 2d       	mov	r25, r3
 6fa:	99 7f       	andi	r25, 0xF9	; 249
 6fc:	b9 2e       	mov	r11, r25
 6fe:	8f 36       	cpi	r24, 0x6F	; 111
 700:	c1 f0       	breq	.+48     	; 0x732 <__stack+0x233>
 702:	18 f4       	brcc	.+6      	; 0x70a <__stack+0x20b>
 704:	88 35       	cpi	r24, 0x58	; 88
 706:	79 f0       	breq	.+30     	; 0x726 <__stack+0x227>
 708:	b5 c0       	rjmp	.+362    	; 0x874 <__stack+0x375>
 70a:	80 37       	cpi	r24, 0x70	; 112
 70c:	19 f0       	breq	.+6      	; 0x714 <__stack+0x215>
 70e:	88 37       	cpi	r24, 0x78	; 120
 710:	21 f0       	breq	.+8      	; 0x71a <__stack+0x21b>
 712:	b0 c0       	rjmp	.+352    	; 0x874 <__stack+0x375>
 714:	e9 2f       	mov	r30, r25
 716:	e0 61       	ori	r30, 0x10	; 16
 718:	be 2e       	mov	r11, r30
 71a:	b4 fe       	sbrs	r11, 4
 71c:	0d c0       	rjmp	.+26     	; 0x738 <__stack+0x239>
 71e:	fb 2d       	mov	r31, r11
 720:	f4 60       	ori	r31, 0x04	; 4
 722:	bf 2e       	mov	r11, r31
 724:	09 c0       	rjmp	.+18     	; 0x738 <__stack+0x239>
 726:	34 fe       	sbrs	r3, 4
 728:	0a c0       	rjmp	.+20     	; 0x73e <__stack+0x23f>
 72a:	29 2f       	mov	r18, r25
 72c:	26 60       	ori	r18, 0x06	; 6
 72e:	b2 2e       	mov	r11, r18
 730:	06 c0       	rjmp	.+12     	; 0x73e <__stack+0x23f>
 732:	28 e0       	ldi	r18, 0x08	; 8
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	05 c0       	rjmp	.+10     	; 0x742 <__stack+0x243>
 738:	20 e1       	ldi	r18, 0x10	; 16
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <__stack+0x243>
 73e:	20 e1       	ldi	r18, 0x10	; 16
 740:	32 e0       	ldi	r19, 0x02	; 2
 742:	f8 01       	movw	r30, r16
 744:	b7 fe       	sbrs	r11, 7
 746:	07 c0       	rjmp	.+14     	; 0x756 <__stack+0x257>
 748:	60 81       	ld	r22, Z
 74a:	71 81       	ldd	r23, Z+1	; 0x01
 74c:	82 81       	ldd	r24, Z+2	; 0x02
 74e:	93 81       	ldd	r25, Z+3	; 0x03
 750:	0c 5f       	subi	r16, 0xFC	; 252
 752:	1f 4f       	sbci	r17, 0xFF	; 255
 754:	06 c0       	rjmp	.+12     	; 0x762 <__stack+0x263>
 756:	60 81       	ld	r22, Z
 758:	71 81       	ldd	r23, Z+1	; 0x01
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 5f       	subi	r16, 0xFE	; 254
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	a3 01       	movw	r20, r6
 764:	0e 94 96 04 	call	0x92c	; 0x92c <__ultoa_invert>
 768:	88 2e       	mov	r8, r24
 76a:	86 18       	sub	r8, r6
 76c:	fb 2d       	mov	r31, r11
 76e:	ff 77       	andi	r31, 0x7F	; 127
 770:	3f 2e       	mov	r3, r31
 772:	36 fe       	sbrs	r3, 6
 774:	0d c0       	rjmp	.+26     	; 0x790 <__stack+0x291>
 776:	23 2d       	mov	r18, r3
 778:	2e 7f       	andi	r18, 0xFE	; 254
 77a:	a2 2e       	mov	r10, r18
 77c:	89 14       	cp	r8, r9
 77e:	58 f4       	brcc	.+22     	; 0x796 <__stack+0x297>
 780:	34 fe       	sbrs	r3, 4
 782:	0b c0       	rjmp	.+22     	; 0x79a <__stack+0x29b>
 784:	32 fc       	sbrc	r3, 2
 786:	09 c0       	rjmp	.+18     	; 0x79a <__stack+0x29b>
 788:	83 2d       	mov	r24, r3
 78a:	8e 7e       	andi	r24, 0xEE	; 238
 78c:	a8 2e       	mov	r10, r24
 78e:	05 c0       	rjmp	.+10     	; 0x79a <__stack+0x29b>
 790:	b8 2c       	mov	r11, r8
 792:	a3 2c       	mov	r10, r3
 794:	03 c0       	rjmp	.+6      	; 0x79c <__stack+0x29d>
 796:	b8 2c       	mov	r11, r8
 798:	01 c0       	rjmp	.+2      	; 0x79c <__stack+0x29d>
 79a:	b9 2c       	mov	r11, r9
 79c:	a4 fe       	sbrs	r10, 4
 79e:	0f c0       	rjmp	.+30     	; 0x7be <__stack+0x2bf>
 7a0:	fe 01       	movw	r30, r28
 7a2:	e8 0d       	add	r30, r8
 7a4:	f1 1d       	adc	r31, r1
 7a6:	80 81       	ld	r24, Z
 7a8:	80 33       	cpi	r24, 0x30	; 48
 7aa:	21 f4       	brne	.+8      	; 0x7b4 <__stack+0x2b5>
 7ac:	9a 2d       	mov	r25, r10
 7ae:	99 7e       	andi	r25, 0xE9	; 233
 7b0:	a9 2e       	mov	r10, r25
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <__stack+0x2c7>
 7b4:	a2 fe       	sbrs	r10, 2
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <__stack+0x2c5>
 7b8:	b3 94       	inc	r11
 7ba:	b3 94       	inc	r11
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__stack+0x2c7>
 7be:	8a 2d       	mov	r24, r10
 7c0:	86 78       	andi	r24, 0x86	; 134
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <__stack+0x2c7>
 7c4:	b3 94       	inc	r11
 7c6:	a3 fc       	sbrc	r10, 3
 7c8:	11 c0       	rjmp	.+34     	; 0x7ec <__stack+0x2ed>
 7ca:	a0 fe       	sbrs	r10, 0
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <__stack+0x2db>
 7ce:	b2 14       	cp	r11, r2
 7d0:	88 f4       	brcc	.+34     	; 0x7f4 <__stack+0x2f5>
 7d2:	28 0c       	add	r2, r8
 7d4:	92 2c       	mov	r9, r2
 7d6:	9b 18       	sub	r9, r11
 7d8:	0e c0       	rjmp	.+28     	; 0x7f6 <__stack+0x2f7>
 7da:	b2 14       	cp	r11, r2
 7dc:	60 f4       	brcc	.+24     	; 0x7f6 <__stack+0x2f7>
 7de:	b6 01       	movw	r22, r12
 7e0:	80 e2       	ldi	r24, 0x20	; 32
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 7e8:	b3 94       	inc	r11
 7ea:	f7 cf       	rjmp	.-18     	; 0x7da <__stack+0x2db>
 7ec:	b2 14       	cp	r11, r2
 7ee:	18 f4       	brcc	.+6      	; 0x7f6 <__stack+0x2f7>
 7f0:	2b 18       	sub	r2, r11
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <__stack+0x2f9>
 7f4:	98 2c       	mov	r9, r8
 7f6:	21 2c       	mov	r2, r1
 7f8:	a4 fe       	sbrs	r10, 4
 7fa:	10 c0       	rjmp	.+32     	; 0x81c <__stack+0x31d>
 7fc:	b6 01       	movw	r22, r12
 7fe:	80 e3       	ldi	r24, 0x30	; 48
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 806:	a2 fe       	sbrs	r10, 2
 808:	17 c0       	rjmp	.+46     	; 0x838 <__stack+0x339>
 80a:	a1 fc       	sbrc	r10, 1
 80c:	03 c0       	rjmp	.+6      	; 0x814 <__stack+0x315>
 80e:	88 e7       	ldi	r24, 0x78	; 120
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <__stack+0x319>
 814:	88 e5       	ldi	r24, 0x58	; 88
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	b6 01       	movw	r22, r12
 81a:	0c c0       	rjmp	.+24     	; 0x834 <__stack+0x335>
 81c:	8a 2d       	mov	r24, r10
 81e:	86 78       	andi	r24, 0x86	; 134
 820:	59 f0       	breq	.+22     	; 0x838 <__stack+0x339>
 822:	a1 fe       	sbrs	r10, 1
 824:	02 c0       	rjmp	.+4      	; 0x82a <__stack+0x32b>
 826:	8b e2       	ldi	r24, 0x2B	; 43
 828:	01 c0       	rjmp	.+2      	; 0x82c <__stack+0x32d>
 82a:	80 e2       	ldi	r24, 0x20	; 32
 82c:	a7 fc       	sbrc	r10, 7
 82e:	8d e2       	ldi	r24, 0x2D	; 45
 830:	b6 01       	movw	r22, r12
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 838:	89 14       	cp	r8, r9
 83a:	38 f4       	brcc	.+14     	; 0x84a <__stack+0x34b>
 83c:	b6 01       	movw	r22, r12
 83e:	80 e3       	ldi	r24, 0x30	; 48
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 846:	9a 94       	dec	r9
 848:	f7 cf       	rjmp	.-18     	; 0x838 <__stack+0x339>
 84a:	8a 94       	dec	r8
 84c:	f3 01       	movw	r30, r6
 84e:	e8 0d       	add	r30, r8
 850:	f1 1d       	adc	r31, r1
 852:	80 81       	ld	r24, Z
 854:	b6 01       	movw	r22, r12
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 85c:	81 10       	cpse	r8, r1
 85e:	f5 cf       	rjmp	.-22     	; 0x84a <__stack+0x34b>
 860:	22 20       	and	r2, r2
 862:	09 f4       	brne	.+2      	; 0x866 <__stack+0x367>
 864:	42 ce       	rjmp	.-892    	; 0x4ea <vfprintf+0x24>
 866:	b6 01       	movw	r22, r12
 868:	80 e2       	ldi	r24, 0x20	; 32
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fputc>
 870:	2a 94       	dec	r2
 872:	f6 cf       	rjmp	.-20     	; 0x860 <__stack+0x361>
 874:	f6 01       	movw	r30, r12
 876:	86 81       	ldd	r24, Z+6	; 0x06
 878:	97 81       	ldd	r25, Z+7	; 0x07
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x381>
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	9f ef       	ldi	r25, 0xFF	; 255
 880:	2b 96       	adiw	r28, 0x0b	; 11
 882:	e2 e1       	ldi	r30, 0x12	; 18
 884:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__epilogue_restores__>

00000888 <strnlen_P>:
 888:	fc 01       	movw	r30, r24
 88a:	05 90       	lpm	r0, Z+
 88c:	61 50       	subi	r22, 0x01	; 1
 88e:	70 40       	sbci	r23, 0x00	; 0
 890:	01 10       	cpse	r0, r1
 892:	d8 f7       	brcc	.-10     	; 0x88a <strnlen_P+0x2>
 894:	80 95       	com	r24
 896:	90 95       	com	r25
 898:	8e 0f       	add	r24, r30
 89a:	9f 1f       	adc	r25, r31
 89c:	08 95       	ret

0000089e <strnlen>:
 89e:	fc 01       	movw	r30, r24
 8a0:	61 50       	subi	r22, 0x01	; 1
 8a2:	70 40       	sbci	r23, 0x00	; 0
 8a4:	01 90       	ld	r0, Z+
 8a6:	01 10       	cpse	r0, r1
 8a8:	d8 f7       	brcc	.-10     	; 0x8a0 <strnlen+0x2>
 8aa:	80 95       	com	r24
 8ac:	90 95       	com	r25
 8ae:	8e 0f       	add	r24, r30
 8b0:	9f 1f       	adc	r25, r31
 8b2:	08 95       	ret

000008b4 <fputc>:
 8b4:	0f 93       	push	r16
 8b6:	1f 93       	push	r17
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	fb 01       	movw	r30, r22
 8be:	23 81       	ldd	r18, Z+3	; 0x03
 8c0:	21 fd       	sbrc	r18, 1
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <fputc+0x16>
 8c4:	8f ef       	ldi	r24, 0xFF	; 255
 8c6:	9f ef       	ldi	r25, 0xFF	; 255
 8c8:	2c c0       	rjmp	.+88     	; 0x922 <fputc+0x6e>
 8ca:	22 ff       	sbrs	r18, 2
 8cc:	16 c0       	rjmp	.+44     	; 0x8fa <fputc+0x46>
 8ce:	46 81       	ldd	r20, Z+6	; 0x06
 8d0:	57 81       	ldd	r21, Z+7	; 0x07
 8d2:	24 81       	ldd	r18, Z+4	; 0x04
 8d4:	35 81       	ldd	r19, Z+5	; 0x05
 8d6:	42 17       	cp	r20, r18
 8d8:	53 07       	cpc	r21, r19
 8da:	44 f4       	brge	.+16     	; 0x8ec <fputc+0x38>
 8dc:	a0 81       	ld	r26, Z
 8de:	b1 81       	ldd	r27, Z+1	; 0x01
 8e0:	9d 01       	movw	r18, r26
 8e2:	2f 5f       	subi	r18, 0xFF	; 255
 8e4:	3f 4f       	sbci	r19, 0xFF	; 255
 8e6:	31 83       	std	Z+1, r19	; 0x01
 8e8:	20 83       	st	Z, r18
 8ea:	8c 93       	st	X, r24
 8ec:	26 81       	ldd	r18, Z+6	; 0x06
 8ee:	37 81       	ldd	r19, Z+7	; 0x07
 8f0:	2f 5f       	subi	r18, 0xFF	; 255
 8f2:	3f 4f       	sbci	r19, 0xFF	; 255
 8f4:	37 83       	std	Z+7, r19	; 0x07
 8f6:	26 83       	std	Z+6, r18	; 0x06
 8f8:	14 c0       	rjmp	.+40     	; 0x922 <fputc+0x6e>
 8fa:	8b 01       	movw	r16, r22
 8fc:	ec 01       	movw	r28, r24
 8fe:	fb 01       	movw	r30, r22
 900:	00 84       	ldd	r0, Z+8	; 0x08
 902:	f1 85       	ldd	r31, Z+9	; 0x09
 904:	e0 2d       	mov	r30, r0
 906:	09 95       	icall
 908:	89 2b       	or	r24, r25
 90a:	e1 f6       	brne	.-72     	; 0x8c4 <fputc+0x10>
 90c:	d8 01       	movw	r26, r16
 90e:	16 96       	adiw	r26, 0x06	; 6
 910:	8d 91       	ld	r24, X+
 912:	9c 91       	ld	r25, X
 914:	17 97       	sbiw	r26, 0x07	; 7
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	17 96       	adiw	r26, 0x07	; 7
 91a:	9c 93       	st	X, r25
 91c:	8e 93       	st	-X, r24
 91e:	16 97       	sbiw	r26, 0x06	; 6
 920:	ce 01       	movw	r24, r28
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	1f 91       	pop	r17
 928:	0f 91       	pop	r16
 92a:	08 95       	ret

0000092c <__ultoa_invert>:
 92c:	fa 01       	movw	r30, r20
 92e:	aa 27       	eor	r26, r26
 930:	28 30       	cpi	r18, 0x08	; 8
 932:	51 f1       	breq	.+84     	; 0x988 <__ultoa_invert+0x5c>
 934:	20 31       	cpi	r18, 0x10	; 16
 936:	81 f1       	breq	.+96     	; 0x998 <__ultoa_invert+0x6c>
 938:	e8 94       	clt
 93a:	6f 93       	push	r22
 93c:	6e 7f       	andi	r22, 0xFE	; 254
 93e:	6e 5f       	subi	r22, 0xFE	; 254
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	af 4f       	sbci	r26, 0xFF	; 255
 948:	b1 e0       	ldi	r27, 0x01	; 1
 94a:	3e d0       	rcall	.+124    	; 0x9c8 <__ultoa_invert+0x9c>
 94c:	b4 e0       	ldi	r27, 0x04	; 4
 94e:	3c d0       	rcall	.+120    	; 0x9c8 <__ultoa_invert+0x9c>
 950:	67 0f       	add	r22, r23
 952:	78 1f       	adc	r23, r24
 954:	89 1f       	adc	r24, r25
 956:	9a 1f       	adc	r25, r26
 958:	a1 1d       	adc	r26, r1
 95a:	68 0f       	add	r22, r24
 95c:	79 1f       	adc	r23, r25
 95e:	8a 1f       	adc	r24, r26
 960:	91 1d       	adc	r25, r1
 962:	a1 1d       	adc	r26, r1
 964:	6a 0f       	add	r22, r26
 966:	71 1d       	adc	r23, r1
 968:	81 1d       	adc	r24, r1
 96a:	91 1d       	adc	r25, r1
 96c:	a1 1d       	adc	r26, r1
 96e:	20 d0       	rcall	.+64     	; 0x9b0 <__ultoa_invert+0x84>
 970:	09 f4       	brne	.+2      	; 0x974 <__ultoa_invert+0x48>
 972:	68 94       	set
 974:	3f 91       	pop	r19
 976:	2a e0       	ldi	r18, 0x0A	; 10
 978:	26 9f       	mul	r18, r22
 97a:	11 24       	eor	r1, r1
 97c:	30 19       	sub	r19, r0
 97e:	30 5d       	subi	r19, 0xD0	; 208
 980:	31 93       	st	Z+, r19
 982:	de f6       	brtc	.-74     	; 0x93a <__ultoa_invert+0xe>
 984:	cf 01       	movw	r24, r30
 986:	08 95       	ret
 988:	46 2f       	mov	r20, r22
 98a:	47 70       	andi	r20, 0x07	; 7
 98c:	40 5d       	subi	r20, 0xD0	; 208
 98e:	41 93       	st	Z+, r20
 990:	b3 e0       	ldi	r27, 0x03	; 3
 992:	0f d0       	rcall	.+30     	; 0x9b2 <__ultoa_invert+0x86>
 994:	c9 f7       	brne	.-14     	; 0x988 <__ultoa_invert+0x5c>
 996:	f6 cf       	rjmp	.-20     	; 0x984 <__ultoa_invert+0x58>
 998:	46 2f       	mov	r20, r22
 99a:	4f 70       	andi	r20, 0x0F	; 15
 99c:	40 5d       	subi	r20, 0xD0	; 208
 99e:	4a 33       	cpi	r20, 0x3A	; 58
 9a0:	18 f0       	brcs	.+6      	; 0x9a8 <__ultoa_invert+0x7c>
 9a2:	49 5d       	subi	r20, 0xD9	; 217
 9a4:	31 fd       	sbrc	r19, 1
 9a6:	40 52       	subi	r20, 0x20	; 32
 9a8:	41 93       	st	Z+, r20
 9aa:	02 d0       	rcall	.+4      	; 0x9b0 <__ultoa_invert+0x84>
 9ac:	a9 f7       	brne	.-22     	; 0x998 <__ultoa_invert+0x6c>
 9ae:	ea cf       	rjmp	.-44     	; 0x984 <__ultoa_invert+0x58>
 9b0:	b4 e0       	ldi	r27, 0x04	; 4
 9b2:	a6 95       	lsr	r26
 9b4:	97 95       	ror	r25
 9b6:	87 95       	ror	r24
 9b8:	77 95       	ror	r23
 9ba:	67 95       	ror	r22
 9bc:	ba 95       	dec	r27
 9be:	c9 f7       	brne	.-14     	; 0x9b2 <__ultoa_invert+0x86>
 9c0:	00 97       	sbiw	r24, 0x00	; 0
 9c2:	61 05       	cpc	r22, r1
 9c4:	71 05       	cpc	r23, r1
 9c6:	08 95       	ret
 9c8:	9b 01       	movw	r18, r22
 9ca:	ac 01       	movw	r20, r24
 9cc:	0a 2e       	mov	r0, r26
 9ce:	06 94       	lsr	r0
 9d0:	57 95       	ror	r21
 9d2:	47 95       	ror	r20
 9d4:	37 95       	ror	r19
 9d6:	27 95       	ror	r18
 9d8:	ba 95       	dec	r27
 9da:	c9 f7       	brne	.-14     	; 0x9ce <__ultoa_invert+0xa2>
 9dc:	62 0f       	add	r22, r18
 9de:	73 1f       	adc	r23, r19
 9e0:	84 1f       	adc	r24, r20
 9e2:	95 1f       	adc	r25, r21
 9e4:	a0 1d       	adc	r26, r0
 9e6:	08 95       	ret

000009e8 <__prologue_saves__>:
 9e8:	2f 92       	push	r2
 9ea:	3f 92       	push	r3
 9ec:	4f 92       	push	r4
 9ee:	5f 92       	push	r5
 9f0:	6f 92       	push	r6
 9f2:	7f 92       	push	r7
 9f4:	8f 92       	push	r8
 9f6:	9f 92       	push	r9
 9f8:	af 92       	push	r10
 9fa:	bf 92       	push	r11
 9fc:	cf 92       	push	r12
 9fe:	df 92       	push	r13
 a00:	ef 92       	push	r14
 a02:	ff 92       	push	r15
 a04:	0f 93       	push	r16
 a06:	1f 93       	push	r17
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	cd b7       	in	r28, 0x3d	; 61
 a0e:	de b7       	in	r29, 0x3e	; 62
 a10:	ca 1b       	sub	r28, r26
 a12:	db 0b       	sbc	r29, r27
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	f8 94       	cli
 a18:	de bf       	out	0x3e, r29	; 62
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	cd bf       	out	0x3d, r28	; 61
 a1e:	09 94       	ijmp

00000a20 <__epilogue_restores__>:
 a20:	2a 88       	ldd	r2, Y+18	; 0x12
 a22:	39 88       	ldd	r3, Y+17	; 0x11
 a24:	48 88       	ldd	r4, Y+16	; 0x10
 a26:	5f 84       	ldd	r5, Y+15	; 0x0f
 a28:	6e 84       	ldd	r6, Y+14	; 0x0e
 a2a:	7d 84       	ldd	r7, Y+13	; 0x0d
 a2c:	8c 84       	ldd	r8, Y+12	; 0x0c
 a2e:	9b 84       	ldd	r9, Y+11	; 0x0b
 a30:	aa 84       	ldd	r10, Y+10	; 0x0a
 a32:	b9 84       	ldd	r11, Y+9	; 0x09
 a34:	c8 84       	ldd	r12, Y+8	; 0x08
 a36:	df 80       	ldd	r13, Y+7	; 0x07
 a38:	ee 80       	ldd	r14, Y+6	; 0x06
 a3a:	fd 80       	ldd	r15, Y+5	; 0x05
 a3c:	0c 81       	ldd	r16, Y+4	; 0x04
 a3e:	1b 81       	ldd	r17, Y+3	; 0x03
 a40:	aa 81       	ldd	r26, Y+2	; 0x02
 a42:	b9 81       	ldd	r27, Y+1	; 0x01
 a44:	ce 0f       	add	r28, r30
 a46:	d1 1d       	adc	r29, r1
 a48:	0f b6       	in	r0, 0x3f	; 63
 a4a:	f8 94       	cli
 a4c:	de bf       	out	0x3e, r29	; 62
 a4e:	0f be       	out	0x3f, r0	; 63
 a50:	cd bf       	out	0x3d, r28	; 61
 a52:	ed 01       	movw	r28, r26
 a54:	08 95       	ret

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
