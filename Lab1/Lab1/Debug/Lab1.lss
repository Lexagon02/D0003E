
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000b64  00000bd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b64  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c4c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb4  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093f  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000566  00000000  00000000  000022ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000528  00000000  00000000  00002a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000945  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000038e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 e6       	ldi	r30, 0x64	; 100
  70:	fb e0       	ldi	r31, 0x0B	; 11
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 13 02 	call	0x426	; 0x426 <main>
  82:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <LCD_Init>:
	LCDDR17=0x0;

	LCDDR3=0x0;
	LCDDR8=0x0;
	LCDDR13=0x0;
	LCDDR18=0x0;
  8a:	87 eb       	ldi	r24, 0xB7	; 183
  8c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  90:	87 e0       	ldi	r24, 0x07	; 7
  92:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  a2:	08 95       	ret

000000a4 <timer_init>:
  a4:	17 9a       	sbi	0x02, 7	; 2
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
  ac:	08 95       	ret

000000ae <writeChar>:
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	28 97       	sbiw	r28, 0x08	; 8
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	90 ed       	ldi	r25, 0xD0	; 208
  c4:	98 0f       	add	r25, r24
  c6:	9a 30       	cpi	r25, 0x0A	; 10
  c8:	08 f0       	brcs	.+2      	; 0xcc <writeChar+0x1e>
  ca:	46 c0       	rjmp	.+140    	; 0x158 <writeChar+0xaa>
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	e0 56       	subi	r30, 0x60	; 96
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 81       	ld	r24, Z
  da:	91 81       	ldd	r25, Z+1	; 0x01
  dc:	9e 83       	std	Y+6, r25	; 0x06
  de:	8d 83       	std	Y+5, r24	; 0x05
  e0:	86 2f       	mov	r24, r22
  e2:	86 95       	lsr	r24
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	84 51       	subi	r24, 0x14	; 20
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	98 87       	std	Y+8, r25	; 0x08
  ec:	8f 83       	std	Y+7, r24	; 0x07
  ee:	fe 01       	movw	r30, r28
  f0:	31 96       	adiw	r30, 0x01	; 1
  f2:	9e 01       	movw	r18, r28
  f4:	2b 5f       	subi	r18, 0xFB	; 251
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	61 70       	andi	r22, 0x01	; 1
  fa:	8d 81       	ldd	r24, Y+5	; 0x05
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	80 83       	st	Z, r24
 100:	8d 81       	ldd	r24, Y+5	; 0x05
 102:	9e 81       	ldd	r25, Y+6	; 0x06
 104:	92 95       	swap	r25
 106:	82 95       	swap	r24
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	89 27       	eor	r24, r25
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	89 27       	eor	r24, r25
 110:	9e 83       	std	Y+6, r25	; 0x06
 112:	8d 83       	std	Y+5, r24	; 0x05
 114:	61 11       	cpse	r22, r1
 116:	0a c0       	rjmp	.+20     	; 0x12c <writeChar+0x7e>
 118:	af 81       	ldd	r26, Y+7	; 0x07
 11a:	b8 85       	ldd	r27, Y+8	; 0x08
 11c:	8c 91       	ld	r24, X
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	8c 93       	st	X, r24
 122:	9c 91       	ld	r25, X
 124:	80 81       	ld	r24, Z
 126:	89 2b       	or	r24, r25
 128:	8c 93       	st	X, r24
 12a:	0d c0       	rjmp	.+26     	; 0x146 <writeChar+0x98>
 12c:	af 81       	ldd	r26, Y+7	; 0x07
 12e:	b8 85       	ldd	r27, Y+8	; 0x08
 130:	8c 91       	ld	r24, X
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	8c 93       	st	X, r24
 136:	4c 91       	ld	r20, X
 138:	90 81       	ld	r25, Z
 13a:	50 e1       	ldi	r21, 0x10	; 16
 13c:	95 9f       	mul	r25, r21
 13e:	c0 01       	movw	r24, r0
 140:	11 24       	eor	r1, r1
 142:	84 2b       	or	r24, r20
 144:	8c 93       	st	X, r24
 146:	8f 81       	ldd	r24, Y+7	; 0x07
 148:	98 85       	ldd	r25, Y+8	; 0x08
 14a:	05 96       	adiw	r24, 0x05	; 5
 14c:	98 87       	std	Y+8, r25	; 0x08
 14e:	8f 83       	std	Y+7, r24	; 0x07
 150:	31 96       	adiw	r30, 0x01	; 1
 152:	e2 17       	cp	r30, r18
 154:	f3 07       	cpc	r31, r19
 156:	89 f6       	brne	.-94     	; 0xfa <writeChar+0x4c>
 158:	28 96       	adiw	r28, 0x08	; 8
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <is_prime>:
	char str[size_needed];
	sprintf(str, "%ld", i);
	output(str, size_needed-1);
}

int is_prime(long i){
 16a:	8f 92       	push	r8
 16c:	9f 92       	push	r9
 16e:	af 92       	push	r10
 170:	bf 92       	push	r11
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	6b 01       	movw	r12, r22
 180:	7c 01       	movw	r14, r24
	int c;
	for (c = 2; c <= i - 1; c++)
 182:	4b 01       	movw	r8, r22
 184:	5c 01       	movw	r10, r24
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	88 1a       	sub	r8, r24
 18a:	91 08       	sbc	r9, r1
 18c:	a1 08       	sbc	r10, r1
 18e:	b1 08       	sbc	r11, r1
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	88 16       	cp	r8, r24
 194:	91 04       	cpc	r9, r1
 196:	a1 04       	cpc	r10, r1
 198:	b1 04       	cpc	r11, r1
 19a:	6c f1       	brlt	.+90     	; 0x1f6 <is_prime+0x8c>
	{
		if (i%c == 0)
 19c:	d7 01       	movw	r26, r14
 19e:	c6 01       	movw	r24, r12
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	99 27       	eor	r25, r25
 1a4:	aa 27       	eor	r26, r26
 1a6:	b0 78       	andi	r27, 0x80	; 128
 1a8:	bb 23       	and	r27, r27
 1aa:	54 f4       	brge	.+20     	; 0x1c0 <is_prime+0x56>
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	a1 09       	sbc	r26, r1
 1b0:	b1 09       	sbc	r27, r1
 1b2:	8e 6f       	ori	r24, 0xFE	; 254
 1b4:	9f 6f       	ori	r25, 0xFF	; 255
 1b6:	af 6f       	ori	r26, 0xFF	; 255
 1b8:	bf 6f       	ori	r27, 0xFF	; 255
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	a1 1d       	adc	r26, r1
 1be:	b1 1d       	adc	r27, r1
 1c0:	89 2b       	or	r24, r25
 1c2:	8a 2b       	or	r24, r26
 1c4:	8b 2b       	or	r24, r27
 1c6:	09 f1       	breq	.+66     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 1c8:	c2 e0       	ldi	r28, 0x02	; 2
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	08 c0       	rjmp	.+16     	; 0x1de <is_prime+0x74>
 1ce:	c7 01       	movw	r24, r14
 1d0:	b6 01       	movw	r22, r12
 1d2:	0e 94 85 02 	call	0x50a	; 0x50a <__divmodsi4>
 1d6:	67 2b       	or	r22, r23
 1d8:	68 2b       	or	r22, r24
 1da:	69 2b       	or	r22, r25
 1dc:	c9 f0       	breq	.+50     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
	output(str, size_needed-1);
}

int is_prime(long i){
	int c;
	for (c = 2; c <= i - 1; c++)
 1de:	21 96       	adiw	r28, 0x01	; 1
 1e0:	9e 01       	movw	r18, r28
 1e2:	0d 2e       	mov	r0, r29
 1e4:	00 0c       	add	r0, r0
 1e6:	44 0b       	sbc	r20, r20
 1e8:	55 0b       	sbc	r21, r21
 1ea:	82 16       	cp	r8, r18
 1ec:	93 06       	cpc	r9, r19
 1ee:	a4 06       	cpc	r10, r20
 1f0:	b5 06       	cpc	r11, r21
 1f2:	6c f7       	brge	.-38     	; 0x1ce <is_prime+0x64>
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <is_prime+0x94>
 1f6:	22 e0       	ldi	r18, 0x02	; 2
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
	{
		if (i%c == 0)
		return 0;
	}
	if (c == i)
 1fe:	c2 16       	cp	r12, r18
 200:	d3 06       	cpc	r13, r19
 202:	e4 06       	cpc	r14, r20
 204:	f5 06       	cpc	r15, r21
 206:	39 f0       	breq	.+14     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
	return 1;
}
 208:	08 c0       	rjmp	.+16     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
int is_prime(long i){
	int c;
	for (c = 2; c <= i - 1; c++)
	{
		if (i%c == 0)
		return 0;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	05 c0       	rjmp	.+10     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
	}
	if (c == i)
	return 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	df 90       	pop	r13
 224:	cf 90       	pop	r12
 226:	bf 90       	pop	r11
 228:	af 90       	pop	r10
 22a:	9f 90       	pop	r9
 22c:	8f 90       	pop	r8
 22e:	08 95       	ret

00000230 <output>:

void output(char arr[], int length)
{
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	int index = 0;
	int lastIndex = length;
	int pos = 0;
	index = length-6;
 23e:	eb 01       	movw	r28, r22
 240:	26 97       	sbiw	r28, 0x06	; 6
	while(index <= lastIndex)
 242:	6c 17       	cp	r22, r28
 244:	7d 07       	cpc	r23, r29
 246:	84 f0       	brlt	.+32     	; 0x268 <output+0x38>
 248:	7b 01       	movw	r14, r22
 24a:	6c 01       	movw	r12, r24
 24c:	c8 0f       	add	r28, r24
 24e:	d9 1f       	adc	r29, r25
 250:	10 e0       	ldi	r17, 0x00	; 0
	{
		char ch = arr[index];
		writeChar(ch, pos);
 252:	61 2f       	mov	r22, r17
 254:	89 91       	ld	r24, Y+
 256:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
 25a:	1f 5f       	subi	r17, 0xFF	; 255
{
	int index = 0;
	int lastIndex = length;
	int pos = 0;
	index = length-6;
	while(index <= lastIndex)
 25c:	9e 01       	movw	r18, r28
 25e:	2c 19       	sub	r18, r12
 260:	3d 09       	sbc	r19, r13
 262:	e2 16       	cp	r14, r18
 264:	f3 06       	cpc	r15, r19
 266:	ac f7       	brge	.-22     	; 0x252 <output+0x22>
		char ch = arr[index];
		writeChar(ch, pos);
		index++;
		pos++;
	}
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	08 95       	ret

00000278 <writeLong>:
	LCDDR8=0x0;
	LCDDR13=0x0;
	LCDDR18=0x0;
}

void writeLong(long i){
 278:	4f 92       	push	r4
 27a:	5f 92       	push	r5
 27c:	6f 92       	push	r6
 27e:	7f 92       	push	r7
 280:	8f 92       	push	r8
 282:	9f 92       	push	r9
 284:	af 92       	push	r10
 286:	bf 92       	push	r11
 288:	cf 92       	push	r12
 28a:	df 92       	push	r13
 28c:	ef 92       	push	r14
 28e:	ff 92       	push	r15
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	2b 01       	movw	r4, r22
 29e:	3c 01       	movw	r6, r24
	} while (value_copy != 0);

	char str[size_needed];
	sprintf(str, "%ld", i);
	output(str, size_needed-1);
}
 2a0:	cd b6       	in	r12, 0x3d	; 61
 2a2:	de b6       	in	r13, 0x3e	; 62

void writeLong(long i){
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
	if (value_copy < 0) size_needed++; // Only needed for signed types.
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	80 95       	com	r24
 2aa:	90 95       	com	r25
 2ac:	a0 95       	com	r26
 2ae:	b0 95       	com	r27
 2b0:	88 27       	eor	r24, r24
 2b2:	b7 fd       	sbrc	r27, 7
 2b4:	83 95       	inc	r24
 2b6:	99 27       	eor	r25, r25
 2b8:	aa 27       	eor	r26, r26
 2ba:	bb 27       	eor	r27, r27
 2bc:	02 e0       	ldi	r16, 0x02	; 2
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	08 1b       	sub	r16, r24
 2c2:	19 0b       	sbc	r17, r25
}

void writeLong(long i){
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
 2c4:	a3 01       	movw	r20, r6
 2c6:	92 01       	movw	r18, r4
	if (value_copy < 0) size_needed++; // Only needed for signed types.
	do {
		size_needed++; // Add 1 per digit.
		value_copy /= 10;
 2c8:	0f 2e       	mov	r0, r31
 2ca:	fa e0       	ldi	r31, 0x0A	; 10
 2cc:	8f 2e       	mov	r8, r31
 2ce:	91 2c       	mov	r9, r1
 2d0:	a1 2c       	mov	r10, r1
 2d2:	b1 2c       	mov	r11, r1
 2d4:	f0 2d       	mov	r31, r0
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <writeLong+0x62>
	
	long value_copy = i;
	unsigned int size_needed = 1; // For the null character.
	if (value_copy < 0) size_needed++; // Only needed for signed types.
	do {
		size_needed++; // Add 1 per digit.
 2d8:	87 01       	movw	r16, r14
 2da:	78 01       	movw	r14, r16
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	e8 1a       	sub	r14, r24
 2e0:	f8 0a       	sbc	r15, r24
		value_copy /= 10;
 2e2:	ca 01       	movw	r24, r20
 2e4:	b9 01       	movw	r22, r18
 2e6:	a5 01       	movw	r20, r10
 2e8:	94 01       	movw	r18, r8
 2ea:	0e 94 85 02 	call	0x50a	; 0x50a <__divmodsi4>
	} while (value_copy != 0);
 2ee:	21 15       	cp	r18, r1
 2f0:	31 05       	cpc	r19, r1
 2f2:	41 05       	cpc	r20, r1
 2f4:	51 05       	cpc	r21, r1
 2f6:	81 f7       	brne	.-32     	; 0x2d8 <writeLong+0x60>

	char str[size_needed];
 2f8:	8d b7       	in	r24, 0x3d	; 61
 2fa:	9e b7       	in	r25, 0x3e	; 62
 2fc:	8e 19       	sub	r24, r14
 2fe:	9f 09       	sbc	r25, r15
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	9e bf       	out	0x3e, r25	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	8d bf       	out	0x3d, r24	; 61
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	7c 01       	movw	r14, r24
	sprintf(str, "%ld", i);
 30e:	7f 92       	push	r7
 310:	6f 92       	push	r6
 312:	5f 92       	push	r5
 314:	4f 92       	push	r4
 316:	84 e1       	ldi	r24, 0x14	; 20
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	9f 93       	push	r25
 31c:	8f 93       	push	r24
 31e:	ff 92       	push	r15
 320:	ef 92       	push	r14
 322:	0e 94 c6 02 	call	0x58c	; 0x58c <sprintf>
	output(str, size_needed-1);
 326:	b8 01       	movw	r22, r16
 328:	8e 2d       	mov	r24, r14
 32a:	9f 2d       	mov	r25, r15
 32c:	0e 94 18 01 	call	0x230	; 0x230 <output>
}
 330:	8d b7       	in	r24, 0x3d	; 61
 332:	9e b7       	in	r25, 0x3e	; 62
 334:	08 96       	adiw	r24, 0x08	; 8
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	9e bf       	out	0x3e, r25	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	8d bf       	out	0x3d, r24	; 61
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	f8 94       	cli
 344:	de be       	out	0x3e, r13	; 62
 346:	0f be       	out	0x3f, r0	; 63
 348:	cd be       	out	0x3d, r12	; 61
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	df 90       	pop	r13
 358:	cf 90       	pop	r12
 35a:	bf 90       	pop	r11
 35c:	af 90       	pop	r10
 35e:	9f 90       	pop	r9
 360:	8f 90       	pop	r8
 362:	7f 90       	pop	r7
 364:	6f 90       	pop	r6
 366:	5f 90       	pop	r5
 368:	4f 90       	pop	r4
 36a:	08 95       	ret

0000036c <primes>:
	in primes we removed the delay and clearLCD since function
	since this will be manged in main. We also return the next prime
	prime since we need it to keep track of where we are.
	We don't need the for loop so it's removed.
*/
long primes(long number){
 36c:	8f 92       	push	r8
 36e:	9f 92       	push	r9
 370:	af 92       	push	r10
 372:	bf 92       	push	r11
 374:	cf 92       	push	r12
 376:	df 92       	push	r13
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	4b 01       	movw	r8, r22
 386:	5c 01       	movw	r10, r24
	int i = 1;
	int adder = 1; 
	int primeFound = 0;
	
	if(number % 2 != 0){
 388:	60 ff       	sbrs	r22, 0
 38a:	03 c0       	rjmp	.+6      	; 0x392 <primes+0x26>
		i = 2;
 38c:	02 e0       	ldi	r16, 0x02	; 2
 38e:	10 e0       	ldi	r17, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <primes+0x2a>
	since this will be manged in main. We also return the next prime
	prime since we need it to keep track of where we are.
	We don't need the for loop so it's removed.
*/
long primes(long number){
	int i = 1;
 392:	01 e0       	ldi	r16, 0x01	; 1
 394:	10 e0       	ldi	r17, 0x00	; 0
 396:	e8 01       	movw	r28, r16
 398:	02 c0       	rjmp	.+4      	; 0x39e <primes+0x32>
		if(is_prime(number+i) == 1) {
			primeFound = 1;
			writeLong(number+i);
			return (number+i);
		}
		i=i+adder; // if number is NOT dividable by two this is better optimized
 39a:	c0 0f       	add	r28, r16
 39c:	d1 1f       	adc	r29, r17
		i = 2;
		adder = 2;
	}
	
	while (primeFound == 0){
		if(is_prime(number+i) == 1) {
 39e:	6e 01       	movw	r12, r28
 3a0:	0d 2e       	mov	r0, r29
 3a2:	00 0c       	add	r0, r0
 3a4:	ee 08       	sbc	r14, r14
 3a6:	ff 08       	sbc	r15, r15
 3a8:	c8 0c       	add	r12, r8
 3aa:	d9 1c       	adc	r13, r9
 3ac:	ea 1c       	adc	r14, r10
 3ae:	fb 1c       	adc	r15, r11
 3b0:	c7 01       	movw	r24, r14
 3b2:	b6 01       	movw	r22, r12
 3b4:	0e 94 b5 00 	call	0x16a	; 0x16a <is_prime>
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	79 f7       	brne	.-34     	; 0x39a <primes+0x2e>
			primeFound = 1;
			writeLong(number+i);
 3bc:	c7 01       	movw	r24, r14
 3be:	b6 01       	movw	r22, r12
 3c0:	0e 94 3c 01 	call	0x278	; 0x278 <writeLong>
			return (number+i);
		}
		i=i+adder; // if number is NOT dividable by two this is better optimized
	}
}
 3c4:	c7 01       	movw	r24, r14
 3c6:	b6 01       	movw	r22, r12
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	bf 90       	pop	r11
 3da:	af 90       	pop	r10
 3dc:	9f 90       	pop	r9
 3de:	8f 90       	pop	r8
 3e0:	08 95       	ret

000003e2 <toggle>:

int toggle(int state){
	if(state == 0) { // if OFF
 3e2:	89 2b       	or	r24, r25
 3e4:	31 f4       	brne	.+12     	; 0x3f2 <toggle+0x10>
		LCDDR8 = 0x1; // ON
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
		return 1;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	08 95       	ret
	}
	else{			// if ON
		LCDDR8 = 0x0; // OFF
 3f2:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
		return 0;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 3fa:	08 95       	ret

000003fc <toggleButton>:

void toggleButton(void){
	if(LCDDR13 == 0) { // if OFF
 3fc:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 400:	81 11       	cpse	r24, r1
 402:	06 c0       	rjmp	.+12     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
		LCDDR13 = 0x1; // ON
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
		LCDDR18 = 0x0;
 40a:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
 40e:	08 95       	ret
	}
	else{			// if ON
		LCDDR13 = 0x0; // OFF
 410:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
		LCDDR18 = 0x1;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
 41a:	08 95       	ret

0000041c <button_init>:
	}
}

void button_init(void){
	PORTB = (1<<PB7);
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	85 b9       	out	0x05, r24	; 5
	DDRB = (1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
 420:	8f e0       	ldi	r24, 0x0F	; 15
 422:	84 b9       	out	0x04, r24	; 4
 424:	08 95       	ret

00000426 <main>:
}

int main(void)
{
 426:	af 92       	push	r10
 428:	bf 92       	push	r11
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
	USART1_init();
	LCD_Init();
 43a:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Init>
	button_init();
 43e:	0e 94 0e 02 	call	0x41c	; 0x41c <button_init>
	uint8_t state = 0;			// set start state
	uint16_t prime = 2500;		// set first prime
	uint8_t cykleState = 0;		
	uint8_t buttonPress = 0;
	uint8_t ON = 0;
	timer_init();
 442:	0e 94 52 00 	call	0xa4	; 0xa4 <timer_init>
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 2500;		// set first prime
	uint8_t cykleState = 0;		
	uint8_t buttonPress = 0;
 446:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Init();
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 2500;		// set first prime
	uint8_t cykleState = 0;		
 448:	00 e0       	ldi	r16, 0x00	; 0
	USART1_init();
	LCD_Init();
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
	uint16_t prime = 2500;		// set first prime
 44a:	0f 2e       	mov	r0, r31
 44c:	f4 ec       	ldi	r31, 0xC4	; 196
 44e:	ef 2e       	mov	r14, r31
 450:	f9 e0       	ldi	r31, 0x09	; 9
 452:	ff 2e       	mov	r15, r31
 454:	f0 2d       	mov	r31, r0
{
	USART1_init();
	LCD_Init();
	button_init();
	uint16_t nextTimerValue;
	uint8_t state = 0;			// set start state
 456:	d1 2c       	mov	r13, r1
	uint8_t ON = 0;
	timer_init();
	nextTimerValue = ((8000000/256)/2);		// calculate the clock time for 1Hz
	uint16_t wrapValue = nextTimerValue*2;
	while(1){
		while (TCNT1 <= nextTimerValue)
 458:	c4 e8       	ldi	r28, 0x84	; 132
 45a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if (cykleState == 0) {
				state = toggle(state);
				prime = primes(prime);
				cykleState = 1;
 45c:	aa 24       	eor	r10, r10
 45e:	a3 94       	inc	r10
				prime = primes(prime);
				cykleState = 0;
			}
			if (PINB & (1<<PB7)) {
				if(buttonPress == 0){
					buttonPress = 1;
 460:	ba 2c       	mov	r11, r10
		while (TCNT1 >= nextTimerValue)
		{
			if (cykleState == 1) {
				state = toggle(state);
				prime = primes(prime);
				cykleState = 0;
 462:	c1 2c       	mov	r12, r1
	uint8_t ON = 0;
	timer_init();
	nextTimerValue = ((8000000/256)/2);		// calculate the clock time for 1Hz
	uint16_t wrapValue = nextTimerValue*2;
	while(1){
		while (TCNT1 <= nextTimerValue)
 464:	3f c0       	rjmp	.+126    	; 0x4e4 <main+0xbe>
		{
			if (cykleState == 0) {
 466:	01 11       	cpse	r16, r1
 468:	0c c0       	rjmp	.+24     	; 0x482 <main+0x5c>
				state = toggle(state);
 46a:	8d 2d       	mov	r24, r13
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <toggle>
 472:	d8 2e       	mov	r13, r24
				prime = primes(prime);
 474:	b7 01       	movw	r22, r14
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 b6 01 	call	0x36c	; 0x36c <primes>
 47e:	7b 01       	movw	r14, r22
				cykleState = 1;
 480:	0a 2d       	mov	r16, r10
			}	
			if (PINB & (1<<PB7)) {
 482:	1f 9b       	sbis	0x03, 7	; 3
 484:	05 c0       	rjmp	.+10     	; 0x490 <main+0x6a>
				if(buttonPress == 0){
 486:	11 11       	cpse	r17, r1
 488:	03 c0       	rjmp	.+6      	; 0x490 <main+0x6a>
					buttonPress = 1;
					toggleButton();
 48a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <toggleButton>
				prime = primes(prime);
				cykleState = 1;
			}	
			if (PINB & (1<<PB7)) {
				if(buttonPress == 0){
					buttonPress = 1;
 48e:	1a 2d       	mov	r17, r10
					toggleButton();
				}
			}
			
			if (!(PINB & (1<<PB7))) {
 490:	83 b1       	in	r24, 0x03	; 3
				buttonPress = 0;
 492:	88 0f       	add	r24, r24
 494:	88 0b       	sbc	r24, r24
 496:	18 23       	and	r17, r24
 498:	20 c0       	rjmp	.+64     	; 0x4da <main+0xb4>
			
		}
		//clearLCD();
		while (TCNT1 >= nextTimerValue)
		{
			if (cykleState == 1) {
 49a:	01 30       	cpi	r16, 0x01	; 1
 49c:	61 f4       	brne	.+24     	; 0x4b6 <main+0x90>
				state = toggle(state);
 49e:	8d 2d       	mov	r24, r13
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <toggle>
 4a6:	d8 2e       	mov	r13, r24
				prime = primes(prime);
 4a8:	b7 01       	movw	r22, r14
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 b6 01 	call	0x36c	; 0x36c <primes>
 4b2:	7b 01       	movw	r14, r22
				cykleState = 0;
 4b4:	0c 2d       	mov	r16, r12
			}
			if (PINB & (1<<PB7)) {
 4b6:	1f 9b       	sbis	0x03, 7	; 3
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <main+0x9e>
				if(buttonPress == 0){
 4ba:	11 11       	cpse	r17, r1
 4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <main+0x9e>
					buttonPress = 1;
					toggleButton();
 4be:	0e 94 fe 01 	call	0x3fc	; 0x3fc <toggleButton>
				prime = primes(prime);
				cykleState = 0;
			}
			if (PINB & (1<<PB7)) {
				if(buttonPress == 0){
					buttonPress = 1;
 4c2:	1b 2d       	mov	r17, r11
					toggleButton();
				}
			}
			if (!(PINB & (1<<PB7))) {
 4c4:	83 b1       	in	r24, 0x03	; 3
				buttonPress = 0;
 4c6:	88 0f       	add	r24, r24
 4c8:	88 0b       	sbc	r24, r24
 4ca:	18 23       	and	r17, r24
			if (buttonPress == 0){
				LCDDR13 = 0x0;
				LCDDR18 = 0x1;
			}
			*/
			if (TCNT1 >= wrapValue){
 4cc:	88 81       	ld	r24, Y
 4ce:	99 81       	ldd	r25, Y+1	; 0x01
 4d0:	82 31       	cpi	r24, 0x12	; 18
 4d2:	9a 47       	sbci	r25, 0x7A	; 122
 4d4:	10 f0       	brcs	.+4      	; 0x4da <main+0xb4>
				TCNT1 = 0;
 4d6:	19 82       	std	Y+1, r1	; 0x01
 4d8:	18 82       	st	Y, r1
			}
			*/
			
		}
		//clearLCD();
		while (TCNT1 >= nextTimerValue)
 4da:	88 81       	ld	r24, Y
 4dc:	99 81       	ldd	r25, Y+1	; 0x01
 4de:	89 30       	cpi	r24, 0x09	; 9
 4e0:	9d 43       	sbci	r25, 0x3D	; 61
 4e2:	d8 f6       	brcc	.-74     	; 0x49a <main+0x74>
	uint8_t ON = 0;
	timer_init();
	nextTimerValue = ((8000000/256)/2);		// calculate the clock time for 1Hz
	uint16_t wrapValue = nextTimerValue*2;
	while(1){
		while (TCNT1 <= nextTimerValue)
 4e4:	88 81       	ld	r24, Y
 4e6:	99 81       	ldd	r25, Y+1	; 0x01
 4e8:	8a 30       	cpi	r24, 0x0A	; 10
 4ea:	9d 43       	sbci	r25, 0x3D	; 61
 4ec:	08 f4       	brcc	.+2      	; 0x4f0 <main+0xca>
 4ee:	bb cf       	rjmp	.-138    	; 0x466 <main+0x40>
		//clearLCD();
		
	}
	return 0;
}
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	1f 91       	pop	r17
 4fa:	0f 91       	pop	r16
 4fc:	ff 90       	pop	r15
 4fe:	ef 90       	pop	r14
 500:	df 90       	pop	r13
 502:	cf 90       	pop	r12
 504:	bf 90       	pop	r11
 506:	af 90       	pop	r10
 508:	08 95       	ret

0000050a <__divmodsi4>:
 50a:	05 2e       	mov	r0, r21
 50c:	97 fb       	bst	r25, 7
 50e:	1e f4       	brtc	.+6      	; 0x516 <__divmodsi4+0xc>
 510:	00 94       	com	r0
 512:	0e 94 9c 02 	call	0x538	; 0x538 <__negsi2>
 516:	57 fd       	sbrc	r21, 7
 518:	07 d0       	rcall	.+14     	; 0x528 <__divmodsi4_neg2>
 51a:	0e 94 a4 02 	call	0x548	; 0x548 <__udivmodsi4>
 51e:	07 fc       	sbrc	r0, 7
 520:	03 d0       	rcall	.+6      	; 0x528 <__divmodsi4_neg2>
 522:	4e f4       	brtc	.+18     	; 0x536 <__divmodsi4_exit>
 524:	0c 94 9c 02 	jmp	0x538	; 0x538 <__negsi2>

00000528 <__divmodsi4_neg2>:
 528:	50 95       	com	r21
 52a:	40 95       	com	r20
 52c:	30 95       	com	r19
 52e:	21 95       	neg	r18
 530:	3f 4f       	sbci	r19, 0xFF	; 255
 532:	4f 4f       	sbci	r20, 0xFF	; 255
 534:	5f 4f       	sbci	r21, 0xFF	; 255

00000536 <__divmodsi4_exit>:
 536:	08 95       	ret

00000538 <__negsi2>:
 538:	90 95       	com	r25
 53a:	80 95       	com	r24
 53c:	70 95       	com	r23
 53e:	61 95       	neg	r22
 540:	7f 4f       	sbci	r23, 0xFF	; 255
 542:	8f 4f       	sbci	r24, 0xFF	; 255
 544:	9f 4f       	sbci	r25, 0xFF	; 255
 546:	08 95       	ret

00000548 <__udivmodsi4>:
 548:	a1 e2       	ldi	r26, 0x21	; 33
 54a:	1a 2e       	mov	r1, r26
 54c:	aa 1b       	sub	r26, r26
 54e:	bb 1b       	sub	r27, r27
 550:	fd 01       	movw	r30, r26
 552:	0d c0       	rjmp	.+26     	; 0x56e <__udivmodsi4_ep>

00000554 <__udivmodsi4_loop>:
 554:	aa 1f       	adc	r26, r26
 556:	bb 1f       	adc	r27, r27
 558:	ee 1f       	adc	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	a2 17       	cp	r26, r18
 55e:	b3 07       	cpc	r27, r19
 560:	e4 07       	cpc	r30, r20
 562:	f5 07       	cpc	r31, r21
 564:	20 f0       	brcs	.+8      	; 0x56e <__udivmodsi4_ep>
 566:	a2 1b       	sub	r26, r18
 568:	b3 0b       	sbc	r27, r19
 56a:	e4 0b       	sbc	r30, r20
 56c:	f5 0b       	sbc	r31, r21

0000056e <__udivmodsi4_ep>:
 56e:	66 1f       	adc	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	1a 94       	dec	r1
 578:	69 f7       	brne	.-38     	; 0x554 <__udivmodsi4_loop>
 57a:	60 95       	com	r22
 57c:	70 95       	com	r23
 57e:	80 95       	com	r24
 580:	90 95       	com	r25
 582:	9b 01       	movw	r18, r22
 584:	ac 01       	movw	r20, r24
 586:	bd 01       	movw	r22, r26
 588:	cf 01       	movw	r24, r30
 58a:	08 95       	ret

0000058c <sprintf>:
 58c:	ae e0       	ldi	r26, 0x0E	; 14
 58e:	b0 e0       	ldi	r27, 0x00	; 0
 590:	ec ec       	ldi	r30, 0xCC	; 204
 592:	f2 e0       	ldi	r31, 0x02	; 2
 594:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__prologue_saves__+0x1c>
 598:	0d 89       	ldd	r16, Y+21	; 0x15
 59a:	1e 89       	ldd	r17, Y+22	; 0x16
 59c:	86 e0       	ldi	r24, 0x06	; 6
 59e:	8c 83       	std	Y+4, r24	; 0x04
 5a0:	1a 83       	std	Y+2, r17	; 0x02
 5a2:	09 83       	std	Y+1, r16	; 0x01
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	9f e7       	ldi	r25, 0x7F	; 127
 5a8:	9e 83       	std	Y+6, r25	; 0x06
 5aa:	8d 83       	std	Y+5, r24	; 0x05
 5ac:	ae 01       	movw	r20, r28
 5ae:	47 5e       	subi	r20, 0xE7	; 231
 5b0:	5f 4f       	sbci	r21, 0xFF	; 255
 5b2:	6f 89       	ldd	r22, Y+23	; 0x17
 5b4:	78 8d       	ldd	r23, Y+24	; 0x18
 5b6:	ce 01       	movw	r24, r28
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <vfprintf>
 5be:	ef 81       	ldd	r30, Y+7	; 0x07
 5c0:	f8 85       	ldd	r31, Y+8	; 0x08
 5c2:	e0 0f       	add	r30, r16
 5c4:	f1 1f       	adc	r31, r17
 5c6:	10 82       	st	Z, r1
 5c8:	2e 96       	adiw	r28, 0x0e	; 14
 5ca:	e4 e0       	ldi	r30, 0x04	; 4
 5cc:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__epilogue_restores__+0x1c>

000005d0 <vfprintf>:
 5d0:	ab e0       	ldi	r26, 0x0B	; 11
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	ee ee       	ldi	r30, 0xEE	; 238
 5d6:	f2 e0       	ldi	r31, 0x02	; 2
 5d8:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__prologue_saves__>
 5dc:	6c 01       	movw	r12, r24
 5de:	7b 01       	movw	r14, r22
 5e0:	8a 01       	movw	r16, r20
 5e2:	fc 01       	movw	r30, r24
 5e4:	17 82       	std	Z+7, r1	; 0x07
 5e6:	16 82       	std	Z+6, r1	; 0x06
 5e8:	83 81       	ldd	r24, Z+3	; 0x03
 5ea:	81 ff       	sbrs	r24, 1
 5ec:	cc c1       	rjmp	.+920    	; 0x986 <vfprintf+0x3b6>
 5ee:	ce 01       	movw	r24, r28
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	3c 01       	movw	r6, r24
 5f4:	f6 01       	movw	r30, r12
 5f6:	93 81       	ldd	r25, Z+3	; 0x03
 5f8:	f7 01       	movw	r30, r14
 5fa:	93 fd       	sbrc	r25, 3
 5fc:	85 91       	lpm	r24, Z+
 5fe:	93 ff       	sbrs	r25, 3
 600:	81 91       	ld	r24, Z+
 602:	7f 01       	movw	r14, r30
 604:	88 23       	and	r24, r24
 606:	09 f4       	brne	.+2      	; 0x60a <vfprintf+0x3a>
 608:	ba c1       	rjmp	.+884    	; 0x97e <vfprintf+0x3ae>
 60a:	85 32       	cpi	r24, 0x25	; 37
 60c:	39 f4       	brne	.+14     	; 0x61c <vfprintf+0x4c>
 60e:	93 fd       	sbrc	r25, 3
 610:	85 91       	lpm	r24, Z+
 612:	93 ff       	sbrs	r25, 3
 614:	81 91       	ld	r24, Z+
 616:	7f 01       	movw	r14, r30
 618:	85 32       	cpi	r24, 0x25	; 37
 61a:	29 f4       	brne	.+10     	; 0x626 <vfprintf+0x56>
 61c:	b6 01       	movw	r22, r12
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 624:	e7 cf       	rjmp	.-50     	; 0x5f4 <vfprintf+0x24>
 626:	91 2c       	mov	r9, r1
 628:	21 2c       	mov	r2, r1
 62a:	31 2c       	mov	r3, r1
 62c:	ff e1       	ldi	r31, 0x1F	; 31
 62e:	f3 15       	cp	r31, r3
 630:	d8 f0       	brcs	.+54     	; 0x668 <vfprintf+0x98>
 632:	8b 32       	cpi	r24, 0x2B	; 43
 634:	79 f0       	breq	.+30     	; 0x654 <vfprintf+0x84>
 636:	38 f4       	brcc	.+14     	; 0x646 <vfprintf+0x76>
 638:	80 32       	cpi	r24, 0x20	; 32
 63a:	79 f0       	breq	.+30     	; 0x65a <vfprintf+0x8a>
 63c:	83 32       	cpi	r24, 0x23	; 35
 63e:	a1 f4       	brne	.+40     	; 0x668 <vfprintf+0x98>
 640:	23 2d       	mov	r18, r3
 642:	20 61       	ori	r18, 0x10	; 16
 644:	1d c0       	rjmp	.+58     	; 0x680 <vfprintf+0xb0>
 646:	8d 32       	cpi	r24, 0x2D	; 45
 648:	61 f0       	breq	.+24     	; 0x662 <vfprintf+0x92>
 64a:	80 33       	cpi	r24, 0x30	; 48
 64c:	69 f4       	brne	.+26     	; 0x668 <vfprintf+0x98>
 64e:	23 2d       	mov	r18, r3
 650:	21 60       	ori	r18, 0x01	; 1
 652:	16 c0       	rjmp	.+44     	; 0x680 <vfprintf+0xb0>
 654:	83 2d       	mov	r24, r3
 656:	82 60       	ori	r24, 0x02	; 2
 658:	38 2e       	mov	r3, r24
 65a:	e3 2d       	mov	r30, r3
 65c:	e4 60       	ori	r30, 0x04	; 4
 65e:	3e 2e       	mov	r3, r30
 660:	2a c0       	rjmp	.+84     	; 0x6b6 <vfprintf+0xe6>
 662:	f3 2d       	mov	r31, r3
 664:	f8 60       	ori	r31, 0x08	; 8
 666:	1d c0       	rjmp	.+58     	; 0x6a2 <vfprintf+0xd2>
 668:	37 fc       	sbrc	r3, 7
 66a:	2d c0       	rjmp	.+90     	; 0x6c6 <vfprintf+0xf6>
 66c:	20 ed       	ldi	r18, 0xD0	; 208
 66e:	28 0f       	add	r18, r24
 670:	2a 30       	cpi	r18, 0x0A	; 10
 672:	40 f0       	brcs	.+16     	; 0x684 <vfprintf+0xb4>
 674:	8e 32       	cpi	r24, 0x2E	; 46
 676:	b9 f4       	brne	.+46     	; 0x6a6 <vfprintf+0xd6>
 678:	36 fc       	sbrc	r3, 6
 67a:	81 c1       	rjmp	.+770    	; 0x97e <vfprintf+0x3ae>
 67c:	23 2d       	mov	r18, r3
 67e:	20 64       	ori	r18, 0x40	; 64
 680:	32 2e       	mov	r3, r18
 682:	19 c0       	rjmp	.+50     	; 0x6b6 <vfprintf+0xe6>
 684:	36 fe       	sbrs	r3, 6
 686:	06 c0       	rjmp	.+12     	; 0x694 <vfprintf+0xc4>
 688:	8a e0       	ldi	r24, 0x0A	; 10
 68a:	98 9e       	mul	r9, r24
 68c:	20 0d       	add	r18, r0
 68e:	11 24       	eor	r1, r1
 690:	92 2e       	mov	r9, r18
 692:	11 c0       	rjmp	.+34     	; 0x6b6 <vfprintf+0xe6>
 694:	ea e0       	ldi	r30, 0x0A	; 10
 696:	2e 9e       	mul	r2, r30
 698:	20 0d       	add	r18, r0
 69a:	11 24       	eor	r1, r1
 69c:	22 2e       	mov	r2, r18
 69e:	f3 2d       	mov	r31, r3
 6a0:	f0 62       	ori	r31, 0x20	; 32
 6a2:	3f 2e       	mov	r3, r31
 6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <vfprintf+0xe6>
 6a6:	8c 36       	cpi	r24, 0x6C	; 108
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <vfprintf+0xe2>
 6aa:	83 2d       	mov	r24, r3
 6ac:	80 68       	ori	r24, 0x80	; 128
 6ae:	38 2e       	mov	r3, r24
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <vfprintf+0xe6>
 6b2:	88 36       	cpi	r24, 0x68	; 104
 6b4:	41 f4       	brne	.+16     	; 0x6c6 <vfprintf+0xf6>
 6b6:	f7 01       	movw	r30, r14
 6b8:	93 fd       	sbrc	r25, 3
 6ba:	85 91       	lpm	r24, Z+
 6bc:	93 ff       	sbrs	r25, 3
 6be:	81 91       	ld	r24, Z+
 6c0:	7f 01       	movw	r14, r30
 6c2:	81 11       	cpse	r24, r1
 6c4:	b3 cf       	rjmp	.-154    	; 0x62c <vfprintf+0x5c>
 6c6:	98 2f       	mov	r25, r24
 6c8:	9f 7d       	andi	r25, 0xDF	; 223
 6ca:	95 54       	subi	r25, 0x45	; 69
 6cc:	93 30       	cpi	r25, 0x03	; 3
 6ce:	28 f4       	brcc	.+10     	; 0x6da <vfprintf+0x10a>
 6d0:	0c 5f       	subi	r16, 0xFC	; 252
 6d2:	1f 4f       	sbci	r17, 0xFF	; 255
 6d4:	9f e3       	ldi	r25, 0x3F	; 63
 6d6:	99 83       	std	Y+1, r25	; 0x01
 6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <vfprintf+0x124>
 6da:	83 36       	cpi	r24, 0x63	; 99
 6dc:	31 f0       	breq	.+12     	; 0x6ea <vfprintf+0x11a>
 6de:	83 37       	cpi	r24, 0x73	; 115
 6e0:	71 f0       	breq	.+28     	; 0x6fe <vfprintf+0x12e>
 6e2:	83 35       	cpi	r24, 0x53	; 83
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <vfprintf+0x118>
 6e6:	59 c0       	rjmp	.+178    	; 0x79a <vfprintf+0x1ca>
 6e8:	21 c0       	rjmp	.+66     	; 0x72c <vfprintf+0x15c>
 6ea:	f8 01       	movw	r30, r16
 6ec:	80 81       	ld	r24, Z
 6ee:	89 83       	std	Y+1, r24	; 0x01
 6f0:	0e 5f       	subi	r16, 0xFE	; 254
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	88 24       	eor	r8, r8
 6f6:	83 94       	inc	r8
 6f8:	91 2c       	mov	r9, r1
 6fa:	53 01       	movw	r10, r6
 6fc:	13 c0       	rjmp	.+38     	; 0x724 <vfprintf+0x154>
 6fe:	28 01       	movw	r4, r16
 700:	f2 e0       	ldi	r31, 0x02	; 2
 702:	4f 0e       	add	r4, r31
 704:	51 1c       	adc	r5, r1
 706:	f8 01       	movw	r30, r16
 708:	a0 80       	ld	r10, Z
 70a:	b1 80       	ldd	r11, Z+1	; 0x01
 70c:	36 fe       	sbrs	r3, 6
 70e:	03 c0       	rjmp	.+6      	; 0x716 <vfprintf+0x146>
 710:	69 2d       	mov	r22, r9
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <vfprintf+0x14a>
 716:	6f ef       	ldi	r22, 0xFF	; 255
 718:	7f ef       	ldi	r23, 0xFF	; 255
 71a:	c5 01       	movw	r24, r10
 71c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <strnlen>
 720:	4c 01       	movw	r8, r24
 722:	82 01       	movw	r16, r4
 724:	f3 2d       	mov	r31, r3
 726:	ff 77       	andi	r31, 0x7F	; 127
 728:	3f 2e       	mov	r3, r31
 72a:	16 c0       	rjmp	.+44     	; 0x758 <vfprintf+0x188>
 72c:	28 01       	movw	r4, r16
 72e:	22 e0       	ldi	r18, 0x02	; 2
 730:	42 0e       	add	r4, r18
 732:	51 1c       	adc	r5, r1
 734:	f8 01       	movw	r30, r16
 736:	a0 80       	ld	r10, Z
 738:	b1 80       	ldd	r11, Z+1	; 0x01
 73a:	36 fe       	sbrs	r3, 6
 73c:	03 c0       	rjmp	.+6      	; 0x744 <vfprintf+0x174>
 73e:	69 2d       	mov	r22, r9
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <vfprintf+0x178>
 744:	6f ef       	ldi	r22, 0xFF	; 255
 746:	7f ef       	ldi	r23, 0xFF	; 255
 748:	c5 01       	movw	r24, r10
 74a:	0e 94 c9 04 	call	0x992	; 0x992 <strnlen_P>
 74e:	4c 01       	movw	r8, r24
 750:	f3 2d       	mov	r31, r3
 752:	f0 68       	ori	r31, 0x80	; 128
 754:	3f 2e       	mov	r3, r31
 756:	82 01       	movw	r16, r4
 758:	33 fc       	sbrc	r3, 3
 75a:	1b c0       	rjmp	.+54     	; 0x792 <vfprintf+0x1c2>
 75c:	82 2d       	mov	r24, r2
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	88 16       	cp	r8, r24
 762:	99 06       	cpc	r9, r25
 764:	b0 f4       	brcc	.+44     	; 0x792 <vfprintf+0x1c2>
 766:	b6 01       	movw	r22, r12
 768:	80 e2       	ldi	r24, 0x20	; 32
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 770:	2a 94       	dec	r2
 772:	f4 cf       	rjmp	.-24     	; 0x75c <vfprintf+0x18c>
 774:	f5 01       	movw	r30, r10
 776:	37 fc       	sbrc	r3, 7
 778:	85 91       	lpm	r24, Z+
 77a:	37 fe       	sbrs	r3, 7
 77c:	81 91       	ld	r24, Z+
 77e:	5f 01       	movw	r10, r30
 780:	b6 01       	movw	r22, r12
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 788:	21 10       	cpse	r2, r1
 78a:	2a 94       	dec	r2
 78c:	21 e0       	ldi	r18, 0x01	; 1
 78e:	82 1a       	sub	r8, r18
 790:	91 08       	sbc	r9, r1
 792:	81 14       	cp	r8, r1
 794:	91 04       	cpc	r9, r1
 796:	71 f7       	brne	.-36     	; 0x774 <vfprintf+0x1a4>
 798:	e8 c0       	rjmp	.+464    	; 0x96a <vfprintf+0x39a>
 79a:	84 36       	cpi	r24, 0x64	; 100
 79c:	11 f0       	breq	.+4      	; 0x7a2 <vfprintf+0x1d2>
 79e:	89 36       	cpi	r24, 0x69	; 105
 7a0:	41 f5       	brne	.+80     	; 0x7f2 <vfprintf+0x222>
 7a2:	f8 01       	movw	r30, r16
 7a4:	37 fe       	sbrs	r3, 7
 7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <vfprintf+0x1e6>
 7a8:	60 81       	ld	r22, Z
 7aa:	71 81       	ldd	r23, Z+1	; 0x01
 7ac:	82 81       	ldd	r24, Z+2	; 0x02
 7ae:	93 81       	ldd	r25, Z+3	; 0x03
 7b0:	0c 5f       	subi	r16, 0xFC	; 252
 7b2:	1f 4f       	sbci	r17, 0xFF	; 255
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <vfprintf+0x1f6>
 7b6:	60 81       	ld	r22, Z
 7b8:	71 81       	ldd	r23, Z+1	; 0x01
 7ba:	07 2e       	mov	r0, r23
 7bc:	00 0c       	add	r0, r0
 7be:	88 0b       	sbc	r24, r24
 7c0:	99 0b       	sbc	r25, r25
 7c2:	0e 5f       	subi	r16, 0xFE	; 254
 7c4:	1f 4f       	sbci	r17, 0xFF	; 255
 7c6:	f3 2d       	mov	r31, r3
 7c8:	ff 76       	andi	r31, 0x6F	; 111
 7ca:	3f 2e       	mov	r3, r31
 7cc:	97 ff       	sbrs	r25, 7
 7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <vfprintf+0x212>
 7d0:	90 95       	com	r25
 7d2:	80 95       	com	r24
 7d4:	70 95       	com	r23
 7d6:	61 95       	neg	r22
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	f0 68       	ori	r31, 0x80	; 128
 7e0:	3f 2e       	mov	r3, r31
 7e2:	2a e0       	ldi	r18, 0x0A	; 10
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	a3 01       	movw	r20, r6
 7e8:	0e 94 1b 05 	call	0xa36	; 0xa36 <__ultoa_invert>
 7ec:	88 2e       	mov	r8, r24
 7ee:	86 18       	sub	r8, r6
 7f0:	45 c0       	rjmp	.+138    	; 0x87c <vfprintf+0x2ac>
 7f2:	85 37       	cpi	r24, 0x75	; 117
 7f4:	31 f4       	brne	.+12     	; 0x802 <vfprintf+0x232>
 7f6:	23 2d       	mov	r18, r3
 7f8:	2f 7e       	andi	r18, 0xEF	; 239
 7fa:	b2 2e       	mov	r11, r18
 7fc:	2a e0       	ldi	r18, 0x0A	; 10
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	25 c0       	rjmp	.+74     	; 0x84c <vfprintf+0x27c>
 802:	93 2d       	mov	r25, r3
 804:	99 7f       	andi	r25, 0xF9	; 249
 806:	b9 2e       	mov	r11, r25
 808:	8f 36       	cpi	r24, 0x6F	; 111
 80a:	c1 f0       	breq	.+48     	; 0x83c <vfprintf+0x26c>
 80c:	18 f4       	brcc	.+6      	; 0x814 <vfprintf+0x244>
 80e:	88 35       	cpi	r24, 0x58	; 88
 810:	79 f0       	breq	.+30     	; 0x830 <vfprintf+0x260>
 812:	b5 c0       	rjmp	.+362    	; 0x97e <vfprintf+0x3ae>
 814:	80 37       	cpi	r24, 0x70	; 112
 816:	19 f0       	breq	.+6      	; 0x81e <vfprintf+0x24e>
 818:	88 37       	cpi	r24, 0x78	; 120
 81a:	21 f0       	breq	.+8      	; 0x824 <vfprintf+0x254>
 81c:	b0 c0       	rjmp	.+352    	; 0x97e <vfprintf+0x3ae>
 81e:	e9 2f       	mov	r30, r25
 820:	e0 61       	ori	r30, 0x10	; 16
 822:	be 2e       	mov	r11, r30
 824:	b4 fe       	sbrs	r11, 4
 826:	0d c0       	rjmp	.+26     	; 0x842 <vfprintf+0x272>
 828:	fb 2d       	mov	r31, r11
 82a:	f4 60       	ori	r31, 0x04	; 4
 82c:	bf 2e       	mov	r11, r31
 82e:	09 c0       	rjmp	.+18     	; 0x842 <vfprintf+0x272>
 830:	34 fe       	sbrs	r3, 4
 832:	0a c0       	rjmp	.+20     	; 0x848 <vfprintf+0x278>
 834:	29 2f       	mov	r18, r25
 836:	26 60       	ori	r18, 0x06	; 6
 838:	b2 2e       	mov	r11, r18
 83a:	06 c0       	rjmp	.+12     	; 0x848 <vfprintf+0x278>
 83c:	28 e0       	ldi	r18, 0x08	; 8
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	05 c0       	rjmp	.+10     	; 0x84c <vfprintf+0x27c>
 842:	20 e1       	ldi	r18, 0x10	; 16
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	02 c0       	rjmp	.+4      	; 0x84c <vfprintf+0x27c>
 848:	20 e1       	ldi	r18, 0x10	; 16
 84a:	32 e0       	ldi	r19, 0x02	; 2
 84c:	f8 01       	movw	r30, r16
 84e:	b7 fe       	sbrs	r11, 7
 850:	07 c0       	rjmp	.+14     	; 0x860 <vfprintf+0x290>
 852:	60 81       	ld	r22, Z
 854:	71 81       	ldd	r23, Z+1	; 0x01
 856:	82 81       	ldd	r24, Z+2	; 0x02
 858:	93 81       	ldd	r25, Z+3	; 0x03
 85a:	0c 5f       	subi	r16, 0xFC	; 252
 85c:	1f 4f       	sbci	r17, 0xFF	; 255
 85e:	06 c0       	rjmp	.+12     	; 0x86c <vfprintf+0x29c>
 860:	60 81       	ld	r22, Z
 862:	71 81       	ldd	r23, Z+1	; 0x01
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 5f       	subi	r16, 0xFE	; 254
 86a:	1f 4f       	sbci	r17, 0xFF	; 255
 86c:	a3 01       	movw	r20, r6
 86e:	0e 94 1b 05 	call	0xa36	; 0xa36 <__ultoa_invert>
 872:	88 2e       	mov	r8, r24
 874:	86 18       	sub	r8, r6
 876:	fb 2d       	mov	r31, r11
 878:	ff 77       	andi	r31, 0x7F	; 127
 87a:	3f 2e       	mov	r3, r31
 87c:	36 fe       	sbrs	r3, 6
 87e:	0d c0       	rjmp	.+26     	; 0x89a <vfprintf+0x2ca>
 880:	23 2d       	mov	r18, r3
 882:	2e 7f       	andi	r18, 0xFE	; 254
 884:	a2 2e       	mov	r10, r18
 886:	89 14       	cp	r8, r9
 888:	58 f4       	brcc	.+22     	; 0x8a0 <vfprintf+0x2d0>
 88a:	34 fe       	sbrs	r3, 4
 88c:	0b c0       	rjmp	.+22     	; 0x8a4 <vfprintf+0x2d4>
 88e:	32 fc       	sbrc	r3, 2
 890:	09 c0       	rjmp	.+18     	; 0x8a4 <vfprintf+0x2d4>
 892:	83 2d       	mov	r24, r3
 894:	8e 7e       	andi	r24, 0xEE	; 238
 896:	a8 2e       	mov	r10, r24
 898:	05 c0       	rjmp	.+10     	; 0x8a4 <vfprintf+0x2d4>
 89a:	b8 2c       	mov	r11, r8
 89c:	a3 2c       	mov	r10, r3
 89e:	03 c0       	rjmp	.+6      	; 0x8a6 <vfprintf+0x2d6>
 8a0:	b8 2c       	mov	r11, r8
 8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <vfprintf+0x2d6>
 8a4:	b9 2c       	mov	r11, r9
 8a6:	a4 fe       	sbrs	r10, 4
 8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <vfprintf+0x2f8>
 8aa:	fe 01       	movw	r30, r28
 8ac:	e8 0d       	add	r30, r8
 8ae:	f1 1d       	adc	r31, r1
 8b0:	80 81       	ld	r24, Z
 8b2:	80 33       	cpi	r24, 0x30	; 48
 8b4:	21 f4       	brne	.+8      	; 0x8be <vfprintf+0x2ee>
 8b6:	9a 2d       	mov	r25, r10
 8b8:	99 7e       	andi	r25, 0xE9	; 233
 8ba:	a9 2e       	mov	r10, r25
 8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <vfprintf+0x300>
 8be:	a2 fe       	sbrs	r10, 2
 8c0:	06 c0       	rjmp	.+12     	; 0x8ce <vfprintf+0x2fe>
 8c2:	b3 94       	inc	r11
 8c4:	b3 94       	inc	r11
 8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <vfprintf+0x300>
 8c8:	8a 2d       	mov	r24, r10
 8ca:	86 78       	andi	r24, 0x86	; 134
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <vfprintf+0x300>
 8ce:	b3 94       	inc	r11
 8d0:	a3 fc       	sbrc	r10, 3
 8d2:	11 c0       	rjmp	.+34     	; 0x8f6 <vfprintf+0x326>
 8d4:	a0 fe       	sbrs	r10, 0
 8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <vfprintf+0x314>
 8d8:	b2 14       	cp	r11, r2
 8da:	88 f4       	brcc	.+34     	; 0x8fe <vfprintf+0x32e>
 8dc:	28 0c       	add	r2, r8
 8de:	92 2c       	mov	r9, r2
 8e0:	9b 18       	sub	r9, r11
 8e2:	0e c0       	rjmp	.+28     	; 0x900 <vfprintf+0x330>
 8e4:	b2 14       	cp	r11, r2
 8e6:	60 f4       	brcc	.+24     	; 0x900 <vfprintf+0x330>
 8e8:	b6 01       	movw	r22, r12
 8ea:	80 e2       	ldi	r24, 0x20	; 32
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 8f2:	b3 94       	inc	r11
 8f4:	f7 cf       	rjmp	.-18     	; 0x8e4 <vfprintf+0x314>
 8f6:	b2 14       	cp	r11, r2
 8f8:	18 f4       	brcc	.+6      	; 0x900 <vfprintf+0x330>
 8fa:	2b 18       	sub	r2, r11
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <vfprintf+0x332>
 8fe:	98 2c       	mov	r9, r8
 900:	21 2c       	mov	r2, r1
 902:	a4 fe       	sbrs	r10, 4
 904:	10 c0       	rjmp	.+32     	; 0x926 <vfprintf+0x356>
 906:	b6 01       	movw	r22, r12
 908:	80 e3       	ldi	r24, 0x30	; 48
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 910:	a2 fe       	sbrs	r10, 2
 912:	17 c0       	rjmp	.+46     	; 0x942 <vfprintf+0x372>
 914:	a1 fc       	sbrc	r10, 1
 916:	03 c0       	rjmp	.+6      	; 0x91e <vfprintf+0x34e>
 918:	88 e7       	ldi	r24, 0x78	; 120
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	02 c0       	rjmp	.+4      	; 0x922 <vfprintf+0x352>
 91e:	88 e5       	ldi	r24, 0x58	; 88
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	b6 01       	movw	r22, r12
 924:	0c c0       	rjmp	.+24     	; 0x93e <vfprintf+0x36e>
 926:	8a 2d       	mov	r24, r10
 928:	86 78       	andi	r24, 0x86	; 134
 92a:	59 f0       	breq	.+22     	; 0x942 <vfprintf+0x372>
 92c:	a1 fe       	sbrs	r10, 1
 92e:	02 c0       	rjmp	.+4      	; 0x934 <vfprintf+0x364>
 930:	8b e2       	ldi	r24, 0x2B	; 43
 932:	01 c0       	rjmp	.+2      	; 0x936 <vfprintf+0x366>
 934:	80 e2       	ldi	r24, 0x20	; 32
 936:	a7 fc       	sbrc	r10, 7
 938:	8d e2       	ldi	r24, 0x2D	; 45
 93a:	b6 01       	movw	r22, r12
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 942:	89 14       	cp	r8, r9
 944:	38 f4       	brcc	.+14     	; 0x954 <vfprintf+0x384>
 946:	b6 01       	movw	r22, r12
 948:	80 e3       	ldi	r24, 0x30	; 48
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 950:	9a 94       	dec	r9
 952:	f7 cf       	rjmp	.-18     	; 0x942 <vfprintf+0x372>
 954:	8a 94       	dec	r8
 956:	f3 01       	movw	r30, r6
 958:	e8 0d       	add	r30, r8
 95a:	f1 1d       	adc	r31, r1
 95c:	80 81       	ld	r24, Z
 95e:	b6 01       	movw	r22, r12
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 966:	81 10       	cpse	r8, r1
 968:	f5 cf       	rjmp	.-22     	; 0x954 <vfprintf+0x384>
 96a:	22 20       	and	r2, r2
 96c:	09 f4       	brne	.+2      	; 0x970 <vfprintf+0x3a0>
 96e:	42 ce       	rjmp	.-892    	; 0x5f4 <vfprintf+0x24>
 970:	b6 01       	movw	r22, r12
 972:	80 e2       	ldi	r24, 0x20	; 32
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 97a:	2a 94       	dec	r2
 97c:	f6 cf       	rjmp	.-20     	; 0x96a <vfprintf+0x39a>
 97e:	f6 01       	movw	r30, r12
 980:	86 81       	ldd	r24, Z+6	; 0x06
 982:	97 81       	ldd	r25, Z+7	; 0x07
 984:	02 c0       	rjmp	.+4      	; 0x98a <vfprintf+0x3ba>
 986:	8f ef       	ldi	r24, 0xFF	; 255
 988:	9f ef       	ldi	r25, 0xFF	; 255
 98a:	2b 96       	adiw	r28, 0x0b	; 11
 98c:	e2 e1       	ldi	r30, 0x12	; 18
 98e:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__epilogue_restores__>

00000992 <strnlen_P>:
 992:	fc 01       	movw	r30, r24
 994:	05 90       	lpm	r0, Z+
 996:	61 50       	subi	r22, 0x01	; 1
 998:	70 40       	sbci	r23, 0x00	; 0
 99a:	01 10       	cpse	r0, r1
 99c:	d8 f7       	brcc	.-10     	; 0x994 <strnlen_P+0x2>
 99e:	80 95       	com	r24
 9a0:	90 95       	com	r25
 9a2:	8e 0f       	add	r24, r30
 9a4:	9f 1f       	adc	r25, r31
 9a6:	08 95       	ret

000009a8 <strnlen>:
 9a8:	fc 01       	movw	r30, r24
 9aa:	61 50       	subi	r22, 0x01	; 1
 9ac:	70 40       	sbci	r23, 0x00	; 0
 9ae:	01 90       	ld	r0, Z+
 9b0:	01 10       	cpse	r0, r1
 9b2:	d8 f7       	brcc	.-10     	; 0x9aa <strnlen+0x2>
 9b4:	80 95       	com	r24
 9b6:	90 95       	com	r25
 9b8:	8e 0f       	add	r24, r30
 9ba:	9f 1f       	adc	r25, r31
 9bc:	08 95       	ret

000009be <fputc>:
 9be:	0f 93       	push	r16
 9c0:	1f 93       	push	r17
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	fb 01       	movw	r30, r22
 9c8:	23 81       	ldd	r18, Z+3	; 0x03
 9ca:	21 fd       	sbrc	r18, 1
 9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <fputc+0x16>
 9ce:	8f ef       	ldi	r24, 0xFF	; 255
 9d0:	9f ef       	ldi	r25, 0xFF	; 255
 9d2:	2c c0       	rjmp	.+88     	; 0xa2c <fputc+0x6e>
 9d4:	22 ff       	sbrs	r18, 2
 9d6:	16 c0       	rjmp	.+44     	; 0xa04 <fputc+0x46>
 9d8:	46 81       	ldd	r20, Z+6	; 0x06
 9da:	57 81       	ldd	r21, Z+7	; 0x07
 9dc:	24 81       	ldd	r18, Z+4	; 0x04
 9de:	35 81       	ldd	r19, Z+5	; 0x05
 9e0:	42 17       	cp	r20, r18
 9e2:	53 07       	cpc	r21, r19
 9e4:	44 f4       	brge	.+16     	; 0x9f6 <fputc+0x38>
 9e6:	a0 81       	ld	r26, Z
 9e8:	b1 81       	ldd	r27, Z+1	; 0x01
 9ea:	9d 01       	movw	r18, r26
 9ec:	2f 5f       	subi	r18, 0xFF	; 255
 9ee:	3f 4f       	sbci	r19, 0xFF	; 255
 9f0:	31 83       	std	Z+1, r19	; 0x01
 9f2:	20 83       	st	Z, r18
 9f4:	8c 93       	st	X, r24
 9f6:	26 81       	ldd	r18, Z+6	; 0x06
 9f8:	37 81       	ldd	r19, Z+7	; 0x07
 9fa:	2f 5f       	subi	r18, 0xFF	; 255
 9fc:	3f 4f       	sbci	r19, 0xFF	; 255
 9fe:	37 83       	std	Z+7, r19	; 0x07
 a00:	26 83       	std	Z+6, r18	; 0x06
 a02:	14 c0       	rjmp	.+40     	; 0xa2c <fputc+0x6e>
 a04:	8b 01       	movw	r16, r22
 a06:	ec 01       	movw	r28, r24
 a08:	fb 01       	movw	r30, r22
 a0a:	00 84       	ldd	r0, Z+8	; 0x08
 a0c:	f1 85       	ldd	r31, Z+9	; 0x09
 a0e:	e0 2d       	mov	r30, r0
 a10:	09 95       	icall
 a12:	89 2b       	or	r24, r25
 a14:	e1 f6       	brne	.-72     	; 0x9ce <fputc+0x10>
 a16:	d8 01       	movw	r26, r16
 a18:	16 96       	adiw	r26, 0x06	; 6
 a1a:	8d 91       	ld	r24, X+
 a1c:	9c 91       	ld	r25, X
 a1e:	17 97       	sbiw	r26, 0x07	; 7
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	17 96       	adiw	r26, 0x07	; 7
 a24:	9c 93       	st	X, r25
 a26:	8e 93       	st	-X, r24
 a28:	16 97       	sbiw	r26, 0x06	; 6
 a2a:	ce 01       	movw	r24, r28
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	1f 91       	pop	r17
 a32:	0f 91       	pop	r16
 a34:	08 95       	ret

00000a36 <__ultoa_invert>:
 a36:	fa 01       	movw	r30, r20
 a38:	aa 27       	eor	r26, r26
 a3a:	28 30       	cpi	r18, 0x08	; 8
 a3c:	51 f1       	breq	.+84     	; 0xa92 <__ultoa_invert+0x5c>
 a3e:	20 31       	cpi	r18, 0x10	; 16
 a40:	81 f1       	breq	.+96     	; 0xaa2 <__ultoa_invert+0x6c>
 a42:	e8 94       	clt
 a44:	6f 93       	push	r22
 a46:	6e 7f       	andi	r22, 0xFE	; 254
 a48:	6e 5f       	subi	r22, 0xFE	; 254
 a4a:	7f 4f       	sbci	r23, 0xFF	; 255
 a4c:	8f 4f       	sbci	r24, 0xFF	; 255
 a4e:	9f 4f       	sbci	r25, 0xFF	; 255
 a50:	af 4f       	sbci	r26, 0xFF	; 255
 a52:	b1 e0       	ldi	r27, 0x01	; 1
 a54:	3e d0       	rcall	.+124    	; 0xad2 <__ultoa_invert+0x9c>
 a56:	b4 e0       	ldi	r27, 0x04	; 4
 a58:	3c d0       	rcall	.+120    	; 0xad2 <__ultoa_invert+0x9c>
 a5a:	67 0f       	add	r22, r23
 a5c:	78 1f       	adc	r23, r24
 a5e:	89 1f       	adc	r24, r25
 a60:	9a 1f       	adc	r25, r26
 a62:	a1 1d       	adc	r26, r1
 a64:	68 0f       	add	r22, r24
 a66:	79 1f       	adc	r23, r25
 a68:	8a 1f       	adc	r24, r26
 a6a:	91 1d       	adc	r25, r1
 a6c:	a1 1d       	adc	r26, r1
 a6e:	6a 0f       	add	r22, r26
 a70:	71 1d       	adc	r23, r1
 a72:	81 1d       	adc	r24, r1
 a74:	91 1d       	adc	r25, r1
 a76:	a1 1d       	adc	r26, r1
 a78:	20 d0       	rcall	.+64     	; 0xaba <__ultoa_invert+0x84>
 a7a:	09 f4       	brne	.+2      	; 0xa7e <__ultoa_invert+0x48>
 a7c:	68 94       	set
 a7e:	3f 91       	pop	r19
 a80:	2a e0       	ldi	r18, 0x0A	; 10
 a82:	26 9f       	mul	r18, r22
 a84:	11 24       	eor	r1, r1
 a86:	30 19       	sub	r19, r0
 a88:	30 5d       	subi	r19, 0xD0	; 208
 a8a:	31 93       	st	Z+, r19
 a8c:	de f6       	brtc	.-74     	; 0xa44 <__ultoa_invert+0xe>
 a8e:	cf 01       	movw	r24, r30
 a90:	08 95       	ret
 a92:	46 2f       	mov	r20, r22
 a94:	47 70       	andi	r20, 0x07	; 7
 a96:	40 5d       	subi	r20, 0xD0	; 208
 a98:	41 93       	st	Z+, r20
 a9a:	b3 e0       	ldi	r27, 0x03	; 3
 a9c:	0f d0       	rcall	.+30     	; 0xabc <__ultoa_invert+0x86>
 a9e:	c9 f7       	brne	.-14     	; 0xa92 <__ultoa_invert+0x5c>
 aa0:	f6 cf       	rjmp	.-20     	; 0xa8e <__ultoa_invert+0x58>
 aa2:	46 2f       	mov	r20, r22
 aa4:	4f 70       	andi	r20, 0x0F	; 15
 aa6:	40 5d       	subi	r20, 0xD0	; 208
 aa8:	4a 33       	cpi	r20, 0x3A	; 58
 aaa:	18 f0       	brcs	.+6      	; 0xab2 <__ultoa_invert+0x7c>
 aac:	49 5d       	subi	r20, 0xD9	; 217
 aae:	31 fd       	sbrc	r19, 1
 ab0:	40 52       	subi	r20, 0x20	; 32
 ab2:	41 93       	st	Z+, r20
 ab4:	02 d0       	rcall	.+4      	; 0xaba <__ultoa_invert+0x84>
 ab6:	a9 f7       	brne	.-22     	; 0xaa2 <__ultoa_invert+0x6c>
 ab8:	ea cf       	rjmp	.-44     	; 0xa8e <__ultoa_invert+0x58>
 aba:	b4 e0       	ldi	r27, 0x04	; 4
 abc:	a6 95       	lsr	r26
 abe:	97 95       	ror	r25
 ac0:	87 95       	ror	r24
 ac2:	77 95       	ror	r23
 ac4:	67 95       	ror	r22
 ac6:	ba 95       	dec	r27
 ac8:	c9 f7       	brne	.-14     	; 0xabc <__ultoa_invert+0x86>
 aca:	00 97       	sbiw	r24, 0x00	; 0
 acc:	61 05       	cpc	r22, r1
 ace:	71 05       	cpc	r23, r1
 ad0:	08 95       	ret
 ad2:	9b 01       	movw	r18, r22
 ad4:	ac 01       	movw	r20, r24
 ad6:	0a 2e       	mov	r0, r26
 ad8:	06 94       	lsr	r0
 ada:	57 95       	ror	r21
 adc:	47 95       	ror	r20
 ade:	37 95       	ror	r19
 ae0:	27 95       	ror	r18
 ae2:	ba 95       	dec	r27
 ae4:	c9 f7       	brne	.-14     	; 0xad8 <__ultoa_invert+0xa2>
 ae6:	62 0f       	add	r22, r18
 ae8:	73 1f       	adc	r23, r19
 aea:	84 1f       	adc	r24, r20
 aec:	95 1f       	adc	r25, r21
 aee:	a0 1d       	adc	r26, r0
 af0:	08 95       	ret

00000af2 <__prologue_saves__>:
 af2:	2f 92       	push	r2
 af4:	3f 92       	push	r3
 af6:	4f 92       	push	r4
 af8:	5f 92       	push	r5
 afa:	6f 92       	push	r6
 afc:	7f 92       	push	r7
 afe:	8f 92       	push	r8
 b00:	9f 92       	push	r9
 b02:	af 92       	push	r10
 b04:	bf 92       	push	r11
 b06:	cf 92       	push	r12
 b08:	df 92       	push	r13
 b0a:	ef 92       	push	r14
 b0c:	ff 92       	push	r15
 b0e:	0f 93       	push	r16
 b10:	1f 93       	push	r17
 b12:	cf 93       	push	r28
 b14:	df 93       	push	r29
 b16:	cd b7       	in	r28, 0x3d	; 61
 b18:	de b7       	in	r29, 0x3e	; 62
 b1a:	ca 1b       	sub	r28, r26
 b1c:	db 0b       	sbc	r29, r27
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	f8 94       	cli
 b22:	de bf       	out	0x3e, r29	; 62
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	cd bf       	out	0x3d, r28	; 61
 b28:	09 94       	ijmp

00000b2a <__epilogue_restores__>:
 b2a:	2a 88       	ldd	r2, Y+18	; 0x12
 b2c:	39 88       	ldd	r3, Y+17	; 0x11
 b2e:	48 88       	ldd	r4, Y+16	; 0x10
 b30:	5f 84       	ldd	r5, Y+15	; 0x0f
 b32:	6e 84       	ldd	r6, Y+14	; 0x0e
 b34:	7d 84       	ldd	r7, Y+13	; 0x0d
 b36:	8c 84       	ldd	r8, Y+12	; 0x0c
 b38:	9b 84       	ldd	r9, Y+11	; 0x0b
 b3a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b3c:	b9 84       	ldd	r11, Y+9	; 0x09
 b3e:	c8 84       	ldd	r12, Y+8	; 0x08
 b40:	df 80       	ldd	r13, Y+7	; 0x07
 b42:	ee 80       	ldd	r14, Y+6	; 0x06
 b44:	fd 80       	ldd	r15, Y+5	; 0x05
 b46:	0c 81       	ldd	r16, Y+4	; 0x04
 b48:	1b 81       	ldd	r17, Y+3	; 0x03
 b4a:	aa 81       	ldd	r26, Y+2	; 0x02
 b4c:	b9 81       	ldd	r27, Y+1	; 0x01
 b4e:	ce 0f       	add	r28, r30
 b50:	d1 1d       	adc	r29, r1
 b52:	0f b6       	in	r0, 0x3f	; 63
 b54:	f8 94       	cli
 b56:	de bf       	out	0x3e, r29	; 62
 b58:	0f be       	out	0x3f, r0	; 63
 b5a:	cd bf       	out	0x3d, r28	; 61
 b5c:	ed 01       	movw	r28, r26
 b5e:	08 95       	ret

00000b60 <_exit>:
 b60:	f8 94       	cli

00000b62 <__stop_program>:
 b62:	ff cf       	rjmp	.-2      	; 0xb62 <__stop_program>
